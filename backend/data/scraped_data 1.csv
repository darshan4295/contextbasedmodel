URL,Title,Content
https://docwiki.embarcadero.com/ERStudioDA/203/en/About,About,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
The ER/Studio Data Architect User Guide is the primary reference for the product. It provides an overview of the product and gives detailed instructions on common and less-common tasks. In HTML Help format it serves as the online help for ER/Studio Data Architect. It is also distributed in PDF format for easy downloading and printing.
For licensing and installation information, see the ER/Studio Data Architect Quick Start Guide.
For more information and the latest documentation versions, see the
IDERA website
.
See Also
ER/Studio Team Server Wiki
Administrator Guide
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=About&oldid=4998
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Accessing_Collections_of_Objects,Accessing Collections of Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automation Objects Programmer's Guide
Collections are groups of Objects of the same type. For example, the Models object is a collection of all the Models in a Diagram.
Each Collection has four methods:
Item (), this is the default method
Add()
Remove()
Count.()
You can access objects by name (and sequence number or technical key, when appropriate). The following code sample illustrates default behavior:
Dim myentity as Entity
Set myentity = mymodel.Entities(""Entity1"")
In this example, the Item() method in the Entities collection is actually called to return the Entity1 object, but the script does not need to contain an explicit reference to the method because it is the default method.
The Add(), Remove(), and Count() methods are supported for all collections, except where noted. These methods modify the internal data in ER/Studio Data Architect immediately. The Add() method adds a new object into the collection. Add() fails if the object is not properly initialized. The Count() returns the number of objects in the collection.
Iterating Through Collections
The most-often used way of retrieving each object in a collection is with the
For Each... Next
loop. Note the use of the variable
HowMany
to start and iterate the loop below.
' Sets the entity name for each entity in the given collection
Dim MyDiagram As Diagram
Dim MyModel As Model
Dim MyEntity As Entity
Dim EntName As String
Dim HowMany As Integer
Set MyDiagram = DiagramManager.ActiveDiagram
Set MyModel = MyDiagram.ActiveModel
HowMany = 1
' Iterates through the Entities collection to rename all entities
For Each MyEntity In MyModel.Entities
' Uses CStr function to convert the Count variable to a string
EntName = ""ShinyNewEntity"" + CStr (HowMany)
MyEntity.EntityName = EntName
HowMany = HowMany + 1
Next MyEntity
See Also
Why Use Automation Objects?
Sample Macros Installed with ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Accessing_Collections_of_Objects&oldid=4999
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_Macros_to_GUI_Modeling_Menus,Adding Macros to GUI Modeling Menus,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
The Add/Remove Macros dialog box lets you add shortcuts to macros that you want to quickly access from various places in ER/Studio Data Architect. This dialog box is supported from the Main Menu, as well as the diagram, Entity, View, and Relationship shortcut menus. You can add up to ten macros for each object.
Notes
The point at which you open the dialog box, is where ER/Studio Data Architect adds the shortcut. For example, if you right-click an entity and then click Add/Remove Macro Shortcuts, ER/Studio Data Architect opens the Add/remove Macros Dialog box and indicates Entity in the title bar.
You can only add ten macros for each object.
The table below describes the options and functionality available on the Add/Remove Macros dialog box:
Option
Description
Available Macros
Lists all Macros available to set in the shortcut menu.
Selected Macros
Displays macros currently on the shortcut menu.
Add or Remove Macros
Choose
Macro Shortcuts > Add/Remove Macro Shortcuts
.
In the
Available Macros
box, click the target macros and then click the right-arrow.
Tip:
You can double-click any macro to add or remove it.
To remove a Macro, in the
Selected Macros
box, click the target macros and then click the left-arrow.
Note:
You can only select up to ten macros. If you try to select more than ten, ER/Studio Data Architect returns an error. You must remove some macros before you can add new ones.
When you are finished adding or removing macros, click
OK
.
See Also
Using the SAX Basic Macro Editor
Sample Macros Installed with ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_Macros_to_GUI_Modeling_Menus&oldid=5319
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_Text_Blocks,Adding Text Blocks,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Use text blocks to insert useful information into the diagram. You can add multiple text blocks at specific points throughout the diagram to add clarity and help with organization. When you no longer need to use a text block in your diagram, you can delete the text block.
Choose
Insert > Text Block
.
In the
Data Model Window
, click where you want to place the text block, enter the text you want to display, and then right-click to deselect the
Text Block
creator.
Notes
To resize the text box, select the text box, grab a sizing handle and drag to the desired position.
Change the font attributes by right-clicking the Text Block and then clicking Colors & Fonts.
See Also
Adding and Editing Lines
Adding and Editing Title Blocks
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_Text_Blocks&oldid=5001
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_a_Diagram_or_Data_Dictionary_to_the_Repository,Adding a Diagram or Data Dictionary to the Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
Using the Add Diagram operation you can add the active diagram and its data dictionary, if you choose, to the Repository.
You cannot add data model objects to the Repository without first adding the diagram containing them.
Log in to the Repository.
Choose
Repository > Diagrams > Add Diagram
.
Enter or revise the options in the
Add Diagram to ER/Studio Repository
dialog as appropriate, and then click
OK
to exit the dialog.
The following describe options that require additional explanation:
Save As
: Use to set the file name for a new, blank diagram or to change the file name for an existing diagram. This will also create a local DM1 file with the same name.
Add to Repository Project: Click the list to add the diagram to an established project. For more information, see
Working with Repository Projects
.
Bind Existing Enterprise Data Dictionaries
: Select a data dictionary to bind to the diagram. This list is empty if no Enterprise Data Dictionaries have been created. Using the Repository enables you to have more than one data dictionary bound to your diagram, the local dictionary and as many of the Enterprise Data Dictionaries as you like.
Promote Local Data Dictionary to Enterprise
: Creates an Enterprise Data Dictionary based on the selected DM1 file's data dictionary.
Data Dictionary Name
: If Promote Local Data Dictionary to Enterprise is selected, lets you change the name for the new Enterprise Data Dictionary; otherwise, disabled.
Filename
: When you add the diagram to the repository, the name of the local diagram file is automatically assigned to the respective file in the repository, however, you can change the name of the file in the repository, without affecting the local file name, by using the Change Diagram Filename command. For more information, see
Changing the Diagram File Name
.
Auto Publish
: When checked, this option automatically publishes the diagram in Team Server without the user needing to manually publish. The diagram then is visible and enabled when
Allow auto publish of new diagram
is set to
Yes
in
Team Server > Admin > Publication Preferences
.
Note:
After you add your diagram, if you want to place access restrictions on it, you need to have users and roles selected and secure your diagram.
See Also
Relating models to ER/Studio TS Data Sources
Changing the Diagram File Name
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_a_Diagram_or_Data_Dictionary_to_the_Repository&oldid=5457
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_and_Editing_Lines,Adding and Editing Lines,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Properties tab
2
Attachment Bindings tab
3
Notes
4
See Also
You can use lines to establish a visual connection between two entities without propagating foreign keys as would occur when creating a relationship. You can also use lines to illustrate a connection between data lineage objects.
On the
Drawing Shapes
toolbar, click the
Line
tool.
Click the object where the line is to start and then click the object where the line is to end.
Double-click the line to launch the
Line Editor
and then click
OK
to exit the editor.
The following help you complete the options in the
Line Editor
:
Properties tab
Attachment Bindings tab
Notes
Properties tab
Here you can change the color or weight of the line and end-point styles
Define the relationship between the source and target objects of the line using the Verb Phrase and Inverse Verb Phrase definitions in the Line Editor.
Attachment Bindings tab
Bind an external piece of information, or attachment to the line. You can also remove an attachment from a line, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
Edit the line by right-clicking the line and then clicking Layout Line, Straighten or Format.
Change the properties of a line in the Line Editor by right-click the line you want to change and then selecting Format.
Turn on and off the display of verb phrases in the Display tab of the Options editor (
Tools > Options
).
Change the default line type from elbowed to straight lines in the Line Drawing Mode area of the Display tab in Tools > Options.
Choose whether or not to display the verb phrase of the line in the Model Display area of the Display tab in Tools > Options.
When you hover over a line, ER/Studio Data Architect displays the name of the parent and child of the line if you have chosen View > Cursor Help Popup Options > Display Relationship Help.
See Also
Adding and Editing Title Blocks
Adding Text Blocks
Changing the Model Background
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_and_Editing_Lines&oldid=5003
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_and_Editing_Object_Comments,Adding and Editing Object Comments,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
You can add comments to many database objects for your own documentation needs or for communicating your ideas when collaborating with others to develop a model. Repository users can share comments between ER/Studio Data Architect and ER/Studio Team Server, so if a ER/Studio TS user makes a comment on a model, submodel, or database object, ER/Studio users can view these comments and vice versa. Comments are stamped with the date and the name of the logged in user.
On the Data Model Explorer or Data Model Window, right-click the object you want to add comments to and then select Comments. Or choose
Edit > Comments
.
Comments can be added to objects in the Repository without needing to check out the object.
The Comments editor displays where you can view or delete comments previously recorded or add new comments.
Comments can be added to objects in the Repository without needing to check out the object.
Enter the comment in the bottom area of the
Comment
editor and then click
Add
.
If you want the Repository to be updated immediately with the new comments, select
Synchronize All Comments In Repository Immediately
.
Add more comments if desired and then click
Save
.
Note:
If you are adding comments to a Repository diagram, you can add and commit comments to an object without needing to check out or check in the diagram. Click the
Synchronize External Data
button in the Repository toolbar and your comments are added to the diagram, with your Repository user name and the comment date and time.
You can add comments to most ER/Studio Data Architect objects, including the following object types:
• Alias
• Attachment Binding
• Attachment Types
• Attachments
• Attribute
• Attribute
• Auxiliary Table
• Column
• Data Lineage Column
• Data Lineage Source
• Data Lineage Table
• Data Movement Column
• Data Security
• Database
• Diagram
• Dictionary
• Dictionary Default
• Dictionary Rule
• Domain
• Entity
• Function
• Logical Model
• Logical Submodel
• Package and Object Type
• Physical Model
• Physical Submodel
• Procedure
• Reference Value
• Relationship
• Security
• Security Binding
• Stogroup
• Synonym
• Table
• Tablespace
• User Data Type
• View
• View Column
• Visual Data Lineage Objects
For ER/Studio Repository users, when logged in to the Repository, any comments added are stamped with the Repository user name and date.
Comments are stamped with the user name and comment creation date and time.
You can delete the comment by clicking the X for the comment in the Comments dialog.
Once logged in to the Repository, you can share your comments with other ER/Studio Data Architect users by storing them with the diagram file in the Repository.
To upload your comments to the Repository
and download new comments in the open diagram
, choose
Repository > Synchronize External Data
. Access the comment editor via the comments tool on the modeling toolbar, though the context menu, or by choosing
Edit > Comments
.
You can add a comment to one object at a time. If more than one object is selected the
Comments
option will not be available.
See Also
Editing an Object
Editing the Name of an Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_and_Editing_Object_Comments&oldid=7874
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Adding_and_Editing_Title_Blocks,Adding and Editing Title Blocks,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
The Title Block provides important identification information about your model or submodel that by default includes the file name and information from the Diagram Properties, such as project name, author name, company name, diagram version number, copyright information, the diagram creation date and last modification date. You can change many of the field values in the title block without affecting the values in the Diagram Properties editor.
Click the model or submodel to which you want to add a title block.
Click
Insert >Title Block
.
In the
Data Model Window
, click where you want to place the title block, and then right-click to deselect the
Title Block
creator.
Use the selection tool to reposition the title block if desired.
Double-click the
Title Block
to launch the Title Block editor, make the changes desired, and then click
OK
to affect the changes and exit the editor.
Repeat steps 1-4 for each model or submodel as desired.
Notes
The File Name and Submodel or Model name fields in the Title Block editor are read-only, as are the creation and modification dates.
For information on Diagram Properties, see
Setting Diagram Properties
.
See Also
Adding Text Blocks
Changing the Model Background
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Adding_and_Editing_Title_Blocks&oldid=5005
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Administrator_Guide,Administrator Guide,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Help
This volume of help describes how to administer and maintain ER/Studio Data Architect.
Topics
Changing the Location of Shared Files
Uninstalling
Licensing
How to Specify Repository Ports
Best Practices
See Also
Introduction
User Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Administrator_Guide&oldid=5006
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Application_Interface,Application Interface,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
The application interface is divided into several tabbed windows that let you navigate and customize your workspace, accessible by a ""ribbon"" menu. The application includes context-sensitive toolbars, menus, intuitive icons, keyboard commands, and other resources to help you work efficiently. ER/Studio Data Architect user interface has a standard Windows look and feel.
For a detailed description of the internal data structure of the ER/Studio Data Architect application and the Repository, you can look at Metadata models (DM1 files), usually found in the following directory:
C:\ProgramData\IDERA\ERStudioDA_x.x\Sample Models
For information on enhanced UI features, please see the corresponding numbers below:
Sophisticated diagram auto-layout tools provide single-click clean-up of diagram objects.
Design elements and other often-used functions are dockable for quick access.
Data Model Explorer displays information about logical and physical models, submodels, and nested submodels.
Repository object status icons display real-time user access information.
The Overview Window lets you navigate large Data Models.
The Zoom Window helps you focus on the details of a specific area of a large, reduced diagram.
Interface Features
The Data Model Explorer is comprised of multiple tabs that offer easy access to important functionality and also includes an Explorer tree that lets you efficiently navigate the objects of your data models. The ER/Studio Data Architect interface to the Data Model is divided into two main areas. On the left is the
Data Model Explorer
and on the right is the
Data Model Window
. This convention is carried out on other tabs of the user interface, such as the Data Lineage tab, where you’ll find an explorer on the left and a graphical representation on the right. The Data Model Window also provides a complete workspace for creating physical and logical data models and smaller, movable windows to help you navigate large data models.
This section also covers the following items:
Data Model Explorer
Data Model Window
Data Lineage Window
Pop-up Windows
Zoom Window
Overview Window
Quick Access Toolbar
ERDA 18.5 and later only
Toolbars
ERDA 18.4 and earlier only
Keyboard Commands
Status Bar
See Also
Overview
Automating ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Application_Interface&oldid=7186
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Apply_a_Scripted_Procedure_to_a_Submodel_or_Model,Apply a Scripted Procedure to a Submodel or Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
You can copy a scripted procedure to from a submodel to the physical model or to one or more submodels using the
Apply to Submodel(s)
command. For more information, see
Copying a Database Object to a Submodel (Apply to Submodel)
.
See Also
Create a Scripted Procedure
Creating and Editing Database Dependent Objects
Developing the Physical Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Apply_a_Scripted_Procedure_to_a_Submodel_or_Model&oldid=5008
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Assigning_Model_Data_Movement_Properties,Assigning Model Data Movement Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
Assigns data sources or targets and the level of mapping you intend to use, direct or secondary. You must first have added a source/target in the Data Lineage tab using the
Data Source/Targets Properties
. To add a data source/target to a physical model:
Right-click the top-level node for your particular physical model name and select
Data Movement Properties
.
Select the
Source
or
Targets
tab.
Select the level of mapping you intend to add or edit.
Click
Add
and select from among the models listed.
Select the
Synch registered data...
option if you want changes to the current model that extend to other models in the.dm1 file to be automatically updated.
Once complete, you can double-click any table to edit table-level and column-level movement rules.
See Also
Defining Source Systems
Introduction to Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Assigning_Model_Data_Movement_Properties&oldid=5009
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Assigning_Object_Appearance_and_Behavior_Using_Properties,Assigning Object Appearance and Behavior Using Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automation Objects Programmer's Guide
Properties are Object attributes that determine Object appearance or behavior. Color, count, name and ID all are properties common to many objects. Some, such as ID, are usually read-only. Others can be changed. ER/Studio Data Architect immediately reflects property modifications by updating internal data.
Dim MyDiagram As Diagram
Dim MyModel As Model
Dim MyEntity As Entity
Dim EntName As String
Dim EntID As Integer
Set MyDiagram = DiagramManager.ActiveDiagram
Set MyModel = MyDiagram.ActiveModel
EntID = 1 'We want the name of the Entity that
ER/Studio Data Architect
has identified as ID =1
Set MyEntity = MyModel.Entities.Item(EntID)
EntName = MyEntity.EntityName
'Now we can display EntName in a MsgBox, write it to a text file, or
'change it and re-name the Entity.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Assigning_Object_Appearance_and_Behavior_Using_Properties&oldid=5010
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Associate_Similar_Objects_Using_User-Defined_Mappings,Associate Similar Objects Using User-Defined Mappings,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
Contents
1
Create User-Defined Mappings
2
Definition tab
3
Attachment Bindings tab
4
Notes
5
See Also
When consolidating various data assets across the enterprise, quite often the logical and physical model are completely unrelated. When new physical models are brought in via the Add New Physical Model wizard or Compare and Merge wizard, it is difficult to ""map"" existing logical entities to the physical tables. The physical objects may already be denormalized and complex (one-to-many, many-to-one) relationships may exist between the logical and physical objects. In this case, there is a gap between what is logically modeled and what is physically implemented. ER/Studio helps modelers map completely unrelated objects across models within a dm1 file using User-Defined Mappings.
Create user-defined mappings to relate logical entities to physical tables. The UDM can relate any objects of the same type. Once the UDM is created, you can see a graphical tree/node representation of the mapping on the Where Used tab in the Entity Editor or Table Editor. In the screenshot below, the entities mapped to Customer are marked with a little pushpin icon
. On the right of the screen are icons that let you edit the mapping
or edit the user-defined mappings
, and switch the entity editor to view or edit the details of the object selected. For information purposes you also map a Table to an Entity and edit that mapping from the Where Used tab.
One use of the UDM is to back-construct the relationships shown in the Where Used tab.
For example, frequently a legacy physical model must be imported and added to a mature logical model (Using the Add New Physical model wizard: from the Main menu, Model > Add New Physical Model). You must relate the two models and can use the user-defined mapping to create and document the relationship.
Denormalization information for the imported physical model likely is not available. Therefore, ER/Studio Data Architect has no denormalization mapping information to display on the Where Used tab. The UDM system allows you to build the mappings with no restrictions. You can map attributes to columns and entities to tables by right-clicking any of the models listed and selecting the related objects.
Create User-Defined Mappings
In the
Data Model Explorer
or
Data Model Window,
right-click the entity or table that you want to associate with other entities or tables.
Click the
Where Used
icon
To associate the object with any entity/table in the model
, in the
Where Used
dialog, double-click the
Where Used
entry (the one with the pencil icon next to it) or right-click the pencil icon and select
Edit Mappings
. Click the target entity/table and the
Definition
and
Attachment Bindings
tabs appear.
The following helps you complete the options of the
Edit Mappings
dialog:
Definition tab
Attachment Bindings tab
Notes
Definition tab
Enter or edit a definition for the user-defined mapping. If the target database supports it, ER/Studio Data Architect adds this definition as a table comment when generating SQL code.
Attachment Bindings tab
Bind an external piece of information, or attachment to the user-defined mapping. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
You can map an entity to tables in disparate physical models.
Once you have created a user-defined mapping, to view or edit the mapping you can open a Table Editor or Entity Editor and then select the Where Used tab. You can also right-click a table in the diagram and select Edit User-Defined Mappings.
You can also edit the mappings from the Where Used tab in the Table Editor or Entity Editor by right-clicking the model you want to editor and clicking the Edit option. When editing the user-defined mappings, you can also edit the definition and the attachments bound to the user-defined mapping.
See Also
Developing the Physical Model
Common Tasks
Optimizing Query Performance on the Physical Model (Denormalizing the Physical Model)
Working with Relationships
Working with Universal Mappings
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Associate_Similar_Objects_Using_User-Defined_Mappings&oldid=5011
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Associating_Database_Roles_with_New_Database_Users,Associating Database Roles with New Database Users,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
After you have a database role defined, you can assign that role to any new users created. Once defined, the permissions granted to users directly or by applying roles can be edited on the Permissions tab of the Entity Editor.
In the Data Model Window, expand the logical or physical Main Model, right-click the
Users
node, and then click
New Database User.
On the first page of the wizard, click
Add
in the
Roles
area and then choose the roles you want to apply.
Click
Finish
.
Now, when you edit the database user, if you have selected
Show inherited permissions
on the
Object Privileges
tab of the
User Editor
, you will see blue check marks denoting the granted permissions afforded to the user by the applied roles.
Generally, permissions granted or revoked through the application of a role are overridden by permissions assigned to the user in the
User Editor
, or permissions assigned to the user on the
Permissions
tab of the Entity/Table Editor. Check your DBMS documentation for verification.
See Also
Creating and Editing Database Users
Creating and Editing Database Roles
Changing Database Users Associated with Existing Database Roles
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Associating_Database_Roles_with_New_Database_Users&oldid=5012
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Associating_Database_Users_with_New_Database_Roles,Associating Database Users with New Database Roles,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
After you have a database user defined, you can assign that user a database role. Once defined, the permissions granted to a particular user directly or by applying roles can be edited on the Permissions tab of the Entity Editor or Table Editor.
In the Data Model Window, expand the logical or physical Main Model, right-click the
Roles
node, and then click
New Database Role
.
On the first page of the wizard, in the
Roles
area click
Add
and choose the roles you want to apply.
Click
Finish
.
Now, when you edit the database user, if you have selected
Show inherited permissions
on the
Object Privilege
s tab of the
User Editor
, you will see blue check marks denoting the granted permissions afforded to the user by the applied roles.
Permissions granted or revoked through the application of a role are overridden by permissions afforded the user in the
User Editor
, or on the
Permissions
tab of the Entity/Table Editor.
See Also
Creating and Editing Database Users
Creating and Editing Database Roles
Associating Database Roles with New Database Users
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Associating_Database_Users_with_New_Database_Roles&oldid=5013
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Associating_a_Data_Dictionary_with_a_Diagram,Associating a Data Dictionary with a Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
Binding an existing Enterprise Data Dictionary with a diagram enables you to reuse data dictionary objects such as domains, reference values, and attachments.
The Enterprise Dictionary Binding Dialog now includes attachments and reference values. The bindings are presented in a grid format and can be exported to *.csv files for reporting purposes.
Log in to the Repository.
Check out the diagram you want to bind the dictionary to.
Choose
Repository > Data Dictionary > Bind Enterprise Data Dictionary
and then select the dictionary you want to associate with.
Notes:
You can associate multiple data dictionaries with the same diagram.
You must have the Enterprise edition of ER/Studio Data Architect to have more than one data dictionary in a diagram.
All changes to dictionary objects in an Enterprise Data Dictionary will propagate to diagrams where the object is used. If you want to use a domain or attachment only, for example, in one specific diagram, it can remain in the local dictionary. If a domain or attachment needs to be reused and updated across diagrams, then it should be created in an Enterprise dictionary.
You can have multiple dictionaries per diagram. This means that you can have one all-encompassing dictionary or project-level dictionaries.
You must check out the diagram before binding a data dictionary to it.
You do not need to check in the diagram to commit the change to the Repository. The Bind Enterprise Data Dictionary operation automatically updates the Repository server with the appropriate information.
See Also
Determining Where an Enterprise Data Dictionary is Used
Creating an Enterprise Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Associating_a_Data_Dictionary_with_a_Diagram&oldid=5014
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Associating_the_Enterprise_Data_Dictionary_with_Repository_Diagrams,Associating the Enterprise Data Dictionary with Repository Diagrams,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
Using Data Dictionary Bindings, you can see and control the associations of Enterprise Data Dictionaries across all your diagrams in the Repository. The Enterprise Data Dictionary Bindings dialog provides a list of all your Enterprise Dictionaries and shows you where its objects are in use. For example, if you have a 'name' domain in an Enterprise Data Dictionary used across all or some of your diagrams, you can navigate to the domain to see what entities, tables, and models are used, which provides some impact analysis about which model objects will be affected by a change to the domain.
Open the Enterprise Data Dictionary Bindings Dialog
Choose
Repository > Data Dictionary > Enterprise Data Dictionary Bindings
.
See Also
Associating a Data Dictionary with a Diagram
Creating an Enterprise Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Associating_the_Enterprise_Data_Dictionary_with_Repository_Diagrams&oldid=5015
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Attaching_External_Documents_to_the_Data_Model,Attaching External Documents to the Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
Contents
1
Create and Edit Attachment Types
2
Create and Edit Attachments
3
Bind an Attachment to an Object
4
Bind an Attachment to a Specific Object
5
Override an Attachment Value
6
See Also
Attachments and attachment types offer a structured method for you to associate an external piece of information to your data model. You can extend your metadata this way and include supporting documentation, such as meeting notes, risk analysis and spreadsheets. You can bind attachments to virtually any file or application on your system.
Attachments are organized into two key components:
Attachment Types
: An organizational system where you can group together similar attachments and specify which objects can have this type of attachment bound to them. Attachment Types define the scope of the attachments created underneath them. Use attachment types to organize attachments by either the object types to which they are applied or the scope of the business data they are supposed to capture for a model. Once you create an attachment, you can bind it to any data model objects associated with the attachment type.
Attachment
: Information that you can associate with the diagram objects types selected for the Attachment Type. Attachments can take many different forms such as an external file, a date, or a test list.
TIP
: You can find a good example of a well-structured attachments folder in the Northwind sample model.
This section is comprised of the following topics:
Create and Edit Attachment Types
Create and Edit Attachments
Bind an Attachment to an Object
Bind an Attachment to a Specific Object
Override an Attachment Value
Create and Edit Attachment Types
In the
Data Dictionary
, right-click the
Attachments
folder and then click
New Attachment Type
.
Define the attachment type as required and then click
OK
to complete the editor.
The following describe options that require additional explanation:
Name
page/tab
Define the name of the attachment type and provide a description of the attachment type, such as when and why attachments of this type are used.
Attachment Type Usage
page/tab
Lists all supported object classes to which you can bind attachments of this type. Any object classes you select here will be bound to this attachment type and will be displayed subsequently on the Binding Information tab of the Attachment Editor.
Notes
If you are editing an existing attachment type, and you remove object types from the object list on the Attachment Type Usage tab, bound attachments associated with this attachment type will be affected.
To only allow specific attachments to be bound to specific objects, create an Attachment Type for this purpose and on the Attachment Type Usage tab, indicate the specific objects by selecting the corresponding boxes.
Create and Edit Attachments
In the
Data Dictionary
, right-click the appropriate attachment type folder and then click
New Attachment
.
Define the attachment as required and then click
OK
to complete the editor.
Once you have created the attachment, you can edit it by right-clicking the attachment you want to change, and then selecting Edit Attachment.
The following helps you complete the describes the options that require additional explanation:
Name
page/tab
Define the name of the attachment and provide a description of the attachment, such as when and why this attachment is used.
Value
page/tab
Select what kind of data this attachment contains. For Text List datatypes, you can list possible data values and then set the default value.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this attachment. You can override this setting using the Attachment Bindings tab of data model object editors.
Bind an Attachment to an Object
Ensure the attachment can be used with the object you want to bind it to.
In the Data Dictionary, double-click the attachment you want to bind to ensure it can be bound to the type of object selected.
Bind an Attachment to a Specific Object
Once you have bound an attachment to an object type in the Data Dictionary, you can choose to bind that attachment to a specific object of that type from within the object editor. For example, you have bound an attachment to an entity type object. From within the Entity Editor, click the Attachment Bindings tab and then from the list of Available Attachments, select the attachment you want to bind to that specific entity and then click the arrow to move the attachment into the list of attachments already associated with that entity.
Attachments bound to a primary key is not transferred to the foreign key of the child in the relationship.
Override an Attachment Value
The Value Override Editor lets you override an Attachment's default value with a new value. This lets you add additional information to a bound attachments. To override an attachment value, click the value field. The Value field varies depending on your datatype selection. For example, if the attachment is a text datatype, the Value Override Editor lets you edit the text. The following describes the different available datatypes and their associated values and how you would change their values:
Boolean
: Lets you select None, True, or False.
Date
: Displays the current date. To change the date, click the list, and use the calendar to select the target date.
External File Path
: Lets you change an external file path. Enter a file path or browse and locate it. If you want to view the attached file, click the View File button.
Numeric
: Lets you change the numeric value. Enter a numeric value in the box.
Text
: Lets you change the character value. Enter text in the box.
Text List
: Double-click the blank line in the text box, enter a value and then use the TAB key to go to the next line. Repeat these steps until you finished adding values. Use the Up or Down buttons to reorder the values. Use the Delete button to remove a value. The first entry is the default value. To change this, click the target value and then click the Set as Default button.
Time
: Lets you change the time value. Select one of the time parameters (hours, minutes, seconds, AM/PM) in the box, and enter a value or scroll to the appropriate value. Continue selecting time parameters and changing the value until the appropriate time is entered.
See Also
Associating a Data Dictionary with a Diagram
Working with the Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Attaching_External_Documents_to_the_Data_Model&oldid=5016
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Automatic_Naming_Translation,Automatic Naming Translation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing Standard Model Features for New Models
To automatically use a Naming Standards Template to set a physical name from a logical and vice versa as names are modified in the Entity/Table and Attribute/Column Editors.
To enable this feature, go to
Tools > Options > Name Handling
tab in the group labeled
In-Editor Naming Standards
:
Enable automatic naming translation.
Checking this option enables this feature.
Use entity/table NST for child translation.
Checking this option enables the use of the NST (naming standards template) bound to the parent entity or table, if there is none bound to the attribute or column currently being edited.
To use this feature there must be a bound NST on the object
OR
there is a bound NST on the parent entity/table and the second option above is checked.
Also required: The
freeze name
property is not checked.
For attributes/columns, this only applies to the individual object. The freeze name property of the parent entity/table is ignored.
You are editing a logical name in the logical model or a physical name in the physical model.
If the translation is enabled, then as the user types the name, the translated name appears in the other edit control. For example, if the user is editing an attribute in the logical model, then as the user enters the attribute name, the column name field is updated with a translated name. Or, if a user is editing the table name of a table in a physical model, then the entity name is set with the translated name.
Note:
Name handling settings shown in
Model Options
are ignored when a name can be translated according to the prerequisites above. Otherwise, they are followed.
See Also
Enforcing Naming Standards Using Naming Standards Templates
Creating and Editing Columns
Creating and Editing Tables
Customizing Standard Model Features for New Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Automatic_Naming_Translation&oldid=3539
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Automating_ER/Studio_Data_Architect,Automating ER/Studio Data Architect,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
Note:
More detailed information is available within the product in the Automation Interface Reference help file. You can view this information in the product by clicking the arrow next to the Question Mark and choosing Automation Interface Reference.
If you are using Windows to view the chm file, you may need to right-click and
unblock
the file.
Automation Interface objects are scriptable controls for most ER/Studio Data Architect functions. You can create macros to automate repetitive tasks or to extend the functions already found in the application. A few days coding can save months of human resources in the long run as described in
Why Use Automation Objects?
This section is intended for programmers with a working knowledge of BASIC. You can learn it using ER/Studio Data Architect's macro editor, but you will also need a textbook devoted specifically to beginner BASIC programmers. The macro language is WINWRAP (formerly SAX) BASIC, similar to MS Visual BASIC. There are a few, but critical, syntactic differences from other BASIC languages. See the Introduction to the
Automation Interface Reference Guide
, which is accessible from the Help menu, to save some debugging time.
You can also create event handlers to run automatically every time you perform an action in the application, such as Add Entity. See
Creating Event Handlers
. You can also write handlers for update events, see
Handling Update Events
.
A number of example macros are included. To see them, open any ER/Studio Data Architect
*.dm1
file, switch to the Macro tab in the Data Model Explorer, and double-click any sample macro. The macro will open in the Macro Editor.
The diagram above shows the differences between using macros within ER/Studio Data Architect and running your own COM application external to ER/Studio Data Architect. In the external case, you will need to create a link to the ER/Studio Data Architect Type Library and declare ER/Studio object types. Example applications using MS Visual Basic 6.0 and.Net VB and C# are in your installation directory under ""C:\Program Files\Idera\ERStudio Data Architect x.x\Readme\TableList.zip"".
Internally, the only difference is that the namespace, type library, and top-level application objects are already created before you run or edit a macro. Otherwise the code for external and internal applications will be nearly identical. You can copy and paste code from your macros to an external application with few changes.
For example, if you want to let users automatically export ER/Studio Data Architect model metadata to applications like Microsoft Excel, and simultaneously add the created file to a Microsoft Outlook message for distribution, you can write a macro to take advantage of this object interaction.
Topics covered in this section include:
Why Use Automation Objects?
Automation Objects Programmer's Guide
Sample Macros Installed with ER/Studio Data Architect
Running ER/Studio Data Architect Macros from Windows
Creating Event Handlers
Handling Update Events
Adding Macros to GUI Modeling Menus
Using the SAX Basic Macro Editor
See Also
Access ER/Studio Data Architect from Command Line
Objects and Object Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Automating_ER/Studio_Data_Architect&oldid=7952
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Automating_ERStudio_DA,Automating ER/Studio Data Architect,"From ER/Studio Data Architect
(Redirected from
Automating ERStudio DA
)
Jump to:
navigation
,
search
Go Up to
User Guide
Note:
More detailed information is available within the product in the Automation Interface Reference help file. You can view this information in the product by clicking the arrow next to the Question Mark and choosing Automation Interface Reference.
If you are using Windows to view the chm file, you may need to right-click and
unblock
the file.
Automation Interface objects are scriptable controls for most ER/Studio Data Architect functions. You can create macros to automate repetitive tasks or to extend the functions already found in the application. A few days coding can save months of human resources in the long run as described in
Why Use Automation Objects?
This section is intended for programmers with a working knowledge of BASIC. You can learn it using ER/Studio Data Architect's macro editor, but you will also need a textbook devoted specifically to beginner BASIC programmers. The macro language is WINWRAP (formerly SAX) BASIC, similar to MS Visual BASIC. There are a few, but critical, syntactic differences from other BASIC languages. See the Introduction to the
Automation Interface Reference Guide
, which is accessible from the Help menu, to save some debugging time.
You can also create event handlers to run automatically every time you perform an action in the application, such as Add Entity. See
Creating Event Handlers
. You can also write handlers for update events, see
Handling Update Events
.
A number of example macros are included. To see them, open any ER/Studio Data Architect
*.dm1
file, switch to the Macro tab in the Data Model Explorer, and double-click any sample macro. The macro will open in the Macro Editor.
The diagram above shows the differences between using macros within ER/Studio Data Architect and running your own COM application external to ER/Studio Data Architect. In the external case, you will need to create a link to the ER/Studio Data Architect Type Library and declare ER/Studio object types. Example applications using MS Visual Basic 6.0 and.Net VB and C# are in your installation directory under ""C:\Program Files\Idera\ERStudio Data Architect x.x\Readme\TableList.zip"".
Internally, the only difference is that the namespace, type library, and top-level application objects are already created before you run or edit a macro. Otherwise the code for external and internal applications will be nearly identical. You can copy and paste code from your macros to an external application with few changes.
For example, if you want to let users automatically export ER/Studio Data Architect model metadata to applications like Microsoft Excel, and simultaneously add the created file to a Microsoft Outlook message for distribution, you can write a macro to take advantage of this object interaction.
Topics covered in this section include:
Why Use Automation Objects?
Automation Objects Programmer's Guide
Sample Macros Installed with ER/Studio Data Architect
Running ER/Studio Data Architect Macros from Windows
Creating Event Handlers
Handling Update Events
Adding Macros to GUI Modeling Menus
Using the SAX Basic Macro Editor
See Also
Access ER/Studio Data Architect from Command Line
Objects and Object Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Automating_ER/Studio_Data_Architect&oldid=7952
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Automation_Objects_Programmer%27s_Guide,Automation Objects Programmer's Guide,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
This section details specific coding tasks common to ER/Studio Data Architect macros. There are a few, but critical, syntactic differences from other BASIC languages.
This is intended for programmers with a working knowledge of BASIC. You can learn it using ER/Studio Data Architect's macro editor, but you will also need a textbook devoted specifically to beginner BASIC programmers.
Contents
1
Note on Properties Get/Let
2
Note on Use of ""Set""
3
Note on Dim [what] As [ever]
4
Related Topics
5
See Also
Note on Properties Get/Let
A property can be defined as Get/Let, meaning you can read the property (Get) or change it (Let). However, many such properties are set by ER/Studio Data Architect
and are in fact read-only
, that is Get but not Let. For example, most of the numeric IDs are Get-only.
In general, if you can edit a property using ER/Studio Data Architect's GUI design controls, and there exists an automation object for it, it will exist as Get/Let. If you can't edit it in ER/Studio Data Architect, it's read-only (Get -only).
Note on Use of ""Set""
The code samples do not always use ""Set."" In the WINWRAP (formerly SAX) BASIC Editor within ER/Studio Data Architect, you must use the function
Set
on the first instance of the object in a script (or block of code within object scope). You must use it again if the object reference changes. This is distinct from coding for BASIC executable images where you can declare objects
Public
(etc.) and not have to
Set
them, as in Microsoft's VB.Net.
An ER/Studio Data Architect Macro Editor Example:
Set MyDiagram = DiagramManager.ActiveDiagram
'some code that closes the active diagram and opens another diagram
Set MyDiagram = DiagramManager.ActiveDiagram
Note on Dim [what] As [ever]
WINWRAP BASIC will not allow you to declare and initialize any variable in one statement. Example:
'No way:
Dim MyData As Integer = 30
'This is OK:
Dim MyData As Integer
MyData = 30
Related Topics
Object Model Hierarchy Diagram
Instantiating the Parent Object in the Macro Editor
Instantiating the Parent Object in an External Application
Accessing Collections of Objects
Assigning Object Appearance and Behavior Using Properties
Performing Complex Actions Using Methods
Sample Macros Installed with ER/Studio Data Architect
Running ER/Studio Data Architect Macros from Windows
Creating Event Handlers
Handling Update Events
Adding Macros to GUI Modeling Menus
Automating ER/Studio Data Architect
See Also
Sample Macros Installed with ER/Studio Data Architect
Running ER/Studio Data Architect Macros from Windows
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Automation_Objects_Programmer%27s_Guide&oldid=7955
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Backup_Copies,Backup Copies,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Repository Administration
In some cases it makes sense to keep a backup copy of a dm1 file. However, if you perform Repository operations on more than one copy of the file at a time it could lead to check in failures. The following best practices are for situations where it is necessary to keep a backup copy of a.dm1 file:
Create a folder on your hard drive specifically for dm1 file backups. For example, add a folder named
backup
under your Active Directory folder.
When making a backup copy, use Windows Explorer to move or copy the current file into the backup directory. If you plan on doing a ""clean” get to retrieve the entire diagram from the Repository, use move so that your local diagram is not in the Active Files directory.
If you need to merge changes from a backup into the current copy of the diagram, make sure no Repository operations are done on the backup copy. Complete the merge and close the backup copy before beginning the check in procedure.
See Also
Best Practices
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Backup_Copies&oldid=5019
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Before_you_Start,Before you Start,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Introducing ER/Studio Data Architect
ER/Studio Data Architect
is a visual modeling application used for platform-independent logical data architecture analysis and design, in addition to platform-specific physical database design and construction. The powerful, multi-level design environment addresses the everyday needs of database administrators, developers, and data architects who build and maintain large, complex database applications and strive to consolidate, report, and re-use metadata across the enterprise.
The progressive interface and simplicity of
ER/Studio Data Architect
has been designed to effectively address the ease-of-use issues which have plagued data modeling and CASE tools for the past decade and more. The application equips you to create, understand, and manage the life-cycle of mission-critical database designs and business metadata within the enterprise.
ER/Studio Data Architect
is rich and customizable, offering strong logical design capabilities like:
The ability to spawn many physical designs from a corporate logical design.
Bi-directional model comparison and information synchronization.
Visual-Basic for Applications API for product customization.
Powerful DDL reverse engineering and generation.
Metadata import and export capabilities.
Data lineage documentation.
Sophisticated XML, HTML, and RTF-based documentation and reporting facilities.
Feature
ER/Studio DA Professional
ER/Studio DA
ERDA Developer Edition
*
For a list of supported database platforms in the ER/Studio Data Architect Developer edition provided with the RAD Studio Architect edition, see
Supported Database Platforms
.
Physical / logical modeling
Forward / reverse engineering
Repository (model version control)
Agile change management
Metadata import/export capabilities
Model import bridges included
Create HTML & RTF reports
Create reports in other formats (XML Schema, PNG, JPEG and DTD Output)
RDBMS platforms
*
Big data platforms – MongoDB, Hadoop Hive
Data source registry
Product Benefits by Audience
Data Modelers and Data Architects
: ER/Studio Data Architect is critical for organizations concerned with eliminating data redundancy, creating an enterprise view of data assets, and assisting development with making informed decisions about how best to reuse elements pre-defined by the enterprise. Its powerful logical (non-database or technology specific) analysis and design environment helps to normalize and create an enterprise view of the objects concerning the data managed by an organization. More importantly, it can communicate this quickly through powerful reporting and metadata exchange mechanisms throughout the enterprise.
Database Administrators and Database Developers
: Managing databases can be incredibly difficult without a blueprint or roadmap to understand important object dependencies. ER/Studio Data Architect's round-trip engineering capabilities including database reverse-engineering provide database administrators (DBAs) or developers with important
physical
data models in seconds. These models can be used as powerful and efficient change management platforms, allowing users to update a model with the required changes which need to be implemented at the database and automatically generate DBMS-specific, syntactically correct, alteration or database DDL.
Business and IT Managers
: ER/Studio Data Architect's robust reporting facilities allow critical information about designs to the enterprise to be delivered in seconds. This heavily leveraged and beneficial capability of ER/Studio DA allows users to provide, in literally seconds, clear, easily navigable and safe-to-distribute documentation about a database or enterprise data model to those who need to review it.
See Also
What's New
Upgrading ER/Studio Data Architect
Supported Database Platforms
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Before_you_Start&oldid=5555
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Bind_a_Reusable_Procedure_to_a_Table,Bind a Reusable Procedure to a Table,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
After you have defined the reusable procedure in the Data Dictionary, you can drag the procedure from the Reusable Procedural Logic node in the Data Dictionary onto a table in the Data Model Window. This binds the procedure to the table. You can see any bound procedures on the Dependencies tab of the Table Editor.
See Also
Creating and Editing Procedures
Create a Scripted Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Bind_a_Reusable_Procedure_to_a_Table&oldid=5022
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Branching_and_Merging_Diagrams,Branching and Merging Diagrams,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Branches are typically needed for testing or development purposes and then, once stabilized, merged into the currently deployed model. You can branch and sub-branch as often as you want.
Open the target diagram for branching or merging.
Choose
Repository > Diagrams > Branch/Merge Diagram
.
To create a branch of the active diagram
, from the
Branch Tree
, select the diagram to be branched and then click the
Branch
button.
To merge the active diagram with another diagram
, from the
Branch Tree
, select the diagram or branch of the diagram to be merged and then click
Merge
.
The following describes options that may not be self-explanatory.
Display deleted diagrams
: Select this option to view all branches of the diagram, including those that were previously deleted. Deleted diagrams are unavailable and cannot be selected to use with the Branch or Merge functions.
Notes
It is good engineering practice to stick with a single enumeration convention, be it alphanumeric or some other series, and to use descriptive names.
You can select whether the *.dm1 file name or the diagram name is displayed by changing the display option: Choose
Repository > Options > General
and then change the
Diagram Name Display Format
.
See Also
Rolling Back a Diagram to a Previous Version
Working with Named Releases of Repository Diagrams
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Branching_and_Merging_Diagrams&oldid=5023
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Bucketing,Bucketing,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
On the
Bucketing tab
of the Table Editor for the Hive platform, you can select the columns of a table on which to cluster. When at least one of the available columns has been added to the selection, the
Sorted
box becomes available. Allowing you to choose which columns to sort in the cluster.
Bucketed tables allow a more efficient sampling than non-bucketed tables, and may later allow for time saving operations such as mapside joins.
The following options are:
Available Columns
: Displays all the columns available to add to the
bucket
. Select the column you want to add to the organizing keys and move it to the Selected Columns box. Use the left and right arrows to move columns to and from the Selected Columns box.
Selected Columns
: Displays the columns that make up the cluster.
Up
/
Down
buttons: Let you reorder the columns in the bucket. The column order can affect the access speed. The most frequently accessed columns should be at the top of the Selected Columns list.
INTO
variableN
BUCKETS: This box allows you to specify the number of buckets in your table.
See Also
Skewed_Tables
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Bucketing&oldid=5024
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Business_Term_Selector,Business Term Selector,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Entities and Tables
The Business Term Selector dialog box, as shown in the following image, launches when the user clicks
Add Term
in the Glossary tab in some Object editors, such as the Entity Editor and Attributes Editor. This feature allows users to relate and unrelate terms from an Object.
Glossary Filter
. Allows you to limit search results to terms that are either children of or are related to the selected Glossary.
Search
. Allows you to limit search results to terms that contain the search string in the term name. Note, this is pre-populated with the name of the ER object in context and can be changed by the user.
Also Search in Description
. Toggles whether you want to include terms that contain the search string in their description.
Relate
and
Unrelate
. Marks a term as related to or unrelated from an Object, and moves the selected term to or from the
Related Terms
area for the Object.
Apply
. Sends a request to Team Server to update the related terms. Note, at this point the relationship is committed to Team Server.
Cancel
. Discards any changes made without saving.
Create New
. If you can't find an appropriate business term you can create a new one. This opens a dialog that allows you to specify the name, parent glossary, and description of a new term.
See Also
Creating and Editing Entities
Creating and Editing Tables
Creating and Editing Attributes
Creating and Editing Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Business_Term_Selector&oldid=6328
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Cancelling_a_Repository_Operation,Cancelling a Repository Operation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
You can cancel a Repository operation, such as
Add Diagram
,
Check Out
or
Check In
Objects or Diagrams, at any time up to the point at which the client receives confirmation that the operation has completed.
Click the
Cancel
button on the
Status Bar
or click the
Cancel
button on the
Repository Operation Status
dialog box.
See Also
Working with Repository Projects
Best Practices
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Cancelling_a_Repository_Operation&oldid=5025
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Change_Data_Model_Display_Preferences,Change Data Model Display Preferences,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
The Display tab of the Options Editor lets you specify the default Model display settings for any new models you create.
Choose
Tools > Options > Display
.
In the
Model Display
area, select the options desired.
Notes
You can change the display settings of the current model or submodel by choosing View > Diagram and Object Display Options and then making your changes within the editor that appears.
Selecting Rolename Notation displays the full IDEF1X rolename notation.
See Also
Overriding Color and Font Settings for a Specific Object
Setting Diagram Properties
Setting Data Model Properties
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Change_Data_Model_Display_Preferences&oldid=5026
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Change_Records,Change Records,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Increasing your ability to collaborate in an Agile environment, Change Records, Tasks and Change Management Center give you the ability to track and manage the changes made by Repository check-ins. Every check-in is stored in the repository as a change record. Users can associate tasks from third-party tools, such as Atlassian JIRA, to specific projects available within the Repository Project Center. Similar support also exists in Team Server, where you can add, change, and delete the same tasks.
Contents
1
To Open Change Management Center
2
To Create a Task and Associate it to a Project
3
To Add a Change Record to a Repository Model
3.1
Check out a diagram from the repository
3.2
Check in the changes to the Repository
4
Reviewing the Changes in Change Management Center
5
See Also
To Open Change Management Center
Log in to the repository.
On the main
Application Menu
, click
Repository > Change Management Center
.
ID
: The ID given to the change record.
Name
: The change record name that you have chosen. It is possible to leave this field blank if you do not type a name upon check-out or check-in.
Status
:
Completed
: All changes have been checked-in.
In Progress
: Currently checked out.
User Name
: The user who has checked out/in the changes.
Description
: The text added in the description field.
To Create a Task and Associate it to a Project
Creating a task using Change Management Center
In the Change Management Center main window, click
Create
, and then create the new task.
In the
Project
field, select the project to which you want to associate the task, and then click
OK
. When you return to the Change Management Center main window, verify that the task includes the selected project.
To Add a Change Record to a Repository Model
Check out a diagram from the repository
Log in to the repository.
On the main
Application Menu
, click
Repository > Change Management Center
.
Check Out
a Model.
You can leave the fields blank, or add a name and description.
If you would like to link your changes to a task choose a task from the list by highlighting it, or create a new task by clicking
.
Click
OK
.
Your diagram is now checked out and the padlock icons change from locked to open.
. You can now make your modifications to the model.
For this example we have added a new entity to the model.
Check in the changes to the Repository
Click
Repository > Diagrams > Check In Diagrams
.
Adding a name to the change record will identify what you have done. You may also add a description.
The task that i created at checkout, is automatically selected, you can also assign a new task by clicking the
button.
You can also choose to review the changes or keep the diagram checked out.
Click
OK
Reviewing the Changes in Change Management Center
To review the changes made to your diagrams at any time in the future:
Open
Repository > Change Management Center
.
In the
Tasks
tab: You can view the tasks have been worked on.
From here you can check the status of the tasks and sub-tasks.
In the
Change Records
tab: You can view the details of each change record.
Double-click a change record to open, or select the change record and click
Details
button to open the dialog.
In
Properties
you can see the owner information and task details.
In
Modified Objects
view, you can expand the items to show the changes.
See Also
Creating and Editing Entities
Working with Repository Projects
Working with Objects in the Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Change_Records&oldid=4906
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Change_the_Background_and_Outline_Colors_of_Existing_Models_and_Views,Change the Background and Outline Colors of Existing Models and Views,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
In the
Data Model Explorer
, click a data model or a view of a data model.
Choose
Format > Colors & Fonts > Colors
.
To set the background color of a model
, from the list select
Model Background
and then click
Set Color
.
To set the background color of all views in the model
, from the list, select
View Background
and then click
Set Color
.
To set the foreground color of all views in the model (the dotted line around the view box)
, from the list select
View Foreground
and then click
Set Color
.
To choose one of the Basic colors
or one of the existing
Custom Colors
, select a color box and then click
OK
.
To choose a color not already displayed in this dialog, click
Define Custom Colors
, define the new color, and click
Add to Custom Colors
. (This adds a new color option to the available
Custom Colors
.) Then you can select the new color box and click
OK
.
To apply your changes and exit the
Colors & Fonts
editor, click
OK
again.
Notes
When exporting the model, you can also export the model background by selecting
Export model and object background color
in
Model > Options > Display
.
You can specify background and foreground colors for an individual view by right-clicking the view in the Data Model Window and then clicking
View Background/Outline Color
.
You can specify that all views in the data model share the same background and foreground (outline) colors by choosing
Tools > Options > View
and then in the
View
area, selecting
Same background color for all views
.
See Also
Overriding Color and Font Settings for a Specific Object
Customizing Standard Model Features for New Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Change_the_Background_and_Outline_Colors_of_Existing_Models_and_Views&oldid=5027
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Cursor_Popup_Help_Options,Changing Cursor Popup Help Options,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Configuring and Customizing
Sets the popup information displayed when you hover the cursor over a diagram object such as an entity, table, schema object, or relationship. Help set for entities and relationships will be applied to both the logical and the physical model.
Choose
View > Cursor Popup Help Options
, and then select an entity display option.
See Also
Customizing the Display of Diagrams and Objects
Defining Model Options for the Selected Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Cursor_Popup_Help_Options&oldid=5028
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Data_Dictionary_Object_Bindings_and_Values,Changing Data Dictionary Object Bindings and Values,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
The bindings of data dictionary objects can be overridden in the data model object editor. For example, you have created a security property and applied it to an entity. Unbinding the security property from an attribute of that entity or changing the value of the security property can be accomplished through the Security Information tab of the Attribute Editor.
In order to bind an data dictionary object to a database object, that specific object or class to which the object belongs must be bound to the data dictionary object in the data dictionary object editor.
In the Data Model Explorer, right-click the data model object, and then click
Edit
.
In the editor, click the relevant tab as described in the following table.
To change bindings of this type
Use this tab in the database object editor
Attachments
Attachment Bindings
Data Security Information
Security Information
Defaults
Default
Rules
Rule/Constraint or Constraints
Reference Values
Reference Values
Naming Standards Templates
Naming standards
User Datatypes
Datatype
Domains
Attributes
You can also bind Attachments to an entire diagram and change the diagram bindings on the Diagram Properties dialog. Choose
File > Diagram Properties
.
Make your changes, and then click
OK
to exit the editor.
You can override the value of an attachment by double-clicking the value of the attachment in the grid, which brings up the Value Override Editor.
When you create a report, you can choose to include details of bound attachments for the objects selected to described in the report. For more information, see
Generating RTF and HTML Model Reports
.
See Also
Generating RTF and HTML Model Reports
Working with the Enterprise Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Data_Dictionary_Object_Bindings_and_Values&oldid=7687
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Data_Model_Layout,Changing Data Model Layout,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
ER/Studio Data Architect offers two ways to change the layout of your data models:
Auto Layout that redraws your data model according to preset styles.
The Layout Properties Editor that allows you to further customize the preset styles by setting parameters such as spacing, packing, tiling, and labeling conventions.
The following will help you change the layout of a data model:
Redraw a Data Model Using Auto Layout
Notes
Redraw a Data Model Using Auto Layout
Open a data model.
From the
Alignment
toolbar, select an auto layout option. Or go to
Layout >
Select a layout
.
ER/Studio Data Architect redraws the data model in the Data Model Window according to the rules of the preset style chosen.
Notes
The following describes the auto layout preset styles shown above, in order from left to right:
Circular Layout
: The circular layout reveals the dependencies and relationships between the data model objects.Emphasizes group structure by rearranging the data model into one or more circular patterns. This layout groups related entities into clusters and each cluster is grouped into circles according to the logical interconnection of the clusters and in a manner that minimizes the number of lines that cross the middle of the data model.
Hierarchical Layout
: Organizes entities in a hierarchical pattern based on the direction of the relationship between the entities. Hierarchical diagrams can display circular relationships, where the relationship path starts and ends on the same entity.
Note: The Hierarchical Layout is the only type that represents data flows in a consistent direction.
Orthogonal Layout
: Useful for data models where inherent hierarchical structures are unimportant but the relationship orientation and ease of navigation is important. The orthogonal layout rearranges the data model into square-line, rectangular patterns that use only horizontal and vertical line routing. Orthogonal Layouts have few crossings and allow minimal stretching of entities that have a high number of incident relationships. Diagrams with this layout never overlap between entities or between entities and non-incident relationships.
Symmetric Layout
: This layout provides a symmetrical pattern centered around a single entity where peripheral entities move to the edge of the diagram. Symmetric Layouts naturally expose ring and star diagrams, producing clear data model diagrams that highlight the natural symmetry of many data models. Symmetric Layouts produce congruent data models of isomorphic graphs (graphs with the same structure), distribute entities uniformly, and create diagrams with few relationship crossings.
Tree Layout
: Use a tree layout for data models that contain a unique predecessor relationship. The tree layout rearranges your diagram into a tree pattern with parent and child entities, producing a data model that contains a root entity and only one unique path from the root entity to any other entity. Tree layouts can have branches and siblings where parent to child relationships are inherent.
Global Layout
: Rearranges your data model according to the style chosen for the target data model.
Incremental Layout
: Rearranges your data model according to the style chosen for the target data model without disturbing styles previously applied to pre-existing objects.
See Also
Customizing the Layout
Setting the Relationship Notation
Manipulating Relationship Lines
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Data_Model_Layout&oldid=5030
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Database_Roles_Associated_with_Existing_Database_Users,Changing Database Roles Associated with Existing Database Users,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
Once you have a database role defined, you can assign that role to any users created. Once defined, the permissions associated with a role can be edited on the Permissions tab of the Entity/Table Editor.
In the
Data Model Window
, expand the logical or physical
Main Model
, expand the
Users
node, right-click the user you want to edit, and then click
Edit Database User
.
To add a new role to the user, in the
Roles
area of the
General
tab, click
Add
and select the roles you want to apply.
To drop a role from the user, in the
Roles
area of the
General
tab, click
Drop
and select the roles you want to remove.
Click
Finish
.
Now, when you edit the database user, if you have selected Show inherited permissions on the Object Privileges tab of the User Editor, you will see blue check marks denoting the granted permissions afforded to the user by the applied roles. Permissions revoked by rules do not display with crosses.
Note:
Generally, permissions granted or revoked through the application of a role are overridden by permissions afforded the user in the User Editor, or on the Permissions tab of the Entity/Table Editor. Check your DBMS documentation for verification.
See Also
Creating and Editing Database Users
Creating and Editing Database Roles
Changing Database Users Associated with Existing Database Roles
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Database_Roles_Associated_with_Existing_Database_Users&oldid=5031
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Database_Users_Associated_with_Existing_Database_Roles,Changing Database Users Associated with Existing Database Roles,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
Once you have a database user defined, you can assign a role to that user. Once defined, the permissions granted to users directly or by applying roles can be edited on the Permissions tab of the Entity Editor.
In the
Data Model Explorer
, expand the logical or physical
Main Model
, expand the
Roles
node, right-click the role you want to change, and then click
Edit Database Roles
.
Click the
General
tab.
To associate the role with a user, in the
Users
area of the
General
tab, click
Add
and choose the users you want to associate with the role.
To disassociate a role from a user, in the
Users
area of the
General
tab, in the
Users
area click
Drop
and choose the users you want to disassociate from the role.
Click
Finish
.
Now, when you edit the database user, if you have selected Show inherited permissions on the Object Privileges tab of the User Editor, you will see blue check marks denoting the granted permissions afforded to the user by the applied roles. Permissions revoked by rules do not display with crosses.
Permissions granted by applying roles are overridden by permissions granted to the user in the User Editor, or on the Permissions tab of the Entity/Table Editor.
See Also
Creating and Editing Database Users
Creating and Editing Database Roles
Associating Database Roles with New Database Users
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Database_Users_Associated_with_Existing_Database_Roles&oldid=5032
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Entity/Table_Display_Preferences,Changing Entity/Table Display Preferences,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
The Display tab of the Options Editor lets you specify the default Entity display settings for any new models you create.
Choose
Tools > Options > Display
.
In the
Entity Display Settings
area, from the list select the
Display Mode
, and then select the
Display Options
desired.
Click
OK
to implement the changes.
You can change the display settings of the current model or submodel by choosing
View > Diagram and Object Display Options
and then making your changes within the editor that appears.
See Also
Overriding Color and Font Settings for a Specific Object
Changing the Model Background
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Entity/Table_Display_Preferences&oldid=5033
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_Model_Alignment,_Distribution,_and_Layout","Changing Model Alignment, Distribution, and Layout","From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
To align a group of objects in a straight line
, select the objects and then click one of the alignment buttons.
To distribute a group of objects
, select the objects and then click an alignment button.
To rearrange a data model or task diagram using a different layout type
, display the model, and then click one of the auto-layout buttons on the Diagram ribbon.
To apply a layout type to a selected items only
, you can select multiple objects (entities, views, and shapes) and apply a layout format to that selection only. All relationships, view relationships or lines that belong to the selected objects will be also affected by the layout. This allows you to choose a different layout style to draw attention to specific parts of the model, such as objects recently added or to show a special relationship that exists between certain entities. If you do not have any objects selected, the layout style chosen will apply to the entire model.
Note:
To change the layout defaults, choose
Layout > Layout Properties.
Changes affect the current project file only. For more information on changing Layout Properties, see
Changing Data Model Layout
.
See Also
Changing Data Model Layout
Resizing Objects
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_Model_Alignment,_Distribution,_and_Layout&oldid=7272
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_the_Database_Platform_of_a_Model,Changing the Database Platform of a Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Working With Data Models
ER/Studio Data Architect lets you change the database platform of your physical model. When initially designing your database, you selected a database platform. Your choice of database platform can have a profound effect on development and administration issues. For example, the supported datatypes can differ drastically between database platforms, although ER/Studio Data Architect does convert them. In addition, indexing strategy, along with data storage and query optimization can differ greatly between different databases for the exact same physical model.
If you decide later in the design process that you need to change your database platform, you can use the Change Database Platform command.
ER/Studio Data Architect supports all major database platforms. Also, it facilitates the translation between different database platforms with its datatype and DDL conversion facilities.
For a list of supported database platforms, see
Supported Database Platforms
.
Note:
If you change to a database platform that does not support the schema objects in the selected model, you will lose those objects. For example, packages are supported in Oracle but not in IBM DB2 for OS/390. In this case, changing the Oracle model results in package definitions being lost.
In the
Data Model Explorer
, click the physical model you want to change to a different database platform.
On the Tools ribbon, click Change Target Database, or right-click on the model in the Explorer Window and select Change Target Database.
Select the database platform and version and then click
OK
.
Notes
ER/Studio Data Architect supports all major database platforms. Also, it facilitates the translation between different database platforms with its datatype and DDL conversion facilities.
For a list of supported database platforms, see
Supported Database Platforms
.
If you change to a database platform that does not support the schema objects in the selected model, you will lose those objects. For example, packages are supported in Oracle but not in IBM DB2 for z/OS, so in this case changing the Oracle model to a DB2 model results in the package definitions being lost.
See Also
Reverse Engineering an Existing Database
Creating and Editing DataBases
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_the_Database_Platform_of_a_Model&oldid=7267
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_the_Diagram_File_Name,Changing the Diagram File Name,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Renames the file in the Repository that is associated with a selected diagram. The file name is defined by the system when you first add the diagram to the Repository and is initially the same as the Diagram Name.
Renaming the diagram using the Change Diagram Filename option, does not change the diagram name as displays in Diagram Title box. You can change the Diagram Properties and the content of the Diagram Title box by opening the diagram, choosing
File > Diagram
and then editing the name on the Information dialog.
Log in to the Repository.
Choose
Repository > Diagrams > Change Diagram Filename
.
In the tree, navigate to and then select the file whose name you want to change.
Click
Rename
.
In the
Change Filename
dialog, enter a new file name and document the file name change in the Comment box.
Change Filename
dialog as appropriate.
Click
OK
, verify the name change is as you expected, and then click
Close
.
Notes
As with any Version Control Software (VCS), all users should check in all changes and perform a clean get after renaming.
See Also
Saving Changed Items to the Repository (Checking In)
Repository Status Icons
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_the_Diagram_File_Name&oldid=5036
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_the_Location_of_Shared_Files,Changing the Location of Shared Files,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Administrator Guide
You must have local administrator privileges to change the location where
ER/Studio Data Architect
stores and searches for shared application data.
Choose
Tools > Options
, and then click the
Directories
tab.
In the
File Path
dialog, browse to an existing directory you want to store your shared files.
Note:
ER/Studio Data Architect will create a directory that does not exist but not a directory path. If your path has multiple levels it will need to be previously created.
In the
Options
dialog, click
OK
. When closing the dialog ER/Studio Data Architect creates and/or searches in the changed directory.
If you are changing the location of any of the following directories, you will also need to copy the contents of the directory to the new location:
DataTypeMapping, Macros
or
Sample Models
.
To effect the changes, please restart
ER/Studio Data Architect
.
See Also
Changing the Diagram File Name
Specifying the Location of Shared Data
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_the_Location_of_Shared_Files&oldid=5037
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_the_Model_Background,Changing the Model Background,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
To make your model more visually appealing, you can change the background color displayed to complement the colors you choose for other object models in the Data Model Window.
Choose
Tools > Options
.
To change the background of new logical models
, select the
Logical
tab.
To change the background of new physical models
, select the
Physical
tab.
In the
Main Model Display
area, click
Colors & Fonts >
Background Color
.
To choose one of the Basic colors
or one of the existing
Custom Colors
, select a color box and then click
OK
.
To choose a color not already displayed in this dialog, click
Define Custom Colors
, define the new color, click
Add to Custom Colors
. (This adds a new color option to the available
Custom Colors
.) Now you can select the new color box and then click
OK
.
Click
OK
again to exit the
Options
editor.
You can export the model background by selecting Export model and object background color in
Model > Options > Display
.
See Also
Change Data Model Display Preferences
Overriding Color and Font Settings for a Specific Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_the_Model_Background&oldid=5038
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Changing_the_Model_Notation,Changing the Model Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Click the target model and then Choose
Model > Model Notation
.
From the list, select
Relational
or
Dimensional
.
The model is redrawn to conform with the model notation selected.
Notes
When generating a physical model, by reverse-engineering or importing an external data source to create the model, you can choose the model notation.
You can change the notation of a physical model in the Physical Model Options dialog. Access this dialog by right-clicking the target physical model, and then from the shortcut menu selecting Model Options.
You can change the table type of an object in the dimensional model using the Dimensional tab of the Entity Editor or Table Editor. Access this editor by double-clicking an entity or table.
See Also
Reverse Engineering an Existing Database
Importing a Model
Generating a Physical Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Changing_the_Model_Notation&oldid=5039
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Checking_Out_Objects_When_Not_Logged_In,Checking Out Objects When Not Logged In,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
If you are not logged in to the Repository and try to modify a Repository item that is not checked out, you can check out the item locally and then run the delayed check out command later when you can connect to the Repository. This allows you to modify your local copy of a diagram from the Repository without connecting to the Repository, which is useful when you do not have a network connection, want to move objects in the diagram without checking them out, or get quicker access to large models.
When you are connected to the Repository and want to check out the diagram from the Repository, choose
Repository > Diagrams > Run Delayed Checkout
.
See Also
Forcing a Checkin
Determining Who has an Object Checked Out
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Checking_Out_Objects_When_Not_Logged_In&oldid=5040
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Checking_Out_Repository_Items,Checking Out Repository Items,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Checking out write enables items previously added to the Repository, such a diagram, model, submodel, data model object, Data Dictionary, Data Dictionary object, and data source/target. The procedure to check out an item from the Repository is basically the same for all object types.
Note:
Checking out an item that is already checked out synchronizes the local version of the item with the Repository version.
Open a Repository diagram; a diagram that was previously added to the Repository.
Click the item you want to check out or
CTRL-click
several items to check out more than one.
Right-click and select
Check Out
.
Depending on what you have selected; the check out option on the short menu may be Check Out Diagram, Check Out Model, Check Out Submodel, Check Out Object(s), Check Out Data Dictionary, Check Out Data Dictionary Object(s), Check Out Source/Target or Check Out Data Flow.
Note:
Checking out the Data Dictionary also checks out any Data Movement Rules defined on the Data Lineage tab.
Complete the
Repository Check Out
dialog as required and then click
OK
to initiate the check out process.
The following describe options that require additional explanation:
Synchronize with latest Repository diagram data
: Lets you synchronize your diagram data with the Repository's diagram data. For example, if an item is in a different location or has a different background color in the Repository version than in your version, you can update your diagram with the information from the Repository. In general, the check out operation finishes more quickly if you do not select this option; select this option only if you want to retrieve the very latest version of the Objects from the Repository.
Check out Exclusively
: If selected, lets you check out an item with exclusive rights. This restricts any other user from checking out the item while you have the item checked out. You are the only who modify the item and submit the data to the Repository.
When you check out an item exclusively, other users have read-only and/or 'Delayed Check Out' access while the objects are checked out. If submodel A and submodel B share an object and user A exclusively checks out submodel A, then user B would not be able to exclusively checkout submodel B.
Notes
If you check out a parent item that has a lot of relationships, the relationship-dependent items will also be checked out.
You cannot check out an item exclusively if another user has it checked out. You can find out who has an item checked out, by right-clicking the item, selecting Version History, and then clicking the CheckOut Status tab.
If you do not select check out exclusively, but attempt to add an object to a model, you will be prompted to check out the model exclusively.
Working locally, if you check an object out of the Repository, ER/Studio Data Architect saves a writable copy to your local machine. If you then disconnect from the Repository you can still make changes before checking back in your work. When you reconnect to the Repository, you will still have the objects checked out. For your changes to commit, you need to log in to the Repository and check in your changes.
Instead of checking out an entire diagram, you can get single object or multiple objects.
When you check out an object, object structural and Referential Integrity (RI) dependencies are also checked out. This means that you will get the latest versions of all dependencies as well.
The Repository Check Out operation is the same for diagrams and objects. The menu varies depending on what you select in the Data Model Explorer.
Multiple users can have the same object checked out simultaneously.
If your modeling team has fairly segregated tasks, then an exclusive check out is recommended. For example, you may have several submodels of a model that are being worked on by different modelers. If you check out the entire submodel exclusively, other users will be prevented from using elements of that submodel that are present in other submodels. For example, if submodel A and B share the object ""PARTY"", submodel B cannot be checked out exclusively if submodel A was checked out exclusively.
You can check out an entire diagram from the Repository. When you do so, the diagram data dictionary is also checked out.
Checking out at the diagram level is faster than checking out individual objects because ER/Studio does not have to process the selected objects to ensure that related objects are also selected for checkout. This would be most obvious during an unsynchronized checkout. It is also true for synchronized checkouts as well as checkins, but because those operations perform a get latest option as part of the process, the effect is less obvious.
You can check out an individual data dictionary object. If the data dictionary object is not bound to any attributes, you can check out or check in the data dictionary object without affecting the diagram. If the data dictionary object is bound to an attribute, and changes to the data dictionary object affect the attribute, then the attribute is marked for a delayed check out.
See Also
Saving Changed Items to the Repository (Checking In)
Changing the Diagram File Name
Change Records
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Checking_Out_Repository_Items&oldid=5041
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Checking_Out_a_Concurrent_License_for_Offline_Usage,Checking Out a Concurrent License for Offline Usage,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
In an environment where the IDERA License Center (ELC) is used to manage concurrent ER/Studio Data Architect licenses you will need to check out the license in order to use it while disconnected from your network. Depending on the settings specified by your ELC Administrator, you can check out a license up to a maximum of 30 days (720 hours).
Select
Help > Checkout License
.
In the
Checkout License from Server
dialog that appears, enter the number of hours for which you want to use the license offline, and then click
OK
..
Now, when you are disconnected from the ELC server, your copy of ER/Studio Data Architect will be licensed.
When you next connect to the network, you can return your license to the license pool by selecting
Help > Checkin License
.
Your license will then be available for other users to use when you quit ER/Studio Data Architect.
See Also
Licensing
Administrator Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Checking_Out_a_Concurrent_License_for_Offline_Usage&oldid=5042
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Checking_in_the_Data_Dictionary,Checking in the Data Dictionary,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
This operation lets you check in a Data Dictionary when you are done working with it. The Repository will attempt to merge all of your modifications into the Repository. If there are any conflicts during the merge process, you are prompted to resolve them. After you have resolved all conflicts and the merge is complete, the merged results are added to the Repository and your diagram. The merged results are added to your Data Dictionary so that it remains in sync with what is in the Repository.
When you check in a data dictionary, it is possible that the Repository server will create new versions of objects that were bound to individual data dictionary objects. For example, if a user checks in a data dictionary after deleting a user datatype, and the user datatype was bound to an attribute, the server will create a new version of the attribute that does not contain the binding. This is because deleting a data dictionary object causes all bindings to it to be removed. The new version is reflected in the
Version History
for the attribute, with an automatically generated comment. When you do a
Get Latest Version
on the affected attribute, the new version without the binding is placed in your copy of the diagram. If you modify or delete the affected attribute before checking in the Data Dictionary, then a merge conflict will appear between your version of the attribute and the version of the attribute created by the Repository server. Select the ER/Studio Data Architect version of the attribute to keep your changes.
This behavior can also occur when you check in a data dictionary with a modified data dictionary object. For example, say you change the data type of an attachment, then check in the data dictionary to which it belongs. Any objects bound to that attachment must have the value override removed because the value override is only valid for a particular attachment data type. This means that the objects (which can be in the data dictionary or the diagram) that are bound to that attachment get a new version in the Repository that reflects the removal of the object's value override.
On the
Data Model Explorer
, click the
Data Dictionary
tab and then click the target data dictionary object.
Note:
If you made changes to the Data Dictionary, you need to check in the Data Dictionary before checking in the diagram. For example, if you create a domain in the Data Dictionary and use that domain in the diagram, if you check in the diagram before the Data Dictionary, ER/Studio Data Architect produces errors.
Notes
:
The Repository does not support the check in of individual data dictionary objects. You can only check in the entire Data Dictionary.
If your version of the diagram is in conflict with the Repository's version of the diagram, the
Merge Conflict Resolution
dialog box opens. For more information about merge conflicts and their resolution, see
Branching and Merging Diagrams
.
If you made changes to the Data Dictionary, you need to check in the Data Dictionary before checking in the diagram. For example, if you create a domain in the Data Dictionary and use that domain in the diagram, if you check in the diagram before the Data Dictionary, ER/Studio Data Architect produces errors.
See Also
Determining Where an Enterprise Data Dictionary is Used
Checking out the Data Dictionary
Redoing a Data Dictionary Redo Check Out
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Checking_in_the_Data_Dictionary&oldid=5043
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Checking_out_the_Data_Dictionary,Checking out the Data Dictionary,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
The Check Out operation lets you copy the latest version of a Data Dictionary or a Data Dictionary object so you can modify them.
On the
Data Model Explorer
, select the
Data Dictionary
tab and then click the target data dictionary object.
Choose
Repository > Data Dictionary > Check Out Data Dictionary Object
.
Notes
You can check out an entire data dictionary from the repository.
You can check out an individual data dictionary object. If the data dictionary object is not bound to any attributes, you can check out or check in the data dictionary object without affecting the diagram. If the data dictionary object is bound to an attribute, and changes to the data dictionary object affect the attribute, then the attribute is marked for a delayed check out.
The repository check out operation is the same for data dictionaries and data dictionary objects. The menu depends on what you select in the Data Model Explorer.
You can check out a data dictionary or data dictionary objects with 'exclusive' rights. This restricts any other user from checking out the data dictionary or data dictionary objects while you have either or both checked out, and means that you are the only who modify them and submit data to the Repository. When you check out something exclusively, other users have read-only and/or 'Delayed Check Out' access while the objects are checked out.
If the data dictionary's objects are not bound to any attributes, you can check out the data dictionary without affecting the diagram.
If the data dictionary object is bound to an attribute, and changes to the data dictionary object affect the attribute, then the attribute is marked for a delayed check out.
See Also
Checking in the Data Dictionary
Undoing a Data Dictionary Check Out
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Checking_out_the_Data_Dictionary&oldid=5044
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Collection_Editor,Collection Editor,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
The collection editor is used to create and edit collections within a
physical model
for MongoDB models.
Within a
MongoDB
database, a collection holds a set of documents. Documents are sets of key-value pairs. 
You can think of a collection as being similar to a table in a 'normal' database, however because documents have a dynamic schema, this means that documents in the same collection do not need to have the same set of fields or structure.
Note:
To work with collections, your physical
database platform
must be MongoDB.
To create a new collection
On the Data Model Explorer, click the Data Model tab.
On the model tree, select the Physical model.
From the ribbon menu, choose
Insert > Collection
.
The cursor changes to a square icon.
With your mouse cursor, left-click anywhere in the main model window to insert your new collection.
Once you have finished adding collections, right-click to return the cursor to normal.
To open the Collection Editor
Select your collection from the
main window
or the
model explorer
.
Right-click, and then choose
Edit Collection
.
The collection editor opens for you to edit your selected collection.
See Also
Containment Relationships
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Collection_Editor&oldid=6863
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Common_Tasks,Common Tasks,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
This section describes the following tasks:
Using Toolbar Tools
Creating a Data Model Object
Moving Objects
Copying Objects
Resizing Objects
Changing Model Alignment, Distribution, and Layout
Finding an Entity, Table or View
Locating an Object in the Data Model Window
Editing an Object
Adding and Editing Object Comments
Editing the Name of an Object
Deleting an Object
Renaming an Object
Searching for and Changing Object or Object Attribute Names
Creating and Editing Database Views
Creating and Editing Submodels
Establishing Database Security
Comparing Models
Customizing the Data Model
Checking Out a Concurrent License for Offline Usage
See Also
Best Practices
Creating and Working With Data Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Common_Tasks&oldid=5046
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Comparing_Models,Comparing Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
For information on comparing data models, see
Using the Compare and Merge Utility
.
See Also
Copying Objects Between Models and Submodels
Connecting to Database Sources and Targets
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Comparing_Models&oldid=5047
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Configuring_ODBC_Data_Source_and_Target_Connections,Configuring ODBC Data Source and Target Connections,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Connecting to Database Sources and Targets
ER/Studio Data Architect can use ODBC drivers to connect to database servers to reverse engineer a database or to create SQL from database objects. Before using the Reverse-Engineering Wizard or DDL Generate Wizard to connect to a database using the ODBC option, you must first install the appropriate ODBC driver for the target database platform and configure the ODBC data source. Using the ODBC Data Source Administrator you can configure data connections and then access them from the Reverse Engineer, Compare and Merge, and DDL Generation wizards.
Note:
Most database vendors publish ODBC drivers for their respective platforms. In addition, several third-party developers also market ODBC drivers for many database platforms.
ER/Studio Data Architect
is not compatible with 16-bit ODBC drivers.
Choose
Tools > ODBC Setup.
Follow the on screen prompts to configure the data source.
Notes
Configure the ODBC driver by following the instructions provided by the ODBC vendor.
Data sources that are configured on the User DSN tab of the ODBC Data Source Administrator are available for the logged in user only, while data sources configured on the System DSN tab are available for all users of that system.
You can also access the ODBC Data Source Administrator through Windows by choosing
Start > Settings > Control areal > Administrative Tools > Data Sources (ODBC)
.
You can share your ODBC data source configuration with other users by distributing the
..\Windows\ODBC.ini
file that contains the data source definitions.
ODBC drivers are used for all databases not listed
Using Native or Direct Database Connections
, such as GreenPlum and PostgreSQL.
See Also
Using Native or Direct Database Connections
Troubleshooting
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Configuring_ODBC_Data_Source_and_Target_Connections&oldid=5048
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Configuring_and_Customizing,Configuring and Customizing,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
There are many options available to customize how ER/Studio Data Architect behaves and what it displays in the Data Model Window. Some options, such as the
Diagram and Object Display Options
, and
Model Options
are saved in the.dm1 file and affect how the model in that file displays or behaves immediately, while the Tools Options and
Cursor Popup Help Options
affect how the application and any new models created will display or behave.
Customizing the Display of Diagrams and Objects
Defining Model Options for the Selected Model
Customizing Standard Model Features for New Models
Specifying the Location of Shared Data
Changing Cursor Popup Help Options
Customizing Application Visual Style
Web Favorites
See Also
Overview
Application Interface
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Configuring_and_Customizing&oldid=5049
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Connecting_to_Database_Sources_and_Targets,Connecting to Database Sources and Targets,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
In ER/Studio Data Architect, you can use the Reverse Engineer Wizard to connect to a database and then create a new data model based on an existing database. You can also connect to a database using the DDL Generation Wizard and automatically generate the SQL source code to build the database. In ER/Studio Data Architect you also connect to databases using the Model Compare and Merge facility.
ER/Studio Data Architect recognizes the following database connectivity methods:
Open Database Connectivity (ODBC), using ODBC drivers. (See
Configuring ODBC Data Source and Target Connections
.)
Native connectivity, using database client software. (See
Using Native or Direct Database Connections
.)
For a list of supported databases, see the
Installation Guide
or choose
Tools > Datatype Mapping Editor
to view the default datatype mapping for each supported database.
Note:
Please remember that that ER/Studio Data Architect 32-bit requires 32-bit native client or ODBC drivers and ER/Studio Data Architect requires 64-bit native client or ODBC drivers.
See Also
Reverse Engineering an Existing Database
Generating a Script File or Database
Using the Compare and Merge Utility
Troubleshooting Database Connections for 32 bits Version
Troubleshooting Database Connections for 64 bits Version
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Connecting_to_Database_Sources_and_Targets&oldid=5050
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Connecting_to_the_Repository,Connecting to the Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Repository Administration
Start  ER/Studio Data Architect  or  ER/Studio Viewer.
From the
Main
menu, choose
Repository > Repository Options
.
In the
Server Machine
field, type the host name or IP address of the Repository server machine, and then click
OK
.
Log on to the Repository as follows:
Choose
Repository > Log In
, enter your user name and password, and then click
OK
.
You are now ready to use ER/Studio Data Architect with ER/Studio Repository. For details on using ER/Studio Repository, see the
ER/Studio Data Architect User Guide
.
Note:
During the Repository Installation, a default user name and password of 'Admin' is set as the default (without the quotes). The Administrator should change the Admin password after the initial log in.
License Enforcement
When working with the Repository, all users must use the same license type. ER/Studio now enforces this by marking the Repository as an Enterprise Team Edition Repository when a user with an Enterprise Team Edition license logs in.
When you first log in as an Enterprise Team Edition user you will get this message.
Subsequent log in attempts by users with a non-Team Edition license will not be allowed.
See Also
How to Specify Repository Ports
Installing ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Connecting_to_the_Repository&oldid=6112
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Containment_Relationships,Containment Relationships,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Relationships
A containment relationship is used for nested objects within a supported database. For instance, if you have reverse engineered nested objects within MongoDB, these will be added with a containment relationship to the object they are nested within.
To create a new containment relationship
On the Data Model Explorer, click the Data Model tab.
Choose
Insert > Relationships > Containment Relationship
, this changes the cursor icon and allow you to select the objects in the main window with which to create the relationship.
Click on the object containing the other object.
Click on the object contained within the previously clicked object.
Double clicking on the relationship line will open the Containment Relationship Editor where you can edit settings.
The
1
indicates a single nested object;
*
indicates an array.
Changing a relationship type for containment relationships in Google BigQuery and MongoDB
Google BigQuery and MongoDB users can easily change a relationship type for containment relationships. While viewing a containment relationship that you want to change the relationship type, click
Switch Relationship Class
in the ribbon bar. The following actions occur:
If the line is referencing:
ERDA removes the Foreign Key field/column in the child object/table.
A dialog appears asking you to select the desired containing object, and offers
Parent
,
Child
, and
Cancel
options. Note that
Child
is the default.
ERDA changes the relationship type to containing in the direction selected in the dialog.
A new foreign key property is created in the Parent object.
If the line is containing:
ERDA removes the Foreign Key field/column in the parent object/table.
A dialog appears asking you to select the desired referencing object, and offers
Parent
,
Child
, and
Cancel
options. Note that
Parent
is the default.
ERDA changes the relationship type to Referencing in the direction selected in the dialog.
A new foreign key property is created in the Child object, propagating the primary key of the parent.
The following image shows this feature using Google BigQuery:
The following image shows this feature using MongoDB:
See Also
Databricks Support
MongoDB Support
Collection Editor
Creating and Editing Relationships
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Containment_Relationships&oldid=7880
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Copying_Objects,Copying Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
You can create copies of objects such as entities, tables, users, roles, shapes, functions, procedures, and schemas within the data model or between different data models.To copy and paste between different data models, you must have both models open in ER/Studio Data Architect. To resolve any referential integrity issues that arise from copying and pasting diagram objects, ER/Studio Data Architect applies several basic rules when copying:
Relationships
: ER/Studio Data Architect only copies relationships that are within the set of model objects chosen. In other words, any relationships connected to entities outside of the selected set will not be duplicated. One important effect of this rule is that copied entities lose inherited foreign keys if you do not also include their parent entities.
Entity Types
: Because ER/Studio Data Architect can drop relationships due to the rule above, ER/Studio Data Architect determines whether entities are independent or dependent based on their status within the selected set.
Unique Names
: To preserve unique names, ER/Studio Data Architect compares the names of objects being pasted with the names of objects already located in the target mode. If there are duplicates, ER/Studio Data Architect serializes object names as ""ObjectNameN,"" where N is a sequential number attached to the base name.
This section describes the following ways to copy objects:
Copying an Object in the Data Model Window
Copying Multiple Objects
Copying an Attribute
Copying an Object from the Data Model Explorer to the Data Model Window
Copying Objects Between Models and Submodels
Copying an Object in the Data Model Window
On the
Main
toolbar, click the selection tool.
In either the
Data Model Explorer
or the
Data Model Window
, click the object to copy and then press CTRL+C.
A copy of the object is created with the same attributes as the original. The name of the new object will be the name of the original object appended by 1, such as Entity1. If you create another copy of the object, the new object would be named Entity2. The copied object can be pasted into another model or submodel in the same file or in another open diagram.
Copying Multiple Objects
On the
Main
toolbar, click the selection tool.
To select objects that are close in proximity to each other
, in the
Data Model Window
, click and drag the mouse to draw a lasso around the objects and then release the mouse button. In this way, you can also select the relationships associated with the selected objects.
To select objects that are not close to each other
, in either the
Data Model Explorer
or the
Data Model Window,
press and hold CTRL while clicking each object.
To select all entities or tables in a model or submodel
, in the
Data Model Explorer
, click the model or submodel, expand the object, and then press CTRL+A.
A copy of the object is created with the same attributes as the original. The name of the new object will be the name of the original object appended by 1, such as Entity1. If you create another copy of the object, the new object would be named Entity2.
Copying an Attribute
On the
Main
toolbar, click the attribute selection tool.
In the
Data Model Window
, select the attribute to copy, press CTRL+C, click the target entity, and then press CTRL+V.
You can select multiple objects by right-clicking in the Data Model Window and then dragging the mouse to draw a lasso around the diagram objects and then releasing the mouse button. You can also select multiple objects by pressing and holding CTRL while selecting each object individually.
A copy of the object is created with the same attributes as the original. The name of the new object will be the name of the original object appended by 1, such as Entity1. If you create another copy of the object, the new object would be named Entity2.
Copying an Object from the Data Model Explorer to the Data Model Window
On the
Main
toolbar, click the selection tool.
In the
Data Model Explorer
, click the object you want to copy and drag it to the
Data Model Window
.
You can select multiple objects by pressing and holding CTRL while selecting each object individually.
A copy of the object is created with the same attributes as the original. The name of the new object will be the name of the original object appended by 1, such as Entity1. If you create another copy of the object, the new object would be named Entity2.
Note:
You can select multiple objects by pressing and holding CTRL while selecting each object individually.
Copying Objects Between Models and Submodels
The following table describes the possible copy operations within the Data Model Explorer.
Data Model Objects
Copy Data Model Object From... to...
Logical to Physical
Physical to Logical
Main logical or submodel to logical submodel
Main physical or submodel to physical Submodel
Attributes
no
n/a
yes
n/a
Columns
n/a
no
n/a
yes
Entities
yes
yes
yes
n/a
Functions
n/a
no
n/a
yes
Procedures
n/a
no
n/a
yes
Roles
yes
no
yes
no
Schemas
n/a
no
n/a
yes
Tables
n/a
yes
yes
Users
no
no
yes
yes
Views
yes
yes
no
no
You can copy objects such as attributes, columns, entities, views, users, roles, and shapes from a logical model to a physical model and between models and submodels. You can copy functions, procedures, and schemas from one physical model to another and from one physical submodel to another physical submodel.
On the
Main
toolbar, click the
Select
tool.
In the
Data Model Explorer
, click the object to copy and drag it to the target node.
You can select multiple objects of the same type by pressing and holding CTRL while selecting each object individually.
The cursor changes to this symbol when the mouse is positioned over a valid target for pasting an attribute or column to another entity or table respectively.
The cursor changes to this symbol when the mouse is positioned over an invalid target for pasting an object.
.The cursor changes to this symbol when the mouse is positioned over a valid target for pasting an entity, table, or view to a submodel within the same model or to a different model in the Data Model Explorer.
See Also
Moving Objects
Resizing Objects
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Copying_Objects&oldid=5053
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Copying_a_Database_Object_to_a_Submodel_(Apply_to_Submodel),Copying a Database Object to a Submodel (Apply to Submodel),"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
You can replicate database objects by copying the object and then pasting it to each submodel individually or you can use the Apply to Submodel function to paste an object into multiple submodels within the same model simultaneously.
In either the
Data Model Explorer
or the
Data Model Window
, right-click the object you want to copy to one or more submodels in the active model and then click
Apply to Submodel
.
In the
Apply to Submodel
dialog, individually select the submodels you want to copy the object to, or select the model to copy the object to the main model and all submodels of the active model.
In the Apply to Submodel dialog, clicking Place New Object Near Existing Objects prevents the new object from being placed randomly in the Data Model Window. This can be important when working with large models and submodels.
See Also
Using the Submodel Synchronization Utility
Creating and Editing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Copying_a_Database_Object_to_a_Submodel_(Apply_to_Submodel)&oldid=5054
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Copying_and_Pasting_Data_Dictionary_Objects,Copying and Pasting Data Dictionary Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
You can select any standard Data Dictionary object and copy and paste it either within the current diagram on in another diagram. When you copy or paste a Data Dictionary object, ER/Studio Data Architect copies and pastes all of its dependent objects too. You can also select multiple standard Data Dictionary objects, such as Defaults and Rules, or multiple Procedural Logic Data Dictionary objects, such as Reusable Triggers or Reusable Procedures.
In the
Data Model Explorer
, click the
Data Dictionary
tab.
In the
Data Dictionary
tab, right-click one or more target objects and then select
Copy Dictionary Objects
.
Locate the target Data Dictionary (either the current diagram or to another diagram), right-click any node and then select
Paste Data Dictionary Objects
.
Notes
You can also copy and paste objects from a local dictionary to an Enterprise Data Dictionary.
When pasting domains, you can use the Switch Domain Bindings macro to map local properties to enterprise properties. You can find the macro in the sample macros on the Macro tab of the Data Model Explorer (Modeling Productivity Macros) This macro scans all the columns and attributes in the active model or all models and switches the domain bindings from the source domain to the target domain. The information for each bound column will be updated with the target domain. Any domain overrides will be preserved.
When making multiple selections, Procedural Logic Data Dictionary objects, they must be the same type (i.e. reusable triggers or reusable procedures, but not both), all other objects can be different types.
To enable to the Copy Data Dictionary menu item, you must click within a Data Dictionary object node.
The Paste Data Dictionary menu item is available both at the root Data Dictionary object node as well as with in the node.
See Also
Importing a Data Dictionary
Changing Data Dictionary Object Bindings and Values
Checking in the Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Copying_and_Pasting_Data_Dictionary_Objects&oldid=5055
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Create_Reusable_Procedure,Create Reusable Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
Reusable procedures are maintained in the database and can save you time because they do not have to be recreated for every database application in which you want to use the procedure.
Reusable user-defined procedures are created in the Data Dictionary. For more information, see
Reusing Procedural Logic
See Also
Create a Scripted Procedure
Creating and Editing Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Create_Reusable_Procedure&oldid=5056
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Create_a_Scripted_Procedure,Create a Scripted Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Contents
1
SQL page/tab
2
Description page/tab
3
Permissions page/tab
4
Attachment Bindings tab
5
See Also
Go Up to
Creating and Editing SQL Procedures
In the
Data Model Explorer
, expand the physical
Main Model
, right-click the
Procedures
node, and then click
New Procedure
.
Complete the
Procedure SQL Editor
and then click
Validate
to ensure the SQL is valid.
Click
OK
to create the procedure and exit the editor.
Once you have created the auxiliary table, you can edit it by right-clicking the auxiliary table you want to change, and then selecting Procedure.
In order for code to be generated for procedural logic such as triggers and procedures, the results of the logic must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
SQL page/tab
Enter the SQL for the procedure.
Description page/tab
Enter or edit a definition for the procedure. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
Permissions page/tab
Sets access roles and user permissions for the procedure. Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them. The roles and users must be previously assigned to appear in the Procedure Editor. For more information, see
Granting and Revoking Permissions to Modify Database Objects
,
Creating and Editing Database Roles
, and
Creating and Editing Database Users
.
Against InterBase platforms, no
Permissions
page/tab is available.
Attachment Bindings tab
Bind an external piece of information, or attachment to the procedure. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Apply a Scripted Procedure to a Submodel or Model
Creating and Editing Database Dependent Objects
Developing the Physical Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Create_a_Scripted_Procedure&oldid=5057
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Create_a_Scripted_User-Defined_Procedure,Create a Scripted User-Defined Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
Note:
The SQL in the procedure will be validated in context of the table selected.
In the
Data Model Window
or
Data Model Explorer
, double-click a table to launch the
Table Editor
.
Click the
PreSQL & PostSQL
tab.
Enter or edit an SQL procedure to run before the
CREATE TABLE
statement.
Click the
PostSQL
tab and then enter or edit an SQL procedures to run before the
CREATE TABLE
statement.
Click
OK
to implement the changes and exit the editor.
In order for code to be generated for procedural logic such as triggers and procedures, the results of the logic must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
See Also
Creating and Editing Procedures
Create a Scripted Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Create_a_Scripted_User-Defined_Procedure&oldid=5058
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Create_a_Templated_User-Defined_Procedure,Create a Templated User-Defined Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
The Templated Procedure Editor lets you create or edit a reusable procedure. Templated procedures are specific to the specific table on which they are created or modified. Reusable procedures created in the data dictionary can become templated if they are modified through the Table Editor. You can write templated procedures in BASIC.
Notes
In order for code to be generated for procedural logic such as triggers and procedures, the results of the logic must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
The Templated Procedure Editor includes find and replace functionality for working with SQL text strings.
Templated procedures are different from scripted procedures in that they are reusable.
You can only access the Templated Procedure Editor from the Dependencies tab of the Table Editor.
Procedures are considered to be data model schema, along with packages, functions, materialized views, auxiliary tables, synonyms, and triggers.
The schema objects tab of the options editor allows you to set default trigger actions for Parent and Child actions. It also enables you to apply default triggers to tables when relationships are created.
See Also
Creating and Editing Procedures
Create a Scripted Procedure
Create a Scripted User-Defined Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Create_a_Templated_User-Defined_Procedure&oldid=5059
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Create_an_SQL_Procedure,Create an SQL Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
Contents
1
SQL tab
2
Description tab
3
Permissions tab
4
Attachment Bindings tab
5
Notes
6
See Also
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Procedures
node, and then click
New Procedure
.
Complete the
Procedure SQL Editor
and then click
OK
to create the procedure.
Once you have created the SQL procedure, you can edit it by right-clicking the procedure you want to change, and then selecting Edit SQL Procedure.
SQL tab
Enter or edit a SQL code for the procedure.
Description tab
Enter or edit a definition for the procedure. If the target database supports it, ER/Studio Data Architect adds this definition as a table comment when generating SQL code.
Permissions tab
Sets access roles and user permissions for the procedure. Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them. The roles and users must be previously assigned to appear in the Procedure SQL Editor. For more information, see
Creating and Editing Database Roles
and
Creating and Editing Database Users
.
Note:
Against InterBase platforms, no
Permissions
page/tab is available.
Attachment Bindings tab
Bind an external piece of information, or attachment to the procedure. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
You can choose to launch your preferred SQL editor when editing functions and procedures. Using the Tools tab of the Options Editor, you can enter the name and location of the SQL editor that will launch and manage the SQL ER/Studio Data Architect outputs. Choose
Tools > Options > Tools > ISQL Path
.
For all new models you can choose:
To display the schema object description or its associated symbol; choose
Tools > Options > Display
and then select the desired display mode.
To hide invalid schema objects; choose
Tools > Options > Schema Objects
and then select
Hide Invalid Schema Object Bitmap
.
For the current data model, you can choose:
To display the schema objects or objects relationships, and object definition or object symbol; choose
View > Diagram And Object Display Options > Schema Object
and then select the desired display options.
What to display when you mouse over a schema object; choose
Tools > Options > Diagram > Schema Object Display
and choose to display the object description or its associated DDL.
For physical models, you can enter SQL to be applied before and after the CREATE OBJECT clause in the CREATE TABLE statement. Choose
Model > Model Properties > PreSQL & Post SQL
.
The sample physical model for SQL Server 2008 in
Northwind.dm1
provides some good examples of how SQL procedures can be used.
See Also
Creating and Editing Database Dependent Objects
Developing the Physical Model
Creating and Editing Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Create_an_SQL_Procedure&oldid=5060
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_Entity_Relational_or_Dimensional_Models,Creating Entity Relational or Dimensional Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
You can generate a DM diagram by starting with a logical model, by reverse-engineering, by importing an SQL or an ERX file, or by adding a new physical model.The Model Notation controls whether the data model design technique used is Entity Relational (ER) or Dimensional (DM). You can use either technique depending on your requirements.
What is a Dimensional Model?
Dimensional Model Table Type Determination
Contents
1
What is a Dimensional Model?
2
Dimensional Model Table Type Determination
3
Dimensional Model Table Types
4
See Also
What is a Dimensional Model?
A Dimensional Model is a specific type of 'entity/relationship' design used for designing systems which help optimize queries used in decision support databases (e.g. Data Warehouses, Data Marts etc).
Dimensional modeling is often used for modeling data warehouses, providing for high-performance, end-user access to data. An extremely important factor is the identification and modeling of the different sources of data that are used to populate the data warehouse. This is referred to as Extract, Transform, and Load (ETL). ER/Studio's Data Lineage Modeling, which is another key differentiator, allows the architecture to be fully modeled and documented, including data sources, staging areas, the data warehouse, and ETL.
ER/Studio Data Architect supports Dimensional Modeling as a new 'type' of Physical Model. Designating a model as Dimensional Modeling occurs:
During Generate Physical Model time (as a choice in the Wizard)
As a notational choice in the Physical Model to toggle the Notation to 'Dimensional' which will update any existing Physical Model to Dimensional status
Where entity relationship modeling is used to define the structure and association of data (most often implemented in relational databases), dimensional modeling not only covers that aspect (i.e. structure) but moves deeper into designing the SEMANTICS of the data itself. What happens to the data in the decision support system (Is it fixed data or does it change? And if it changes, to what extent?) The purpose of capturing this level of metadata in the design is so that when you leverage software systems to query the 'measures' in the database, you will more easily know what is the 'truth' behind the lineage/history of the data.
Dimensional Model Table Type Determination
Tables must be assigned to a specific dimensional model table type. This is one of the most critical aspects of offering a dimensional modeling 'notation' in ER/Studio Data Architect. Initially, a choice of table types will be available from the Dimensional Modeling Toolbar when creating new tables. Users can choose a Fact, Dimension or Snowflake table to drop it on the workspace. Two things can influence the Dimensional Table Type:
User Over-ride (see Table Editor info below):
Automatic Assignment by ER/Studio: The dimensional modeling rules discussed in detail below will automatically be enforced by ER/Studio Data Architect.
Example:
1. User drops down a Dimension 'A'
2. User Drops down another Dimension 'B'
3. User draws relationship from DimA to DimB
4. DimB automatically changes its type to a 'Fact.'
Generally speaking, this dimensional metadata now managed in the DM1 is to be leveraged externally by other 'consumers' such as reporting tools like Business Objects, Cube Views, Cognos and so on in an effort to ensure that people querying data from these reporting engines know what type of data the table represents, i.e. a Facts, Dimensions, etc. Interfacing ER/Studio with these large B.I. and ETL products is helpful because ERStudio can pre-populate your Repositories with this important metadata.
Dimensional Model Table Types
Undefined
: An Undefined Table is a table managed in the Dimensional Model that has been intentionally set by the designer (over riding the default type of 'Dimension') in order to flag it that a decision must be made about what it is to become (Dimension, Snowflake etc).
Fact
: A Fact Table is the focus of a Dimensional Model's intended query to determine specific business performance measurement on a selected 'topic' of data. The fact table is an aggregate collection of Dimensional Table Foreign Keys (in addition to other measurement attributes) assembled to gather specific numeric or additive data the business is interested in reviewing historical performance of.
Dimension
: A Dimension Table contains the very specific and descriptive data on a particular aspect of a query which the Fact Table assembles. An example would be a Dimension called 'Product' which is a table containing product specific information fed into the Fact. Other Dimensions provide other 'descriptors' such as 'Region' When fed into the Fact, queries can be derived for Product sold within a specific Region.
Snowflake
: Outriggers (sometimes called Snowflakes due to the structure they visually look like in a Dimensional Model as extensions to Dimensions) act as 'qualifier' for Dimensions. Snowflaking essentially 'normalizes' a Dimension table by removing specific attributes in a Dimension (oftentimes these are 'types') and implementing them as separate tables acting as lookup parents of the Dimension. An example would be a Dimension called 'Marketing Brand' which at one time contained attributes called Finance Category and Marketing Category. In order to normalize this data, those two attributes were removed from the dimension and established as their own tables and provided with a PK which are then propagated via non identifying relationship to the child dimension, Marketing Brand.
These table types are further discussed below.
See Also
Dimensional Table Types Indepth
Setting the Relationship Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_Entity_Relational_or_Dimensional_Models&oldid=5422
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_Event_Handlers,Creating Event Handlers,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
ER/Studio Data Architect supports programmatic event handling. In order to use the events, you must have the option enabled. To do this, choose
Tools > Options > Automation Options
and then select
Create Handlers
.
You can also write handlers for update events, see
Handling Update Events
.
You can customize templates to create database objects, including the following:
Entity
Attribute
Relationship
Index
Model
Submodel
Domain
Default
User Datatype
Rule
View
View Relationship
Trigger
Stored Procedure
When an entity is created, ER/Studio Data Architect calls the
CreateEntityHandler( )
function in the
ERSBasicHandlers.bas
file.
When the function is called, ER/Studio Data Architect passes to the handler the newly created entity (the current entity) and the current diagram. The bodies of all the functions in the file are currently empty. You can extend the creation behavior of any of the objects listed above by implementing the bodies of these functions.
ER/Studio Data Architect does not call the creation event functions for attributes and indexes until after you exit from the Entity Editor.
Example:
Sub CreateEntityHandler(CurEntity As Object, CurDiagram As Object)
Dim Prefix as String
Dim EntityName as String
Dim NewEntityName as String
Prefix = ""ERS""
EntityName = CurEntity.EntityName
NewEntityName = Prefix + EntityName
CurEntity.EntityName = NewEntityName
End Sub
In this example, the CreateEntityHandler function is modified so that a prefix of ERS is attached to the default entity name each time you create a new entity.
Here is a more detailed explanation:
When you use the Entity Tool to create an entity, the default name for the entity is EntityX, for example, Entity1, Entity2. By modifying the body of the CreateEntityHandler function in the manner shown above, the default entity name becomes ERSEntityX (e.g. ERSEntity1, ERSEntity2).
Notes
When ER/Studio Data Architect starts, it reads in all the creation event handler functions from the file ERSBasicHandlers.bas. Modifications to these functions while the application is running will have no effect. You must restart ER/Studio Data Architect for your modifications to take effect.
You cannot declare a specific object type (for example, Entity) in the creation event handler functions. All objects must be declared as the generic Object type.
See Also
Handling Update Events
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_Event_Handlers&oldid=5338
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_SQL_Procedures_to_Run_Before_and_After_Generating_a_Physical_Model_View,Creating SQL Procedures to Run Before and After Generating a Physical Model View,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
You can create PreSQL and PostSQL that ER/Studio Data Architect runs before generating a view in the physical model when you choose the
Database > Generate Database
command and then click
Finish
in the wizard. The PreSQL and PostSQL you enter in the View Editor can be included in the SQL generated before and after the CREATE VIEW statement that creates the view.
Double-click a view to which you want to associate an SQL procedure.
In the
View Editor
, click the
PreSQL & PostSQL
tab.
Enter, or copy and paste the PreSQL and PostSQL onto their respective tabs.
If you want the PreSQL and PostSQL scripts to be generated, select
Generate
.
Click
OK
.
See Also
Creating SQL to Run Before and After Generating a Physical Database
Creating and Editing SQL Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_SQL_Procedures_to_Run_Before_and_After_Generating_a_Physical_Model_View&oldid=5063
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_SQL_Procedures_to_Run_Before_and_After_Generating_a_Table,Creating SQL Procedures to Run Before and After Generating a Table,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
You can create PreSQL and PostSQL that ER/Studio Data Architect runs before generating a table in the physical model when you choose the
Database > Generate Database
command and then click
Finish
in the wizard. The PreSQL and PostSQL you enter in the Table Editor can be included in the SQL generated before and after the CREATE TABLE statement that creates the table.
Double-click the table you want to associate the SQL procedure with.
In the
Table Editor
, click the
PreSQL & PostSQL
tab.
Enter or copy and paste the PreSQL and PostSQL onto their respective tabs.
If you want the PreSQL and PostSQL scripts to be generated, select
Generate
.
Click
OK
.
See Also
Creating SQL to Run Before and After Generating a Physical Database
Creating and Editing SQL Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_SQL_Procedures_to_Run_Before_and_After_Generating_a_Table&oldid=5064
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_SQL_to_Run_Before_and_After_Generating_a_Physical_Database,Creating SQL to Run Before and After Generating a Physical Database,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
You can create PreSQL and PostSQL procedures that ER/Studio Data Architect runs before generating a physical database from the physical model when you choose the
Database > Generate Database
command and then click
Finish
in the wizard. Using the PreSQL and PostSQ of the Emergency Admissions sample model as an example, you can create users and assign them specific permissions before generating the database and then create a materialized view, after generating the database.
In the
Data Model Explorer
, select a physical data model and then choose
Model > Model Properties
.
Select the
PreSQL & PostSQL
tab.
Enter, or copy and paste the PreSQL and PostSQL on their respective tabs.
If you want the PreSQL and PostSQL scripts to be generated, select
Generate
.
Click
OK
.
See Also
Creating SQL Procedures to Run Before and After Generating a Table
Creating and Editing SQL Procedures
Creating SQL Procedures to Run Before and After Generating a Physical Model View
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_SQL_to_Run_Before_and_After_Generating_a_Physical_Database&oldid=5065
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_Special_Search_Strings_(Using_the_Query_Parser),Creating Special Search Strings (Using the Query Parser),"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Operator
Search criteria
Example
AND (&&)
Contains ALL the search terms entered
apples AND oranges AND bananas
apples && oranges && bananas
OR (||)
Contains at least one of the words entered
cats OR dogs
cats || dogs
"" ""
Contains the exact phrase entered
""exactly this""
Does NOT contain some of the words entered
apples NOT oranges NOT bananas
+
Must contain a term and may contain another
+apples oranges
-
Must contain a term and must not contain another
+apples -oranges
?
Matches with a single character replaced
c? (matches cat but not coat
*
Matches zero or more characters
do* (matches do, dog, dogs, dogsled)
~
Terms are spelled similarly
land~ (matches land, sand, band)
"" ""~
Terms are found in close proximity to each other
""diagram update""~10 (matches objects where diagram and update appear within 10 words of each other)
ER/Studio Team Server uses Apache Lucene Query Parser to enable these search string operators. There are some special characters that when used within the syntax must be escaped. The following are special characters:
+ - && || ! ( ) { } [ ] ^ "" ~ * ?: \
To escape these characters, enter a backslash (\) before the special character.
For more details on the Lucene Query Parser, see
http://lucene.apache.org
and search for ""query parser syntax.""
See Also
Getting the Latest Version of a Diagram
Repository Status Icons
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_Special_Search_Strings_(Using_the_Query_Parser)&oldid=5066
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_Subtype_Cluster_Relationships,Creating Subtype Cluster Relationships,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Relationships
Note:
Subtype cluster relationships can only be represented in the logical model. When the physical model is generated from a logical model, the subtype relationship is converted to identifying relationship.
Contents
1
Subtype tab
2
Attachment Bindings tab
3
Notes
4
See Also
A subtype cluster refers to a group of entities sharing similar characteristics that form a
generalization hierarchy
. In each subtype cluster, there is one parent entity, known as a
supertype
, and one or more
subtype
entities. The supertype generalizes a set of subtypes; the common characteristics of subtype entities are assigned to the supertype while the subtype entities have more specific attributes. The subtypes, also known as category entities, represent homogeneous subsets of the supertype. The attributes and relationships of the supertype entity are propagated to all of its subtypes. Discriminators, an attribute of the subtype, distinguish the entities in the subtype from each other.
Other than recognizing a generalization hierarchy, an important issue with subtyping is to decide how to implement a subtype cluster in the physical model. Sometimes it is best to project subtypes into the supertype, representing the entire cluster as a single, generalized entity. Other times, you may need the granularity of separate subtype entities, choosing to implement the subtypes and supertype one-for-one or rolling the supertype down into the subtypes.
During the logical model phase, you should search for hierarchies that can reveal a more general approach to aggregating attributes into entities. By addressing the general case, you can design a more flexible and extensible approach to storing data. The use of subtyping is a powerful tool in identifying and portraying such generalizations.
Example
To illustrate the use of subtyping, let's take the example of the group of entities - Person, Customer, and Employee. Each entity stores information about employees. Accordingly, Person is the supertype in this example and the remaining entities can be grouped in a subtype. Any person contained in a subtype entity is also represented in Person. In each entity, the primary key is the Name. Because each entity instance for the entities in the subtype are also represented in the supertype, the relationships between the supertype entities and all subtype entities must be an identifying relationship, that is the customer, engineer and writer must all be employees. The relationship between Person, Customer, Employee, and Supplier is complete, because the business is concerned only with these types of persons. The relationship between the Employee, Engineer, and Writer is an incomplete subtype because there can be other employee types, such as quality assurance analysts.
In this example, the Person entity is the supertype. All Person's have a name, address and telephone number. A person can be either an Employee or a Customer. In addition to sharing name, address and telephone number attributes, each of these subtypes has its unique attributes; for example, an Employee has a Profession; and a Customer has a Credit Limit. An entity can be both a supertype and a subtype, as is the case with Employee, which can be further divided into Engineer and Writer.
Click the
Logical
model.
Choose
Insert > Subtype Cluster
and then choose
Complete
or
Incomplete
.
Click an entity to designate it as the parent (supertype) and then click the entity (subtype) you want to add to the subtype cluster.
Tip:
You can add multiple entities to the subtype cluster by pressing CTRL while clicking the desired entities.
Right-click to revert to the
Selection
tool and then double-click the newly created subtype relationship indicator.
Complete the
Subtype Cluster Editor
as required and then click
OK
.
The following helps you complete the
Subtype Cluster Editor
options:
Subtype tab
Attachment Bindings tab
Notes
Subtype tab
Type
: Select the subtype cluster type,
Complete
or
Incomplete
.
Complete
: A subtype cluster is complete when all possible subtype entities are included in the subtype cluster. An example of a complete subtype cluster is one in which
Person
is the supertype and
Male
and
Female
are the subtypes.
Incomplete
: Select if all possible subtype entities will not included be in the cluster. For example, a subtype cluster is made up of several entities,
Employee
,
StoreManager
,
SalesPerson
and
StockPerson
, each of which stores information about employees. In this example,
Employee
is the supertype and the remaining entities can be grouped in a subtype. This is probably an incomplete subtype cluster because other employee types cannot be represented in the cluster, such as security guards and cashiers.
Membership Type
: Select Inclusive or Exclusive subtype.
Inclusive
: Select if each supertype that has subtypes can be more than one subtype at a time. For example, an
EMPLOYEE
and be both an
ENGINEER
and a
WRITER
.
Exclusive
: Select if each supertype that has subtypes can be only one subtype at a time. For example, a PERSON cannot be both an
EMPLOYEE
and a
CUSTOMER
.
In IE notation, an exclusive subtype is represented with an exclusive
OR
symbol. The diagram and reports will show the type of supertype/subtype cluster in the
TYPE
field depending on what you selected, Complete, Inclusive; Complete, Exclusive; Incomplete, Inclusive; Incomplete, Exclusive.
Discriminator
: Select a discriminator from the list.A discriminator is an attribute that distinguishes each of the subtype entities from one another. A subtype discriminator can be a primary key or non-key attribute of the supertype. After you define a discriminator, ER/Studio Data Architect displays it next to its subtype cluster symbol.
Attachment Bindings tab
Bind an external piece of information, or attachment to the domain. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
You can add an entity to a subtype cluster by choosing
Insert > Relationship > Identifying
, clicking the subtype cluster symbol next to the supertype you want to associate the entity with, and then clicking the entity you want to add to the subtype cluster.
You can edit the subtype by right-clicking the subtype cluster symbol and then selecting
Edit Subtype Cluster
.
You can change the colors of the subtype cluster symbol, by right-clicking it and then selecting
Subtype Cluster Color
.
You can remove an entity from a subtype by selecting the relationship between the subtype and the entity and then choosing
Edit > Remove Relationship
.
You can delete a subtype if you no longer want to include it in your data model. You can also add or remove entities from a subtype cluster in much the same way you add or delete relationships between entities. Delete a subtype by selecting the subtype and then choosing
Edit > Delete Subtype Cluster
. Deleting a subtype cluster deletes all relationships between the parent entity (supertype) and the child entities (subtypes).
You must redefine the relationships between the entities after you delete a subtype.
While subtypes can be specified as complete or incomplete, you'll get a visual indication of it only in IDEF1X. To see the distinction in IE (Crow's feet) you can view it in the Subtype Cluster Editor, or use a naming convention or color as a mnemonic.
IE is more flexible in supporting subtypes, permitting roll up (generalization) and roll down (specialization) transformations.
See Also
Creating and Editing Relationships
Creating and Editing Recursive Relationships
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_Subtype_Cluster_Relationships&oldid=5067
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_Terms,Creating Terms,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Entities and Tables
If you have an Object name that is not already in
Team Server
and you would like to create a term, you can use the
Team Server Business Term Editor
to create one.
To create a term:
Double-click an object in the model to open the object editor.
Open the Definition tab.
Click the
Create Term...
button to open the Team Server Business Term Editor.
Type or edit the
definition
and choose the
Entity Type
from the dropdown list.
Click
OK
to create the term in your Team Server installation.
After completing the term creation as listed above, your new term can now be matched in the Name, Definition, or Notes of a model object and will be highlighted in blue and underlined with a dashed line, whenever you have
Glossary Integration
enabled.
If you hover your mouse icon over the highlighted term, a popup definition will appear.
Ctrl-clicking on the term will open up a browser and navigate to the term in Team Server interface.
See Also
Glossary Integration
Logging In and Out of the Repository and ER/Studio TS
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_Terms&oldid=4466
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_View_Relationships,Creating View Relationships,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
The steps to adding and deleting view relationships are the same as those of regular relationships. However, view relationships are a special type of relationship used to propagate attributes from an entity or a view to a view. When adding a view relationship, the end point of the relationship must be a view. View relationships cannot be edited, but they can be deleted. To determine which attributes of an entity can be propagated from the parent entity or view to the child view, use the View Editor - Column Tab.
In order for view relationships to display, you must enable the options to display views and view relationships on the
View
tab of the
Diagram and Object Display Options
dialog. Choose
View > Diagram and Object Display Options
.
See Also
Creating and Editing Database Views
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_View_Relationships&oldid=5068
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_a_Data_Model_Object,Creating a Data Model Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
The Modeling toolbar provides easy access to tools you can use to drag and drop entities and establish the relationships between them, and also create views. The tools available on the Modeling Toolbar depend on whether the data model you selected in the Data Model Explorer is logical or physical, relational or dimensional, and the designated platform for the physical models. Not all the Modeling tools create objects that can be represented in the Data Model Window; some tools like the User and Role tools launch editors that guide you through the process of creating an object of that type. Users and Roles are visible in the Data Model Explorer.
From the
Modeling Toolbar
, select an object tool.
The cursor changes to an icon representing the object tool.
In the
Data Model Window
, click where you want to place the object.
Some object tools, like the entity or view tools, create an object in the Data Model Window; others, such as the function or user tools, bring up an editor where you specify the object attributes.
See Also
Developing the Logical Model
Developing the Physical Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_a_Data_Model_Object&oldid=5069
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_a_New,_Blank_Data_Model","Creating a New, Blank Data Model","From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Working With Data Models
Choose
File > New
.
Select
Draw a new data model
, select whether you want to create a
Relational
or
Dimensional
model, and then click
OK
.
Choose
File > Save
, navigate to the appropriate directory, enter a file name, and then click
Save
.
See Also
Generating a Physical Data Model
Changing the Database Platform of a Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_a_New,_Blank_Data_Model&oldid=6829
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_a_New_Inheritance_Relationship,Creating a New Inheritance Relationship,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Relationships
Inheritance relationships exist for PostgreSQL only.
To create a new inheritance relationship
On the Data Model Explorer, click the Data Model tab.
Choose
Insert > Inheritance Relationship
. This action changes the cursor icon and allows you to select the objects in the main window with which to create the relationship.
Click the object containing the other object.
Click the object contained within the previously-clicked object.
Double-clicking the relationship line opens the Inheritance Relationship Editor where you can edit settings.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_a_New_Inheritance_Relationship&oldid=7542
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_an_Enterprise_Data_Dictionary,Creating an Enterprise Data Dictionary,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
You can promote a regular Data Dictionary to an Enterprise Data Dictionary (EDD). Alternatively, you can create a new EDD and add objects to it, just as for a regular Data Dictionary.
Promote Local Data Dictionary to Enterprise Data Dictionary
Ensure the diagram containing the data dictionary you want to promote is the active diagram.
Log in to the Repository.
Choose
Repository > Diagrams > Add Diagram
.
On the
Add Diagram to ER/Studio Repository
, select
Promote Local Data Dictionary To Enterprise
.
Create a New, Empty Data Dictionary
Log in to the Repository.
Open a Repository diagram.
The Create Enterprise Data Dictionary command is disabled when you are not displaying a Repository diagram.
Choose
Repository > Data Dictionary > Create Enterprise Data Dictionary
.
Notes:
Once created, you can bind the EDD to a drawing and add objects just as you would to a local Data Dictionary.
The new EDD is automatically bound to the current diagram.
Unlike regular Data Dictionaries, EDDs do not include a Reusable Procedural Logic node, and therefore cannot contain triggers, procedures or libraries.
See Also
Associating a Data Dictionary with a Diagram
Determining Where an Enterprise Data Dictionary is Used
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_an_Enterprise_Data_Dictionary&oldid=5071
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Aliases,Creating and Editing Aliases,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
An alias is an alternate name for an alias, synonym, table, view or for another undetermined object type. (You can only create an Alias for a synonym on the IBM DB2 for OS/390 or z/OS platforms.) An alias can provide a more meaningful object name for the target audience. An alias can also act as a low-overhead view. Table aliases can refer to each other in a process called chaining. Aliases let you assign the permissions of a database user to an object without creating a separate user entity or masking a user's identity.
The following database platforms support Aliases:
IBM DB2 for LUW 5.x, 6.x, 7.x, 8.x, 9.x, 10.x
IBM DB2 for OS/390 5.x - 10.x
IBM DB2 for z/OS 7.x, 8.x, 9.x, 10.x, and 11.x
The DB2 Alias Wizard and DB2 Alias Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Create an Alias
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Aliases
node, and then select
New Alias
.
Complete the
DB2 Alias Wizard
and then click
Finish
to create the alias.
Once you have created the alias, you can edit it by right-clicking the alias you want to change, and then selecting Edit Alias.
Contents
1
Name page/tab
2
Reference page/tab
3
Definition page/tab
4
DDL page/tab
5
Attachment Bindings tab
6
See Also
Name page/tab
Enter the name of alias and its owner.
The alias name is the fully-qualified name of the alias and must not be the same as any table, view, alias, or synonym on the current server.
The owner name is the user ID for the owner of the alias. This name is the authorization ID that qualifies the alias.
Reference page/tab
Select the type of object you want to reference. If there are any objects in the model that match your selection, you can click the identifier list to choose the appropriate identifier.
Definition page/tab
Enter or edit a definition for the alias. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code. The maximum length of comments in the DDL is 254 characters.
DDL page/tab
Displays the
CREATE ALIAS
statement needed to build the alias. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the alias.
Attachment Bindings tab
Bind an external piece of information, or attachment to the alias. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the alias before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
See Also
Creating and Editing Relationships
Creating and Editing Columns
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Aliases&oldid=5072
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Attributes_and_Columns,Creating and Editing Attributes and Columns,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Entities and Tables
Attributes represent the relevant properties or characteristics of an entity. In the physical model, attributes are represented as table columns.
This section is comprised of the following topics:
Creating and Editing Attributes
Creating and Editing Columns
See Also
Creating and Editing Entities
Creating and Editing Tables
Automatic Naming Translation
Glossary Integration
Creating Terms
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Attributes_and_Columns&oldid=5074
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Auxiliary_Tables,Creating and Editing Auxiliary Tables,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Auxiliary Tables are created to store the data of large object (LOB) Columns. LOB Columns are columns in a regular table, called the Base Table, whose data type is BLOB or CLOB and whose data is large objects. Since the data is very large, it is not stored with the other data in the table. Even though the base table holds the LOB Column logically, as a VARCHAR(4), the LOB Column's data is physically stored in the auxiliary table. Each LOB Column has at least one auxiliary table associated with it. Either one auxiliary table for each LOB Column of a non-partitioned table, or one auxiliary table for each LOB Column for each partition, if the LOB Column is defined in a partitioned base table. For example, if you have two LOB Columns in a Base Table with four partitions, you must also have a total of eight auxiliary tables.
Note:
You must store Auxiliary tables each in their own auxiliary tablespaces, and you must create a unique index on them.
The following database platforms support auxiliary tables:
IBM DB2 for OS/390 5.x - 10.x
IBM DB2 for z/OS 7.x, 8.x, 9.x, 10.x, and 11.x
Note:
The Auxiliary Table Wizard and Auxiliary Table Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Contents
1
Add an Auxiliary Table
2
Name page/tab
3
Base Table page/tab
4
Storage page/tab
5
Index Options page/tab
6
Definition page/tab
7
DDL page/tab
8
Attachment Bindings tab
9
See Also
Add an Auxiliary Table
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Auxiliary Tables
node, and then select
New Auxiliary Table
.
Complete the
Auxiliary Tables Wizard
and then click
Finish
to create the
auxiliary table
.
TIP:
Once you have created the auxiliary table, you can edit it by right-clicking the auxiliary table you want to change, and then selecting Edit Auxiliary Table.
Name page/tab
Enter the name of auxiliary table and its owner.
The table name is the fully-qualified name of the auxiliary table and must not be the same as any table, view, alias, or synonym on the current server.
The owner name is the name of the owner of the base table whose column you want to store in the auxiliary table. This name is the authorization ID that qualifies the table name. If not specified, the DBS subsystem user identifier for the connection used to create the database is used.
Base Table page/tab
The base table identifier is the name of the base table whose column you want to store in the auxiliary table. The auxiliary table is created to hold the data of a
LOB
column. The
LOB
column logically belongs to a regular table, called the base table. However, because its data is too large to physically stored in the base table, the
LOB
column data is physically stored in the auxiliary table. The base table identifier is also made up of owner name, dot, table name. The drop-down list displays the name of all tables in the model that have tables defined with
BLOB
or
CLOB
columns. The base table identifier is optional ER/Studio Data Architect, but required for a valid
CREATE AUX TABLE SQL
statement.
You must have one auxiliary table per
LOB
column for a non-partitioned base table. However, if a
LOB
Column is defined in a partitioned base table, then each
LOB
column must have a separate auxiliary table for each partition in the base table. The drop-down list displays the name of all columns in the selected base table that are defined as
BLOB
or
CLOB
datatypes. The
LOB
column name is optional ER/Studio Data Architect, but required for a valid
CREATE AUX TABLE SQL
statement.
When creating an auxiliary table for a partitioned table, you can specify the number of the partition whose data you want to store. This is only valid for LOB Columns defined in base tables stored in partitioned tablespaces.
Storage page/tab
If you have any defined databases in the model, you can click the list and select the database where the auxiliary table will be created. For more information, see
Creating and Editing DataBases
.
Each auxiliary table must be defined in its own tablespace; i.e. you must have exactly one tablespace per auxiliary table. The tablespace name can be qualified with the database name in which the tablespace resides. Together the database.tablespace make up the tablespace identifier. The tablespace name is optional ER/Studio Data Architect, but required for a valid
CREATE AUX TABLE SQL
statement. For more information, see
Creating and Editing Tablespaces
.
Each auxiliary table requires a Unique Index.
Index Options page/tab
Concurrent Copy
: (
COPY
) If selected, concurrent copies of the index are allowed, which can increase index availability by supporting index recovery.
Do Not Close Dataset
: (
CLOSE
) If selected, the index will not be closed when not in use. If not selected, the dataset can be closed if it is not in use and the maximum number of open datasets is reached or exceeded.
None
: If selected, no
USING
clause is included in the
CREATE INDEX
statement.
VCAT
: (
VCAT
) If selected, allocates space for the index on a data set managed using the virtual catalog (
VCAT
) whose name is specified next to this option, and the user manages the data sets required for the index. The
VCAT
method is usually used for defining system catalogs. It requires that the VSAM dataset be pre-defined before the index space is created.
STOGROUP
: (
STOGROUP
) If selected, stores the index on a data set managed by DB2 in the named storage group. Stogroup defined index spaces let DB2 do all the VSAM allocation work for you. If you have created a Stogroup for the data model, using the
Stogroup Editor
(see
Creating and Editing StoGroups
), you can select that Stogroup from the list. If you select
STOGROUP
, you can also define values for
PRIQTY
and SECQTY. To prevent wasted space for non-partitioned indexes, you should not define
PRIQTY
and
SECQTY
; instead let DB2 manage the amount of primary and secondary space allocated for the index.
PRIQTY
:(PRIQTY) Specifies the minimum number of disk space in kilobytes to initially allocate for the index. The primary allocation should be large enough to handle the storage needs that you anticipate.
SECQTY
: (SECQTY) Specifies the amount of disk space in kilobytes to allocate to the index when it reaches the size of the primary allocation. If the secondary allocation space is too small, the data set might have to be extended more times to satisfy those activities that need a large space. The default value of -1 indicates that DB2 should determine the size of the secondary allocation, which is usually 10% of the primary allocation.
Erase Data
: (
ERASE
) If selected, specifies to erase the index data set when the index is deleted.
Buffer Pool
: (
BUFFERPOOL
) Identifies the buffer pool to be used for the index. The buffer pool used determines how the data blocks are cached in memory, in order to facilitate faster data access. BP0 is the default buffer pool for sorting.
Percent Free
: (
PCTFREE
) Specifies the maximum percentage of space in each data block to reserve for future updates. This reserved space helps to avoid row migration and chaining caused by an update operation that extends a data row's length. Tables that will not be updated should have this value set to 0.
Free Page
: (
FREEPAGE
) Specifies how often to leave a page of free space when index entries are created. One free page is left for every number of pages specified here in the range of 0 to 255.
Piece Size
: (
PIECESIZE
) Specifies the maximum addressable space of each data set for a secondary index. Specify the size followed by K (kilobyte), M (Megabyte), of G (Gigabyte). If you do not specify the unit of measure, kilobytes is assumed. Sizes specified in gigabytes are converted to megabytes in the DDL.
GBP Cache
: (
GPBCACHE
) In a data sharing environment, specifies what index pages are written to the group buffer pool. This option is ignored in a non-data-sharing environment unless the index is on a declared temporary table.
Changed
: Writes updated pages to the group buffer pool.
All
: Caches all pages to the group buffer pool as they are read in from DASD.
None
Uses the buffer pool only for cross-invalidation.
Definition page/tab
Enter or edit a definition for the auxiliary table. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE AUXILIARY TABLE
.statement needed to build the auxiliary table. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the auxiliary table.
Attachment Bindings tab
Bind an external piece of information, or attachment to the auxiliary table. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Creating and Editing Tablespaces
Attaching External Documents to the Data Model
Creating and Editing DataBases
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Auxiliary_Tables&oldid=5075
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Buffer_Pools,Creating and Editing Buffer Pools,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a Buffer Pool
2
Name page/tab
3
Nodes page/tab
4
Definition page/tab
5
DDL page/tab
6
Attachment Bindings tab
7
See Also
The buffer pool is a memory structure that can cache data blocks in memory, providing faster data access by retaining the object in memory to avoid I/O conflicts or remove data blocks from memory as soon as they are no longer in use, thereby saving cache space. You can choose to use the buffer pool to store indexes and tables for many different database platforms.
The default page size of a buffer pool is the size specified when the database was created unless you explicitly specify another page size. Pages can be ready into a buffer pool only if the table space page size is the same as the buffer pool page size, so ensure the buffer pool page size matches that of the table space.
The following database platforms support buffer pool creation.
IBM DB2 for LUW 5.x, 6.x, 7.x, 8.x, 9.x, 10.x
Note:
The Bufferpool Wizard and Bufferpool Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Create a Buffer Pool
In the
Data Model Explorer
, expand the Logical
Main Model
, right-click the
Buffer Pools
node, and then click
New Bufferpool
.
Complete the
Bufferpool Wizard
and then click
Finish
to create the
buffer pool
.
TIP
: Once you have created the auxiliary table, you can edit it by right-clicking the auxiliary table you want to change, and then selecting Edit Auxiliary Table.
Name page/tab
Specify the size of the buffer pool in the number of pages. If you do not specify the size, the default size is -1.
Click the list to specify the size of the pages for the buffer pool in Kilobytes.
Extended Storage
: Select to use extended storage on unix systems, then if the pages requested are not in the buffer pool, they can be accessed from extended storage, which can be faster than reading the pages from disk. This option is ignored in IBM DB2 for LUW version 9 and later.
Note:
Ensure your system has enough real memory for all the buffer pools, in addition to the memory required for the database manager and application.
Nodes page/tab
In version 9, IBM started using
DBPARITITOINNUM
instead of
NODE
.
Definition page/tab
Enter or edit a definition for the buffer pool. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE BUFFERPOOL
statement needed to build the buffer pool. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the buffer pool.
Attachment Bindings tab
Bind an external piece of information, or attachment to the buffer pool. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Developing the Physical Model
Best Practices
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Buffer_Pools&oldid=5076
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Business_Data_Objects,Creating and Editing Business Data Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
Contents
1
To create a Business Data Object
2
To define or edit entity details
3
Containment Tab
3.1
To set an anchor entity
4
Definition tab
5
Note tab
6
Security Information tab
7
Attachment Bindings tab
8
Notes
9
See Also
Business Data Objects (BDO) are containers for describing a business concept or object. They are intended to enhance understanding across a team that may be comprised of both technical staff and business users.   Business users tend to think of high level business concepts such as customer, order, etc.  Developers and application architects also think in terms of objects and how they are implemented in code. By contrast, data architects design the data structures that contain the information pertaining to a specific concept, breaking it down into related entities.  A sales order is a perfect example, since it is a specific concept, but when implemented in a database it is comprised of a sales order header, sales order detail and often other dependent entities as well.
A Business Data Object is a modeling construct that groups related entities (tables) that comprise a specific object.  It is intended to designate entities (tables) that would be persisted as a group when persisting all the data for that object to a database.  This means that there is a top level entity, known as an anchor, which is the focal point for all other entities in the object.  When creating an instance of the object  those dependent entity instances would not (and could not) be populated unless the anchor entity is populated.  Using the example of the sales order, order details and other associated information could not exist without the sales order header.  Therefore, the sales order header is the anchor for the sales order business data object.  Another important clarification is that since the Business Data Object is designed to designate object persistence, within a model, an entity (table) may belong to only 1 Business Data Object.
Business Data Objects can be easily displayed within a mode.  When added to a submodel, a BDO will also add the entities that it contains to that submodel.  Entities in BDO's can, and usually do, have relationships to other entities outside the BDO.  For example, a Sales Order Header would typically have a relationship to Customer to designate the customer that placed the order, while the Order Detail would typically have a relationship to a Product to indicate the specific product being ordered for that line item.  BDO's can be collapsed on the screen to visually hide the entities contained within it.  When doing so, the relationships to entities outside the BDO will still be shown.  This is a very useful technique for communicating with business users, as it focuses on interaction between higher level concepts, but shields the business user from the underlying technical detail.
To create a Business Data Object
Open the File Menu
Insert > Business Data Object
.
With the changed cursor icon, click on the model window, where you would like the Business Data Object to be created.
You can create multiple BDOs by clicking on the model window.
To return the cursor to normal, right click the model window.
To define or edit entity details
Double-click the BDO to launch the
Business Data Object Editor
.
Define the BDO as required and then click
OK
.
The following helps you complete the options of the
Business Data Object Editor
:
Containment Tab
Add or remove entities from the BDO and set an anchor.
Show only contained objects:
When selected, the Contained Entities window will only display those entities that are contained within the BDO.
Include children of contained objects:
When selected, the Contained Entities window will only display those entities that are children of the contained entities.
Include parents of contained objects:
When selected, the Contained Entities window will only display those entities that are parents of the contained entities.
To set an anchor entity
Once you add entities to a BDO, determine if there are any key dependencies among the entities. The top entity of those relationships is called the
anchor
. Use the following steps to set an anchor within a BDO.
Double-click the BDO to launch the
Business Data Object Editor
.
Click the entity that you want to set as the anchor, and then click
Set anchor
.
Definition tab
Enter or edit a definition for the entity/table.
Note tab
The notes added here are included as part of the HTML report when you generate a report for the model. You can format the notes using standard HTML tags. For information about reports, see
Generating RTF and HTML Model Reports
.
Security Information tab
Displays the current security information as defined in the Data Dictionary. You can add or edit security reporting information in by double-clicking the field you want to change. To set the model-wide default value for a property, go to the Data Dictionary tab and expand the Data Security Information Node. For more information, see
Enforcing Security Using Data Security Types and Properties
.
Attachment Bindings tab
Used to bind an external piece of information, or attachment to the BDO.
Notes
You can collapse a BDO containment frame by clicking the
minus
sign in the top right hand corner of the BDO frame.
See Also
Overview
Customizing the Data Model
Automatic Naming Translation
Glossary Integration
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Business_Data_Objects&oldid=5477
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_DataBases,Creating and Editing DataBases,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Add a Database
2
Name & Type page/tab
3
Option page/tab
4
Definition page/tab
5
DDL page/tab
6
Attachment Bindings tab
7
See Also
Databases are DB2 structures such as collections of tables with associated indexes, as well as the tablespaces and index spaces that contain them. Using databases for administration, you can limit access to the data in the database in one operation, or give authorization to access the data as a single unit.
When you create a database the following tasks are performed:
System catalog tables required by the database are setup.
The database recovery log is allocated.
The database configuration file is created and the default values are set.
The database utilities are bound to the database.
Before creating the database, ensure you have considered the contents, layout, potential growth and usage.
The following database platforms support database creation:
IBM DB2 for z/OS 5.x, 6.x, 7.x, 8.x, 9.x, 10.x, and 11.x
Note:
The Database Wizard and Database Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Add a Database
In the
Data Model Explorer
, expand a physical model, right-click the
Databases
node, and then click
New Database
.
Complete the
Database Wizard
and then click
Finish
to create the
database
.
Once you have created the auxiliary table, you can edit it by right-clicking the auxiliary table you want to change, and then clicking Edit Auxiliary Table.
Name & Type page/tab
Name the database and specify the type. The database cannot already exist on the current server. The name must not start with DSNDB, unless it is a workfile database and must not start with DSN followed by five digits. Select WorkFile Database (
AS WORKFILE
) if the database operates in a data sharing environment and you are creating a database that will be used for purposes such as managing the data of temporary tables, storing intermediate SQL results, created global and temporary tables. If you choose to create a WorkFile Database, you must also specify the member or DB2 subsystem that can use the workfile. Only one member of the data sharing group can use this workfile.
Option page/tab
To make the database easier to manager, keep work files in a separate buffer pool.
Tablespace and index buffer pools: (
BUFFERPOOL and INDEXBP
) Identifies the buffer pools to be used. The buffer pool used determines how the datablocks are cached in memory, in order to facilitate faster data access. BP0 is the default buffer pool for sorting.
Storage Group
: (
STOGROUP
) If selected, stores the index on a data set managed by DB2 in the named storage group. Stogroup defined index spaces let DB2 do all the VSAM allocation work for you. If you have created a Stogroup for the data model, using the Stogroup Editor (see
Creating and Editing StoGroups
), you can select that Stogroup from the list. If you select Stogroup, you can also define values for
PRIQTY
and
SECQTY
. To prevent wasted space for non-partitioned indexes, you should not define
PRIQTY
and
SECQTY
; instead let DB2 manage the amount of primary and secondary space allocated for the index.
Encoding Scheme
: (
CCSID
) Specifies the encoding scheme:
ASCII
,
EBCDIC
,
UNICODE
or the system installed default. This is not valid if this database is to be used as a work file in a data sharing environment. If you do not want to use the default encoding scheme that was selected when you installed DB2 for OS/390 and z/OS, you can override your installation selection here. You cannot specify an encoding scheme for a workfile database.
Definition page/tab
Enter or edit a definition for the database. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE DATABASE
statement needed to build the database. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the database.
Attachment Bindings tab
Bind an external piece of information, or attachment to the database. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the
Attachments
folder of the
Data Dictionary
. For more information, see
Attaching External Documents to the Data Model
.
See Also
Creating and Editing Database Dependent Objects
Creating and Editing Sequences
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_DataBases&oldid=5078
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Data_Lineage_Data_Flows,Creating and Editing Data Lineage Data Flows,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
The Data Lineage Data Flow organizes and encapsulates data transformations and the source tables and columns used in the transformations to produce the target data. Multi-tiered mappings are possible and there can be multiple transformations involving different attributes/columns between two entities/tables as illustrated below.
Tip:
Displaying the transformation definition, inputs and outputs, and code is controlled by the Transformation options in the Diagram and Object Display Options editor. For more information, see
Configuring and Customizing
.
Contents
1
Create a Data Lineage Data Flow
2
All tabs
3
Columns tab
4
Definition tab
5
Data Movement Rules tab
6
Attachments tab
7
See Also
Create a Data Lineage Data Flow
From the data model explorer, click the
Data Lineage
tab at the bottom of the application window.
If this is the first time you click the Data Lineage tab after opening a diagram
, you are prompted to create a
Data Lineage Data Flow
. Click
Yes
.
If this is not the first time you click the Data Lineage tab after opening a diagram
, go to
Model > Data Lineage > Create Data Flow
.
Enter a data flow name and then click
OK
.
Note
The name that appears in the diagram title tab at the top of the application window is appended with
: data flow name
, when you click a data flow in the Data Lineage explorer, such as
GIMDB.DM1 - Data Flow Model View: Data Flow Name*
.
If you have not already created your data movement rules and data sources and targets, proceed to
Relating Source and Target Tables and Columns
or
Defining Source Systems
, and then return to Step 5.
Navigate to and then drag and drop the source and target tables or entities onto the Data Lineage window.
Tip:
You can have multiple source and target tables or entities. Drag and drop as many as you need.
Tip:
You can choose to display the inputs and outputs of the transformation, by right-clicking an empty space on the Data Lineage window and selecting Diagram and Object Display Options, then clicking the Transformation tab and selecting Input and Output Columns.
Note:
The Data Lineage Window will continue to display the data flow visualization if you click the Repository, Data Dictionary or Macros explorer tabs, but if you click the Data Model tab, the Data Lineage Window is replaced with the Data Model window. Clicking the Data Lineage tab brings back the Data Lineage window.
Right-click an empty space of the Data Lineage window and then click
Insert Transformation
.
Double-click the new transformation to open the
Transformation Editor
.
Complete the
Transformation Editor
as required and then click
OK
to exit the editor.
Tip:
Once the data flow is created, you can double-click it to change its name, or double-click a transformation or component to change its properties.
Right-click an empty space of the Data Lineage window and then click
Insert Data Stream
.
Click an input source and then click the transformation object. Repeat as many times as necessary to link all the inputs to the transformation object.
Click the transformation object and then click an output. Repeat as many times as necessary to link all the outputs to the transformation object.
All tabs
Name
: The name of the transformation can be edited in this field.
Type
: Click the type list to choose a transformation; or in the text field, type the name of an existing transformation type or enter a name for a new transformation type.
Columns tab
This tab (also used for Attributes) displays the Parent Model, Parent Object, Attribute/Column name, Data Type and Definition of the transformation inputs and outputs.
Inputs
: Click the ellipsis (...) button to choose the source data to be transformed in this transformation. Here you can select all the columns of the table or only selected columns to be the input of the transformation.
Outputs
: Click the ellipsis (...) button to choose the output data to be created by this transformation
Definition tab
Business
: Describe the transformation for your audience.
Code
: Enter the code that will perform the transformation, such as a SELECT statement, of a VB Basic or JavaScript function or procedure.
Data Movement Rules tab
These are the rules from the Data Movement Rules node of the Data Lineage explorer.
Note:
You can delete or edit an input or output column by double-clicking the transformation in the Data Lineage window, clicking the ellipsis in the Transformation Editor and then deselecting the column you want to remove.
Attachments tab
Bind an external piece of information, or attachment to the transformation. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the default before they will display on this tab.
Like any other database object, you can right-click a transformation, choose Comments and add a comment to the transformation.
See Also
Data Lineage Workflow
Tutorials: Creating a Data Flow
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Data_Lineage_Data_Flows&oldid=5079
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Database_Dependent_Objects,Creating and Editing Database Dependent Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
The availability of many physical data model objects depends on the database platform selected. For more information, see the following topics:
Creating and Editing Aliases
Creating and Editing Object Types
Creating and Editing Auxiliary Tables
Creating and Editing Packages
Creating and Editing Buffer Pools
Creating and Editing Rollback Segments
Creating and Editing DataBases
Creating and Editing Sequences
Creating and Editing Database Schemas
Creating and Editing Generators
Creating and Editing SQL Procedures
Creating and Editing Functions
Creating and Editing StoGroups
Creating and Editing Materialized Query Tables
Creating and Editing Synonyms
Creating and Editing Materialized Views
Creating and Editing Tablespaces
Creating and Editing Node Groups
Creating and Editing Triggers
See Also
Creating and Editing Relationships
Creating and Editing Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Database_Dependent_Objects&oldid=5080
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Database_Roles,Creating and Editing Database Roles,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
Contents
1
General page/tab
2
System Privileges page/tab
3
Object Privileges page/tab
4
Dependencies page/tab
5
Definition page/tab
6
DDL tab
7
Attachment Bindings tab
8
Notes
9
See Also
A role is a named collection of privileges. In a business setting, roles are defined according to job competency, authority and responsibility. The ultimate intent of creating database roles is to achieve optimal security administration based on the role each individual plays within the organization.
Advantages of effective role creation and application include:
Optimally assigning roles to user privileges.
Identifying users who operate outside the normal pattern.
Detecting and eliminating redundant or superfluous roles or user privileges.
Keeping role definitions and user privileges up-to-date.
Eliminating potential security loopholes and minimizing consequent risks.
By implementing database roles for specific user groups, you can save time by assigning roles to users instead of assigning permissions to each object for each individual user. Database roles enable you to manage the permissions logical model users have to insert, select, update, delete, alter, or reference entities, tables, and views in the logical database. In addition to being supported by tables and views in the physical data model, depending on the database platform, roles also can be applied to select physical models to manage system privileges such as those required to backup databases and logs, or to create databases, defaults, procedures, rules. tables, and views. The system privileges available are database dependent and are listed on page 2 of the Role Wizard and Role Editor.
Database roles are supported in the logical model and by the following physical database platforms:
Microsoft Azure Synapse Analytics
Microsoft SQL Server
Oracle
Snowflake
To add a database role to a model:
In the
Data Model Window
, expand the logical
Main Model
or the
Main Model
of a physical model for which database roles are supported, right-click the
Roles
node, and then click
New Database Role
.
In the
Role Wizard
, assign the permissions desired and then click
Finish
.
The options and permissions available are platform-dependent.
General page/tab
Role Name
: The restrictions for the number of character permitted when defining role names is dependent on the database platform.
The following options specify the specific method used to authorize a user before the role can be enables with the
SET ROLE
statement.
Password
: When selected, specifies that the user is a local user who must specify the password when enabling the role.
Externally
: When selected, specifies that the user is an external user who must be authorized by an external service (such as an operating system or third-party service) to enable the role.
Globally
: When selected, specifies that the user a global user who must be authorized to use the role by the enterprise directory service before the role is enabled or at login.
Not Identified
: When selected, indicates that this role is authorized by the database and no password is required to enable the role.
Add
: When selected, the Select User dialog appears where you can choose the users to assign to the role. CTRL-click to select multiple users. If you have not previously defined a user, the list will be empty.
System Privileges page/tab
Clicking the column name selects the entire column. CTRL-click to select multiple objects individually. The permissions available are dependent on the physical platform selected.
Object Privileges page/tab
Set access privileges for users for objects such as tables and views. Some database platforms also allow detailed access to database objects such as procedures, packages, materialized views, sequences, and functions. Clicking the column name selects the entire column. Control-click to select multiple objects individually.
Dependencies page/tab
If the object associated with the permissions assigned have dependencies, these will be displayed here. Dependencies are SQL code such as functions, triggers, and procedures. For more information, see
Creating and Editing Functions
,
Creating and Editing Triggers
, and
Creating and Editing Procedures
.
Definition page/tab
Enter or edit a definition for the user. Usually used to describe why you are defining the limitations of the user. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL tab
View the
CREATE ROLE
statement needed to build the user, or the
GRANT... ON CONNECT
statement required to establish user privileges when connecting to the database. In physical models, ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the view. If you are adding a view to a logical data model, the default parser AINSI SQL is used unless you change the View Parser in the Logical Model Options to another parser. For more information, see
Defining Model Options for the Selected Model
.
Attachment Bindings tab
Bind an external piece of information, or attachment to the role. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the role before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Notes
To view the roles you create in the Data Model Window, ensure that Display All Security Objects is selected in
View > Diagram
and
Object Display Options > Security Objects
. Reverse-engineered diagrams do not display security objects by default; however, models that you create from scratch display security objects by default.
Once you have created a role, you can assign that role to a particular user in the User Editor or User Wizard.
You can change the permissions assigned to a role in the Role Editor or on the Permissions tab of the Entity Editor or Table Editor. For more information, see
Creating and Editing Entities
and
Creating and Editing Tables
.
Database roles created in the logical model are propagated to the physical model when you generate a physical model that supports database roles.
Depending on the database platform, database roles can provide security for entities, tables, functions, materialized views, packages, procedures, and sequences.
See Also
Creating and Editing Database Users
Associating Database Users with New Database Roles
Associating Database Roles with New Database Users
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Database_Roles&oldid=6240
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Database_Schemas,Creating and Editing Database Schemas,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a Database Schema
2
Object Privilege page/tab
3
Definition page/tab
4
DDL page/tab
5
Attachment Bindings tab
6
See Also
A database schema is a collection of unique objects in a namespace. Schemas allow you to group tables and other related objects together, such as a table and an index. Once the schema has been defined you can
The following database platforms support Schemas:
Amazon Redshift
Databricks
IBM DB2 for LUW 5.x, 6.x, 7.x, 8.x, 9.x, and 10.x
Microsoft Azure Synapse Analytics
Microsoft SQL Server 2005 - 2019
Snowflake
The Database Schema Wizard and Database Schema Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Create a Database Schema
In the Data Model Explorer, expand the Physical
Main Model
, right-click the
Schema
node, and then click
New Database Schema
.
Complete the Database Schema Wizard, and then click
Finish
to create the database schema.
Once you create the schema, you can edit it by right-clicking the schema you want to change, and then selecting
Edit Schema
.
Object Privilege page/tab
Sets access roles and user permissions for the schema. Keep in mind that the more specific permissions you have, the more time you may have to spend maintaining and updating them. The Roles and Users must be previously assigned to appear in the Sequence Editor. For more information about this feature, see
Granting and Revoking Permissions to Modify Database Objects
.
Definition page/tab
Enter or edit a definition for the schema. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE SCHEMA
statement needed to build the schema. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the tablespace.
Attachment Bindings tab
Bind an external piece of information, or attachment to the schema. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the
Selected Attachments
grid, double-click the
Value
field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Granting and Revoking Permissions to Modify Database Objects
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Database_Schemas&oldid=7804
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Database_Users,Creating and Editing Database Users,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
Contents
1
General page/tab
2
System Privileges page/tab
3
Object Privileges page/tab
4
Dependencies page/tab
5
Definition page/tab
6
DDL tab
7
Attachment Bindings tab
8
Notes
9
See Also
Granting database access, authorities, and privileges to users and groups is one of the most important ways to ensure data security.
In conjunction with database roles, users and the permissions you grant them enable you to manage the permissions logical model users have to insert, select, update, delete, alter, or reference entities, tables, and views in the logical database. In addition to being supported by tables and views in the physical data model, depending on the database platform, users also can be applied to specific physical models to manage system privileges such as those required to backup databases and logs, or to create databases, defaults, procedures, rules, tables, and views. The system privileges available are database dependent and display on page 2 of the User Wizard and User Editor.
Database users are supported by the logical data model and are also supported by physical data models for the following platforms:
Amazon Redshift
IBM DB2 for LUW
IBM DB2 for OS/390
IBM DB2 for z/OS
Microsoft Azure Synapse Analytics
Microsoft SQL Server
Oracle
Snowflake
Sybase ASE
The
User Wizard
and
User Editor
share the same options, except for
Attachment Bindings
options which are present only in the editor.
In the
Data Model Window
, expand the
Main Model
of the Logical model, or of a physical model for which database users are supported:
Right-click the
Users
node, and then click
New Database User
to open
User Wizard
.
Right-click an user, and then click
Edit Database User
to open
User Editor
.
In the
User Wizard/User Editor
, assign the permissions desired or make the changes needed and then click
Finish
.
Note:
Options and permissions available are platform-dependant
General page/tab
Not all options are available on all platforms.
Properties
:
User Name
: The restrictions for the number of characters permitted when defining user and group names is dependent on the database platform.
Password
: When selected, specifies that the user is a local user who must specify a password when accessing the database. The password is entered as plain text and is inserted as plain text in the generated CREATE USER DDL statement.
MD5Hash
: When selected, the password is entered in plain text and ER/Studio Data Architect generates the necessary MD5 hash when creating the CREATE USER DDL statement.
disable
: When selected, the
Password
text field is disabled and the
Password Disabled
option is inserted in the generated CREATE USER DDL statement.
Externally
: When selected, specifies that the user is an external user who must be authorized by an external service, such as an operating system or third-party service, to access the database.
Globally
: When selected, specifies that the user is a global user who must be authorized to use the database by the enterprise directory service or at login.
In Group
: Members of a user group automatically inherit group privileges. Privileges granted to a user override the privileges associated with any groups the user is a member of, and are retained if the user is later removed from the groups. Explicit privileges granted to a user must be explicitly revoked.
Roles
:
Add
: When clicked, the
Select Roles
dialog appears where you can select the roles to assign to the user. If you have not previously defined a role, the list will be empty.
Drop
: When clicked, the selected role or roles will be removed for the user.
Tablespace Quota
: On some physical models, you can define tablespace usage parameters (in units of 10KB). This will limit a user's ability to grow a tablespace, but should not be used instead of designed range limits.
The following options are available for Amazon Redshift only
, and are used for generating parts of the CREATE USER DDL statement.
Valid Until
: This would not be validated and would be inserted in the DDL as it is for the VALID UNTIL option.
Create DB
Create User
Syslog Access
Connection Limit
: Is interpreted as UNLIMITED if the checkbox is unchecked.
The following options are available for Snowflake only
, and are used for generating parts of the CREATE USER DDL statement.
Login Name
Password
Display Name
First Name
Middle Name
Last Name
Email
Must Change Password
Disabled
Snowflake Support
Days to Expiry
Minutes to Unlock
Default Warehouse
Default Namespace
Default role
: You can pick from the available roles in the model.
Minutes to Bypass MFA
Disable MFA
Rsa_public_key
Rsa_public_key_2
System Privileges page/tab
Set system privileges for users. Select the specific privilege and then
Grant
or
Revoke
.To select the entire column click on the column name. Press Ctrl and then click to select multiple lines. The permissions available are dependent on the physical platform selected.
Object Privileges page/tab
Set access privileges for users for objects such as tables and views. Some database platforms also allow detailed access to database objects such as procedures, packages, materialized views, sequences, and functions.
Select the specific privilege and then
Grant
or
Revoke
.To select the entire column click on the column name. Press Ctrl and then click to select multiple lines. The permissions available are dependent on the physical platform selected.
Dependencies page/tab
If the object associated with the permissions assigned has dependencies, these will be displayed here. Dependencies are SQL code such as functions, triggers, and procedures. For more information, see
Creating and Editing Functions
,
Creating and Editing Triggers
, and
Creating and Editing Procedures
.
Definition page/tab
Describe why you are defining the limitations of the user. Enter or edit a definition for the user. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL tab
View the DDL code needed to build the user and to establish user privileges when connecting to the database. In physical models, ER/Studio Data Architect uses the platform-specific parser of the selected database platform of the model to generate the view. When adding a view to a logical data model, the default parser AINSI SQL is used unless you change the View Parser in the Logical Model Options to another parser. For more information, see
Defining Model Options for the Selected Model
.
Attachment Bindings tab
Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the database user before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Here you can bind an external piece of information, or attachment to the user. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the selected attachments grid, double-click the
Value
field of the target attachment. ER/Studio Data Architect opens the
Value Override Editor
or a list depending on the attachment datatype.
Notes
In order to view the users in the Data Model Window, ensure that
Display All Security Objects
is selected in
View > Diagram and Object Display Options > Security Objects
. Reverse-engineered diagrams do not display security objects by default; however, models created from scratch do.
If you don't want to assign a role in the moment you are creating the user, you can also assign that user a particular role later using the
User Editor
, the
Role Editor
or the
Role Wizard
. For more information, see
Associating Database Users with New Database Roles
and
Associating Database Roles with New Database Users
.
You can change the permissions assigned to a user in the
User Editor
or on the Permissions tab of the
Entity Editor
or
Table Editor
. For more information, see
Creating and Editing Entities and Tables
.
Database users created in the logical model are propagated to the physical model when you generate a physical model that supports database users.
Depending on the database platform, database users can provide security for entities, tables, functions, materialized views, packages, procedures, and sequences.
See Also
Creating and Editing Database Roles
Associating Database Users with New Database Roles
Associating Database Roles with New Database Users
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Database_Users&oldid=6239
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Entities_and_Tables,Creating and Editing Entities and Tables,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
Entities are logical model objects and represent real objects, such as people, places or things, that are relevant to your enterprise. Entities store data about particular objects that users can query or modify. In their physical implementation, entities become tables, which are the focal point of any database.
The table is the basic unit of a physical data model. IDERA ER/Studio Data Architect facilitates the smooth conversion of databases into physical models for deployment on an SQL database platform. You can populate your data model with tables by importing or reverse-engineering an existing database, generating a new physical model from a logical model, or by adding individual tables as needed. You can make changes to a table at any time using the Table Editor. You can also edit table Columns and Indexes using the Column Editor and Index Editor. respectively.
When you have finished work on an entity or table you can click the ellipsis at the top left-hand corner of the Entity Editor or Table Editor to switch to another entity or table respectively.
Because the entity and table are so closely related, the options available in their editors are often common to both objects.
This section is comprised of the following topics:
Creating and Editing Entities
Creating and Editing Tables
Creating and Editing Attributes and Columns
See Also
Developing the Physical Model
Common Tasks
Creating and Editing Keys
Automatic Naming Translation
Creating Terms
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Entities_and_Tables&oldid=6164
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Functions,Creating and Editing Functions,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a Stored SQL Function
2
Description tab
3
Permissions tab
4
Attachment Bindings tab
5
Notes
6
See Also
Functions are subroutines that you define. Functions can be written in a programming language such as C, COBOL, or Java that returns a scalar value or a complete table, or they can call another function, or they can be written in SQL and return a scalar value. Functions are useful for reusable application logic. You can use functions to determine the best methods for controlling access and manipulation of the underlying data contained in an object. Functions accept a number of parameters and pass a single value back to the calling program. Functions can be used in the database to check the validity of the data being entered. For example, functions can be used to validate zip codes. By invoking a routine with the zip code, the function can return a true or false value based on if the zip code is valid.
You can create a reusable function Function SQL Editor where you can create a function and bind attachments to it. You can also add a Function through the Table Editor - Dependencies tab. They are not associated with a particular table; they are stored in the database.
The following database platforms support SQL functions:
Amazon Redshift
Databricks
IBM DB2 for LUW
Microsoft Azure Synapse Analytics
Microsoft SQL Server
Oracle
PostgreSQL
Snowflake
Sybase ASA, Adaptive Server IQ
Create a Stored SQL Function
In the
Data Model Explorer
, expand the Physical model, right-click the
Functions
node, and then click
New Function
.
Complete the
Function SQL Editor
and then click
OK
to create the function.
Once you have created the function, you can edit it by right-clicking the function you want to change, and then selecting
Edit Function
.
Description tab
Enter or edit a definition for the function. If the target database supports it, ER/Studio Data Architect adds this definition as a table comment when generating SQL code.
Permissions tab
Sets access roles and user permissions for the function. Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them. The Roles and Users must be previously assigned to appear in the Function Editor. For more information, see
Creating and Editing Database Roles
and
Creating and Editing Database Users
.
Attachment Bindings tab
Bind an external piece of information or attachment to the function. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
You can choose to launch your preferred SQL editor when editing functions and procedures. Using the Tools tab of the Options Editor, you can enter the name and location of the SQL editor that will launch and manage the SQL ER/Studio Data Architect outputs. Choose
Tools > Options > Tools > ISQL Path
.
For all new models you can choose:
To display the schema object description or its associated symbol, choose
Tools > Options > Display
and then select the desired display mode.
To hide invalid schema objects, choose
Tools > Options > Schema Objects
and then select
Hide Invalid Schema Object Bitmap
.
For the current data model, you can choose:
To display the schema objects or objects relationships, and object definition or object symbol; choose
View > Diagram And Object Display Options > Schema Object
and then select the desired display options.
What to display when you mouse over a schema object; choose
Tools > Options > Diagram > Schema Object Display
and choose to display the object description or its associated DDL.
See Also
Developing the Physical Model
Creating and Editing Packages
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Functions&oldid=7835
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Generators,Creating and Editing Generators,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
To Create a Generator
2
To Edit a Generator
2.1
Name tab
2.2
Definition tab
2.3
DDL tab
2.4
PreSQL & PostSQL tab
2.5
Attachment Bindings tab
3
See Also
A generator is a sequential number that can be automatically inserted in a column. Generators are typically used for purposes such as ensuring a unique value in a primary key that uniquely identifies an associated row. The Generator wizard lets you create a generator and sets its starting value to zero.
The following database platforms support generator creation.
Interbase 2009, Interbase XE, Interbase XE3, Firebird 1.5, Firebird 2.x.
Note:
The Bufferpool Wizard and Bufferpool Editor share the same options, except for
PreSQL & PostSQL
and
Attachment Bindings
options, which are present only in the editor.
To Create a Generator
In the
Data Model Explorer
, expand an InterBase physical model, and then click
New Generator
.
Complete the steps on the
Generator Wizard
and then click
Finish
to create the buffer pool.
To Edit a Generator
Once you have created the generator, you can edit it by right-clicking the generator you want to change, and then selecting
Edit Generator
.
The following helps you complete the tabs on the
Generator Editor
:
Name tab
Provide a name for a new generator or edit the name of an existing generator.
Definition tab
Provide a description for the generator. It will be visible in the model.
DDL tab
Displays the
CREATE GENERATOR
statement needed to build the generator. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the generator DDL.
PreSQL & PostSQL tab
Lets you enter SQL to be applied before or after the
CREATE GENERATOR
statement. The PreSQL and PostSQL scripts entered here are included in the script when you generate the physical database.
Attachment Bindings tab
Bind an external piece of information, or attachment to the generator. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Attaching External Documents to the Data Model
Creating and Editing SQL Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Generators&oldid=5088
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Keys,Creating and Editing Keys,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
Contents
1
Create a Primary Key
2
Create an Alternate Key or Inversion Entry
3
Create a Foreign Key/Relationship
4
Specify FK Attribute Name and Datatype
5
See Also
The purpose of keys in a database is to enforce unique values in an entity and provide a means of sorting the tables to access entity data faster.
In a relational database, there are four types of keys:
Primary Key
: A primary key or unique key is a candidate key to uniquely identify each row in a table. A primary key comprises a single column or set of columns where no two distinct rows in a table can have the same value (or combination of values) in those columns. Depending on its design, a table can have many unique keys but at most one primary key. A unique key must uniquely identify all possible rows that exist in a table and not only the currently existing rows, such as social security numbers. A primary key is a special case of a unique key in that for unique keys the implicit NOT NULL constraint is not automatically enforced, while for primary keys it is. The values in a unique key column may or may not be NULL. Unique keys as well as primary keys can be referenced by foreign keys.
Alternate Key
: Alternate keys are the equivalent to unique index or unique constraints in the physical model. You can enforce alternate keys with unique indexes or unique constraints, depending on the database platform
Inversion Entry
: An attribute or set of attributes that does not uniquely identify every instance of an entity, but which are frequently used for access. The database implementation of an inversion entry is a non unique index.
Foreign Key
: A primary key or non-key attribute that is inherited from another entity.
ER/Studio Data Architect can reverse-engineer key definitions that are not primary key or unique constraints, from a database. You can create primary, inversion, or alternate keys using the Key Editor, which is accessible from the Entity Editor.
For more information, see the following:
Create a Primary Key
Create an Alternate Key or Inversion Entry
Create a Foreign Key/Relationship
Create a Primary Key
In the
Data Model Explorer
, expand the Logical
Main Model
, expand the
Entities
node, and then double-click the entity to which you want to add keys.
To change an existing attribute to a primary key
, in the
Entity Editor
, click an attribute you want to make a key and then click
Edit
.
To create a primary key based on a new attribute,
the
Entity Editor
, click
Add
and define the entity properties as required.
On the
Attributes
tab, click
Add to Primary
and then click
OK
and exit the
Entity Editor
.
Create an Alternate Key or Inversion Entry
In the
Data Model Explorer
, expand the Logical
Main Model
, right-click the
Entities
node, and then double-click the entity to which you want to add keys.
To change the properties of an existing attribute
, In the
Entity Editor
, click an attribute you want to make a key and then click
Edit
.
To create an alternate key or inversion entry based on a new attribute
, in the
Entity Editor
, click
Add
and define the entity properties as required.
On the
Keys
tab, click
Add
.
In the
Key Editor
, type a name for the key and select the type of key you want to create.
From the list of
Available Keys
, which are all the attributes of the entity, double-click the attributes you want to add to the key.
You can reorder the attributes by selecting an attribute and then pressing Up or Down until the attribute is in the desired position within the list of Selected Keys.
Click
OK
to accept the attribute selections and then click
OK
again to affect the changes to the entity.
Attachment Bindings
tab: Bind an external piece of information, or attachment to the key. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Note:
You can prevent a key from being implemented when generating a physical model or SQL, by selecting Logical Only on the Keys tab.
To modify the properties of a foreign key attribute, you must alter the corresponding primary key column in the originating parent table.
To preserve domain consistency, ER/Studio Data Architect only lets you change the column name of foreign keys. To modify other properties of a foreign key column, you must alter the corresponding primary key column in the originating parent table.
Create a Foreign Key/Relationship
Foreign keys are created when you establish relationships between entities. The primary key of the parent object becomes the foreign key of the child object. Foreign keys are not displayed in the entity boxes in the Data Model Window when using Filtered IE (No FKs) but are displayed using all other notation types. For more information, see
Working with Relationships
.
Specify FK Attribute Name and Datatype
By default, the foreign keys inherit their names from the primary key of the parent object; however, you can choose to provide another name for the foreign key using the Logical Rolename.
Double-click the entity you want to change. ===
Click the foreign key in the attributes list and then click
Edit
.
Enter a
Logical Rolename
and then select
Synchronize Column Rolename with Logical Rolename
.
Click
Save
.
The child now displays the logical rolename of the foreign key.
Similarly, you can specify a different datatype for the foreign key.
Double-click the entity and from the
Entity Editor
, select the foreign key from the attributes list and then click
Edit
.
Select
Edit Foreign Key Datatype
and then make the necessary changes to the datatype.
Click
Save
.
See Also
Developing the Physical Model
Common Tasks
Creating and Editing Entities and Tables
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Keys&oldid=5090
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Materialized_Query_Tables,Creating and Editing Materialized Query Tables,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Add a Materialized Query Table
2
Name page/tab
3
Location page/tab
4
SQL page/tab
5
Definition page/tab
6
DDL page/tab
7
Attachment Bindings tab
8
Notes
9
See Also
A materialized query table is a table that, like a materialized view, is defined based upon the result of a query addressing one or more tables. While the query on which a view is based is run whenever the view is referenced, a materialized query table stores the query results as data that you can work with instead of the data that is in the underlying tables.
Materialized query tables can significantly improve query performance, especially for complex queries.
The following database platforms support Materialized Query Tables:
IBM DB2 for LUW 5.x, 6.x, 7.x, 8.x, 9.x, and 10.x
Note:
The DB2 Materialized Query Table Wizard and DB2 Materialized Query Table Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Add a Materialized Query Table
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Materialized Query Table
node, and then click
New Materialized Query Table
.
Complete the
DB2 Materialized Query Table Wizard
and then click
Finish
to create the
materialized query table
.
Tip:
Once you have created the materialized query table, you can edit it by right-clicking the materialized query table you want to change, and then clicking Edit Materialized Query Table.
Name page/tab
The name of the materialized query table is derived from the information entered here, in the format of
owner
.
name
where:
owner
is the owner of the materialized query table.
name
is the name of the materialized query table.
Location page/tab
What is the table tablespace
: To avoid the performance overhead created by logging changes to the data, create materialized query tables in a table space that is defined as NOT LOGGED.
Refresh Preferences
: Determines when the materialized query table is update when its base tables are updated.
Query Optimization
: If enabled, DB2 can consider the materialized query table in automatic query rewrite. When query optimization is enabled, DB2 is more restrictive of what can be selected in the full select for a materialized query table.
SQL page/tab
Enter the entire select statement for the materialized view, starting with the keyword
SELECT
.
Definition page/tab
Enter or edit a definition or description for the materialized view. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE SUMMARY TABLE AS... (SELECT...)
statement needed to build the node group. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the materialized query table.
Attachment Bindings tab
Bind an external piece of information, or attachment to the materialized query table. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Notes
The materialized query table is not populated when first created. You must explicitly populate the materialized query table using the REFRESH TABLE statement for system-maintained materialized query tables or by using the LOAD utility, INSERT statement or the REFRESH TABLE statement for user-maintained materialized query tables.
See Also
Attaching External Documents to the Data Model
Creating and Editing Materialized Views
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Materialized_Query_Tables&oldid=5091
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Node_Groups,Creating and Editing Node Groups,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a Node Group
2
Name page/tab
3
Definition page/tab
4
DDL page/tab
5
Attachment Bindings tab
6
See Also
A node group is a named set of one or more database partitions. A node group can have 2 to 32 nodes defined for it. The number of nodes that is defined for the node group determines the number of systems across which the database file is created.
You may need to create a node group when you want the database files to be visible across a set of System i models in a load sharing and balancing environment. Nodegroups enable workload to be processed in parallel across a partitioned database for large tables, while smaller tables can be stored on one partition or on a small number of partitions if desired.
The following database platforms support node groups:
IBM DB2 for LUW 5.x, 6.x, 7.x, 8.x, 9.x, 10.x
Note:
The DB2 Nodegroup Wizard and DB2 Nodegroup Editor share the same options, except for Attachment Bindings options which are defined in the editor only.
Create a Node Group
In the
Data Model Explorer
, expand the physical
Main Model
, right-click the
Node Groups
node, and then click
New Nodegroup
.
Complete the
Node Groups Wizard
and then click
Finish
to create the
node group
.
Tip:
Once you have created the auxiliary table, you can edit it by right-clicking the node group you want to change, and then clicking Edit Node Group.
Name page/tab
What is the name of the NodeGroup?
The name must not begin with SYS or IBM.
Enter the nodes (partitions) to include
: Specify the partition number(s). This must be a valid partition number between 0 - 999
Definition page/tab
Enter or edit a definition for the node group. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE NODEGROUP
statement needed to build the node group. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the node group.
Attachment Bindings tab
Bind an external piece of information, or attachment to the node group. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Attaching External Documents to the Data Model
Creating and Editing Object Types
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Node_Groups&oldid=5093
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Object_Types,Creating and Editing Object Types,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create an Object Type
2
Header and Body tab
3
Description tab
4
Attachment Bindings tab
5
See Also
Types define an abstract data type or object composed of a collection of similar types of data. For example, you can create an object type that defines a full address rather than the pieces of an address, such as city, state and postal code in this case the object type stores the pieces of an address as a single type, in the same location and the full address can be accessed and manipulated as single unit rather than multiple units. You could also use an object type to create a purchase order object that includes a method to sum the cost of all purchased items.
Object types are useful for ensuring uniformity and consistency as they are defined as single encapsulated entity that can be reused in other object types and objects. They also offer flexibility by allowing for the creation of objects that represent real-world situations which is limited in relational objects.
Once created, you can use an object type as a datatype in a table.
You can create the following object types:
Incomplete
: Specifies no attributes or methods and can be used for circular references such as person - female. It lets the type be referenced before it is complete. Incomplete types can also be used to create types that contain REF attributes to a subtype that has not yet been created. To create such a supertype, first create an incomplete type of the subtype to be referenced and then create the complete subtype after you create the supertype.
A subtype is a specialized version of its direct supertype with an explicit dependency on it. To ensure that subtypes are abandoned after a supertype is dropped, drop all subtypes first; a supertype cannot be dropped until all its subtypes are dropped.
Complete
: An incomplete type can be completed by executing a
CREATE TYPE
statement that specifies the attributes and methods.
VARRAY
: Used to store small sets of related data. For example, if you have ten offices (each one with a different description) at a particular division in your company, you could create a VARRAY of 10 to hold the details of these offices. The values for a VARRAY type must be fixed and known and be small values because they are stored in RAW format.
Nested Table
: Used when data is repeated for the same entity an unknown number of times and storage is a concern.
A combination of complete, varray, and nested table types.
The following database platforms support object types:
Oracle 8.x and later
Create an Object Type
In the
Data Model Explorer
, expand the physical
Main Model
, right-click the
Object Types
node, and then click
New Object Type
.
Complete the tabs of the
Object Type Editor
and then click
OK
to create the object type.
TIP:
Once you have created the
object type
, you can edit it by right-clicking the object type you want to change, and then clicking Edit Object Type.
The Object Type Editor includes find and replace functionality for working with SQL text strings.
The following describe options that require additional explanation:
Header and Body tab
Enter the SQL to create the object type. The SQL generated from each these tabs will appear in their own SQL blocks.
Description tab
Enter or edit a description for the object type.
Attachment Bindings tab
Bind an external piece of information, or attachment to the object type. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Creating and Editing Relationships
Creating and Editing Columns
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Object_Types&oldid=5946
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Packages,Creating and Editing Packages,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
Contents
1
Create a Package
2
Header tab
3
Body tab
4
Definition tab
5
Attachment Bindings tab
6
Permissions tab
7
See Also
A package is a group of procedures, functions, variables, and SQL statements, used to store together related objects. Packages contain all the information needed to process SQL statements from a single source file. You can use packages to process and call batches of SQL. They are not associated with a particular table; they are stored in the database.
The following database platforms support packages:
Oracle
Create a Package
In the
Data Model Explorer
, expand the Logical
Main Model
, right-click the
Packages
node, and then click
New Package
.
Complete the
Package Editor
and then click
OK
to create the
package.
Tip:
Once you have created the auxiliary table, you can edit it by right-clicking the package you want to change, and then clicking Edit Package.
The Package Editor includes find and replace functionality for working with SQL text strings.
The following helps you complete the options of the
Package Editor
:
Header tab
The header contains the package specification. Here you can declare types, variables, constants, exceptions, cursors and subprograms. The header does not contain any code. You can specify a package that contains only global variables that will be used by subprograms or cursors. This type of package declares only types, constants, variables, exceptions, and call specifications and does not require a package body.
Body tab
The package body provides the implementation for the subprograms and the queries for the cursors declared in the header.
Definition tab
Enter or edit a definition for the package. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
Attachment Bindings tab
Bind an external piece of information, or attachment to the package. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Permissions tab
Sets access roles and user permissions for the package. Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them. The Roles and Users must be previously assigned to appear in the Package Editor. For more information, see
Creating and Editing Database Roles
and
Creating and Editing Database Users
.
See Also
Creating and Editing Database Roles
Creating and Editing Database Users
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Packages&oldid=5930
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_PreSQL_and_PostSQL_for_the_CREATE_TABLE_Statement,Creating and Editing PreSQL and PostSQL for the CREATE TABLE Statement,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
In the PreSQL & PostSQL tab of the Table Editor you can enter SQL procedures to be applied before and after the CREATE TABLE statement.
The SQL in the procedure will be validated in context of the table selected and the database platform.
In the
Data Model Window
or
Data Model Explorer
, double-click a table to launch the
Table Editor
.
Click the
PreSQL & PostSQL
tab.
Enter or edit an SQL procedure to run before the
CREATE TABLE
statement.
Click the
PostSQL
tab and then enter or edit an SQL procedures to run before the
CREATE TABLE
statement.
Click
OK
to implement the changes and exit the editor.
See Also
Developing the Physical Model
Create a Scripted Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_PreSQL_and_PostSQL_for_the_CREATE_TABLE_Statement&oldid=5096
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Procedures,Creating and Editing Procedures,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
Procedures are reusable blocks of PL/SQL stored in the database that applications can call. Procedures streamline code development, debugging, and maintenance by being reusable. Procedures enhance database security by letting you write procedures granting users execution privileges to tables rather than letting them access tables directly. Also, procedures can increase the efficiency of your database. They can consolidate and centralize logic that might otherwise have existed in multiple applications that access the same database, making the code easier to maintain. Because the procedure executable is the only part stored on the server, decreasing its storage requirements, and the procedure is executed on the server, reducing network traffic.
Procedures are similar to functions except that functions can be used within SQL statements, whereas procedures must be invoked using the
CALL
statement.
ER/Studio Data Architect supports the following procedure types:
Regular or scripted procedures:
Specific to the table on which they are created. You can write scripted procedures in SQL You can create a scripted procedure through the Table Editor - Dependencies Tab or though the Procedure SQL Editor, which you can access by double-clicking the procedure name in the Procedures node of the Data Model Explorer.
Templated Procedures
: Specific to the table on which they are created or modified. You can write templated procedures in BASIC. Once created, they do not appear in the list of procedures on the
Procedures
node of the
Data Model Explorer
.
Reusable procedures
: Created in the data dictionary, reusable procedures can become templated if they are modified through the Table Editor. You can write templated procedures in BASIC. Reusable procedures are templated procedures written in BASIC code. These procedures can be applied to any table, since they use the table's context in the code. The Reusable Procedure node in the Data Dictionary includes DBMS platform nodes. ER/Studio Data Architect organizes reusable procedures by platform. When you want to create, edit, or delete a reusable procedure, right-click the target DBMS node and then click the appropriate short cut menu.
The following database platforms support Procedures:
Amazon Redshift
IBM DB2 for LUW
InterBase
Microsoft Access
Microsoft Azure Synapse Analytics
Microsoft SQL Server
Oracle
PostgreSQL
Snowflake
Sybase ASA
Sybase Adaptive Server IQ
Sybase ASE
The
Northwind.dm1
sample model illustrates how procedures can be used to gather information and perform computations on them to provide summary information.
Notes
You can view the
templated
procedures associated with a table on the Dependencies tab of the Table Editor.
You can view the scripted procedures you create under the Procedures tab of the node.
In order for code to be generated for procedural logic such as triggers and procedures, the results of the code must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
See Also
Creating and Editing Database Dependent Objects
Creating and Editing SQL Procedures
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Procedures&oldid=6237
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Recursive_Relationships,Creating and Editing Recursive Relationships,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Relationships
A recursive relationship associates an object with itself; the object is both the parent and child. For example, you can have an employee who manages many employees and each employee is managed by one employee. The employee entity has a recursive relationship to itself.
If you have a recursive relationship, you must assign rolenames to the relationship. Use the Recursive Relationship dialog to specify rolenames for a foreign key that is inherited more than once within the same entity. For example, if a recursive relationship is created where one entity is designated as both the parent and child entity, then the primary key is propagated within the entity. ER/Studio Data Architect automatically opens the Recursive Relationship dialog box when it detects overlapping foreign keys in an entity.
The steps for adding recursive relationships are slightly different from adding regular relationships; however, you can for edit and delete recursive relationships in the same manner as for regular relationships.
Choose
Insert > Insert Relationship
, and then select a non-identifying relationship type.
On the Data Model Window, click the object to which you want to apply the recursive relationship, and then click it again.
Complete the
Recursive Relationship
or
Recursive Relationship for Multiple Keys
dialog box, and then click
OK
.
Right click anywhere on the Data Model to revert to the
Selection
tool.
Notes
If you have a recursive relationship, the Recursive Relationship editor appears where you must assign a rolename to the primary key or to at least one attribute of the primary key. The rolename cannot be the same as the attribute or column name. In order for the foreign key to appear in the child, it must be assigned a rolename so it can be differentiated it from the native key.
If you have a recursive relationship where multiple foreign keys that are inherited more than once within the same entity, the
Recursive Relationship for Multiple Keys
dialog display where you specify rolenames for each foreign keys. For example, if a recursive relationship is created, where one entity is designated as both the parent and child entity, then the primary keys are propagated within the entity.
Edit the rolenames associated with the relationship by right-clicking the relationship in the Data Model Window, and then selecting
Edit Rolenames
.
Navigate between the parent and child object by right-clicking the object and then selecting
Navigate to Parent
or
Navigate to Child
from the shortcut menu.
See Also
Creating and Editing Relationships
Creating Subtype Cluster Relationships
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Recursive_Relationships&oldid=5098
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Rollback_Segments,Creating and Editing Rollback Segments,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create or Edit a Rollback Segment
2
Name tab
3
Storage tab
4
Definition tab
5
DDL tab
6
Attachment Bindings tab
7
See Also
Rollback Segments allow you to undo, or rollback, DML transactions such as SQL deletes, inserts, and updates that have been executed on a database. A rollback segment entry contains information about the database records before they were modified by a transaction.
The following database platforms support rollback segments:
Oracle
Create or Edit a Rollback Segment
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Rollback Segments
node, and then click
New Rollback Segment
.
Complete the
Rollback Segments Wizard
and then click
Finish
to create the
Rollback Segment
.
TIP:
: Once you have created the auxiliary table, you can edit it by right-clicking the rollback segment you want to change, and then clicking Edit Rollback Segments.
Name tab
Should this rollback segment be made public?
This option only applies to a database operating in a parallel server environment. A public rollback segment can be brought online by any instance of the database in a parallel server environment. A private rollback segment can only be brought online by the database instance that has the rollback segment specified in its initialization file.
Storage tab
What extent sizes do you want to assign to this rollback segment?
The before-image details for multiple transactions can be recorded in one rollback segment but each transaction must fit entirely into one segment and the blocks of a rollback segment are not overwritten until the transaction that wrote to those blocks has been committed. You must therefore, ensure the rollback segment is big enough to hold all the information for the longest running query without wrapping and is big enough to hold the undo information for the
largest transaction
x
number of concurrent transactions
÷
number of rollback segments.
The default extent size is the size of 5 data blocks. The default minimum extent size is the size of 2 data blocks. The maximum extent size varies by operating system.
Optimal Size
: The optimal extent size cannot be less that the space initially allocated for the rollback segment.
What are the minimum and maximum number of extents...?
The default minimum number of extents is 2.The default maximum number of extents varies by operating system.
Definition tab
Enter or edit a definition for the rollback segment. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL tab
Displays the
CREATE ROLLBACK SEGMENT
statement needed to build the rollback segment. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the rollback segment.
Attachment Bindings tab
Bind an external piece of information, or attachment to the rollback segment. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Attaching External Documents to the Data Model
Developing the Physical Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Rollback_Segments&oldid=5931
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_SQL_Procedures,Creating and Editing SQL Procedures,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
SQL procedures are reusable blocks of PL/SQL that you create, which are stored in the database. Applications can call procedures to streamline code development, debugging, and maintenance. Procedures can also enhance database security by letting you write procedures granting users execution privileges to tables rather than letting them access tables directly.
Stored procedures can contain program flow, logic, and database queries. They can accept and generate parameters, return single or multiple result sets, and return values.
In addition to doing anything that can be accomplished with SQL statements, stored procedures can also:
Execute a series of SQL statements in a single stored procedure.
Reference other stored procedures, which can simplify a series of complex statements.
Execute faster than individual SQL statements because the stored procedure is compiled on the server when it is created.
Be cached in memory, for faster execution.
There are several ways that you can implement SQL procedures:
SQL that runs before or after creating an object. For more information, see
Creating and Editing PreSQL and PostSQL for the CREATE TABLE Statement
Scripted and templated procedures that can store application code into the database for all applications to used via the CALL statement. For more information, see
Creating and Editing Procedures
.
Scripted and templated triggers that enforce referential integrity rules; enforce business rules on table data; synchronize information in another table when a table is updated; initiate an action external to the DBMS when an update occurs; and prevent some types of operations, such as UPDATEs. For more information, see
Creating and Editing Triggers
.
Functions that can execute multiple SQL statements from within an SQL statement. For more information, see
Creating and Editing Functions
.
Packages that can store together all the code necessary to process SQL statements from a single source file. You can use packages to process and call batches of SQL. For more information, see
Creating and Editing Packages
.
This section also covers the following:
Creating and Editing PreSQL and PostSQL for the CREATE TABLE Statement
Creating and Editing Procedures
Create a Scripted Procedure
Apply a Scripted Procedure to a Submodel or Model
Create Reusable Procedure
Create a Scripted User-Defined Procedure
Create a Templated User-Defined Procedure
Bind a Reusable Procedure to a Table
Create an SQL Procedure
Import an SQL Procedure
Export an SQL Procedure
See Also
Creating and Editing Database Dependent Objects
Developing the Physical Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_SQL_Procedures&oldid=5101
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Sequences,Creating and Editing Sequences,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create or edit a Sequence
2
Name page/tab
3
Numbers Page/Tab
4
Options page/tab
5
Definition page/tab
6
DDL page/tab
7
PreSQL & PostSQL page/tab
8
Attachment Bindings page/ tab
9
Permissions page/tab
10
See Also
Sequences are used to generate a series of integer values according to rules defined in the sequence. Database sequences are generally are used to create primary keys; they can also be used to generate random numbers.
The following database platforms support sequences:
IBM DB2 for LUW
Microsoft SQL Server
Oracle
Snowflake
Note:
The
Sequence Wizard
and
Sequence Editor
share the same options, except for Attachment Bindings options which are present only in the editor.
Create or edit a Sequence
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Sequences
node, and then select
New Sequence
.
Complete the
Sequences Wizard
and then click
Finish
to create the sequence.
Tip:
Once you have created the sequence, you can edit it by right-clicking the sequence you want to change, and then clicking Edit Sequence.
Name page/tab
If you have already defined users for the selected database, you can click the list and choose a defined user for the sequence owner. Depending on the platform, you can also select a datatype for the sequence.
Numbers Page/Tab
Lets you specify
The starting number for the sequence.
The increment interval value for the sequence.
The maximum value that can be generated for the sequence and the minimum value for the sequence.
Options page/tab
Cycling
: If you have specified a
Maximum Value
on the previous page/tab, you can choose to cycle the values.
Ordering
(DB2 and Oracle): Specify whether or not the sequence numbers must be generated in order of request. SQL Server 2012 does not support ordering
Cache
: Consider the following performance and application requirements trade-offs when choosing to enable the cache and the optimal cache size:
Caching sequence numbers enables a range of sequence numbers to be kept in memory for fast access. If the next sequence number can be allocated from cache, number allocation can happen quickly; however, if the next sequence number cannot be allocated from cache, the application may have to wait for I/O operations to complete.
Not caching sequence values ensures that there is no loss of values in the event of a system failure, shutdown or database deactivation. The values of the sequence are not stored in the cache and every sequence request results in synchronous I/O to the log.
Definition page/tab
Enter or edit a definition for the sequence. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the CREATE SEQUENCE statement needed to build the sequence. ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the sequence.
PreSQL & PostSQL page/tab
Lets you enter SQL to be applied before or after the
CREATE SEQUENCE
statement. If you select Generate, the PreSQL and PostSQL scripts entered here are included in the script when you generate the physical database.
Attachment Bindings page/ tab
Bind an external piece of information, or attachment to the sequence. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
Permissions page/tab
Sets access roles and user permissions for the sequence. Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them. The Roles and Users must be previously assigned to appear in the Sequence Editor. For more information, see
Granting and Revoking Permissions to Modify Database Objects
.
See Also
Attaching External Documents to the Data Model
Creating and Editing Tables
Granting and Revoking Permissions to Modify Database Objects
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Sequences&oldid=5929
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Shapes,Creating and Editing Shapes,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Shape Text tab
2
Colors and Fonts tab
3
Attachment Bindings tab
4
See Also
Drawing shapes are supported in the data model window of the logical model and in physical models for all database platforms supported by ER/Studio Data Architect. You can also use shapes on the data lineage diagram window.
Drawing shapes have no fixed meaning in your diagrams, so you can determine how they are used and interpreted. There are three, primary uses for drawing shapes:
Unique Representation
: Drawing shapes can represent schema objects in your model that are not commonly represented by regular ER notation. For example, using ER/Studio Data Architect's drawing shapes, you can add objects in a physical model to represent Java classes. Such objects can ultimately have crucial meaning to your database design.
Notation
: The note drawing shape enables you to document special circumstances that exist in your diagrams. Because the contents of the note drawing shape are displayed in the Data Model Window, they are more easily seen than entity notes or table notes, which are buried in the entities and tables themselves.
Containment
: Enabling containment embeds entities and tables within the drawing shapes, essentially locking the tables and entities to the drawing shapes. When you move the drawing shape, the entities and tables follow, maintaining their positions within the drawing shape. Containment is particularly useful when you want to isolate entities and tables, making those entities and tables more obvious. Similarly, you can use containment to keep objects together that share a certain importance so can you move these shared objects in unison when you move the drawing shape.
On the
Drawing Shapes
toolbar, click the icon for the shape you want to insert.
On the Data Model Window or Data Lineage Window, click the mouse where you want to add the shape.
Double-click the shape to launch the
Shape Editor
, where for example, you can add text and change the color of the shape.
Shape Text tab
You can adjust the text positioning choices either with the Horizontal Justification and Vertical Justification drop-down menus or by clicking one of the nine squares in the adjacent grid.
With Fit Shape selected, the shape is automatically resized to fit the shape text. With this option selected, Wrap Text is disabled, and the object cannot be resized by dragging its outline handles.
Colors and Fonts tab
Here you can change the shape type (e.g. oval to rectangle).
Attachment Bindings tab
Bind an external piece of information, or attachment to the shape. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Overriding Color and Font Settings for a Specific Object
Changing the Model Background
Creating Entity Relational or Dimensional Models
Adding and Editing Lines
Locking Data Model Objects to a Drawing Shape
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Shapes&oldid=5103
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_StoGroups,Creating and Editing StoGroups,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a StoGroup
2
Options page/tab
3
Definition page/tab
4
DDL page/tab
5
Attachment Bindings tab
6
See Also
A StoGroup is a set of volumes on direct access storage devices (DASD) that hold the data sets in which tables and indexes are stored. The
CREATE STOGROUP
statement creates a storage group on the current server. You can then allocate storage from the identified volumes for table and index spaces. Different parts of a single database can be stored in different StoGroups.
If a dataset reaches its maximum number of extents, any transaction that writes data to tables or indexes associated with that stogroup fails and the database can become inaccessible until more space is allocated to the stogroup. It is important to allocate sufficient storage for the database and to monitor its growth carefully. For information on capacity planning, see
Planning for and Predicting Database Growth
.
You can use stogroup you create to define storage for the index of an auxiliary table or a table, or storage for a tablespace. For more information, see
Creating and Editing Auxiliary Tables
,
Defining Index Storage
, and
Creating and Editing Tablespaces
.
The following database platforms support StoGroups:
IBM DB2 for z/OS 5.x, 6.x, 7.x, 8.x, 9.x, 10.x, and 11.x
The StoGroups Wizard and StoGroups Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Create a StoGroup
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Entities
node, and then click
New Stogroup
.
Complete the
StoGroup Wizard
and then click
Finish
to create the
stogroup
.
Once you have created the stogroup, you can edit it by right-clicking the stogroup you want to change, and then clicking Edit StoGroup.
The following help you complete the
StoGroup Wizard
options:
Options page/tab
What is the name of the Stogroup?
The stogroup name must identify a storage group that does not yet exist at the current server.
VCAT
: Specify the integrated catalog facility catalog for the storage group. Specify an alias if the name of the VCAT is longer than 8 characters.
Enter the volumes to include in the Stogroup, separated by commas
: Includes the specified volumes in the StoGroup. To include all volumes in the stogroup, enter an asterisk (*).
Definition page/tab
Enter or edit a definition for the stogroup. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE STOGROUP
statement needed to build the stogroup.ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the stogroup.
Attachment Bindings tab
Bind an external piece of information, or attachment to the stogroup. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Planning for and Predicting Database Growth
Developing the Physical Model
Creating and Editing Auxiliary Tables
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_StoGroups&oldid=5104
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Submodels,Creating and Editing Submodels,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
Contents
1
Edit Submodel tab
2
Attributes tab
3
Definition tab
4
Attachment Bindings tab
5
Security Information tab
6
Notes
7
See Also
ER/Studio Data Architect lets you create independent views of all or part of your logical or physical models called submodels. Submodels can focus attention on specific characteristics of a model and can facilitate faster data access. Any changes to submodel objects, except object deletions, automatically propagate to the main model. When deleting a submodel object, you have the option to apply the change to the main model or to only delete the object from the submodel. You can create any number of submodels within your data model and can nest any number of submodels within a submodel.
In addition to creating submodels of models, with ER/Studio Data Architect you can derive a submodel from a submodel and then display the submodel relationships by nesting submodel folders in the Data Model Explorer.
ER/Studio Data Architect automatically includes relationships between objects if related objects are part of the submodel. You can edit the submodel to include or exclude specific relationships. When you add a relationship, ER/Studio Data Architect automatically includes the corresponding parent table in the submodel definition.
On the Data Model Window or Data Model Explorer, select one or more objects to include in the submodel.
Tip:
CTRL-click to select multiple objects.
Choose
Model > Create Submodel
.
In the
Create
Submodel dialog, enter a name for the submodel.
From the list of objects,
CTRL-click
to select the objects to add to the submodel and then press the right arrow to add the selected objects to the submodel.
Click
OK
to create the submodel.
Once you are finished creating a submodel, ER/Studio Data Architect adds the submodel to the
Data Model Explorer
and displays the model in the Data Model Window.
Edit Submodel tab
Click
Select Related Objects
to add parent and child entities and dependent views or procedural logic.
If you select
Inherit Objects Added to Nested Submodels
, any objects you later add to submodels nested within the model or submodel will automatically be also added to the model.
Attributes tab
Lets you choose which attributes of the entities selected on the
Edit Submodel
tab to include in the submodel. If you deselect an attribute, ER/Studio Data Architect can display an elipsis to indicate that not all attributes are displayed. For more information, see the Entity or Table tab description in
Customizing the Display of Diagrams and Objects
.
Definition tab
Enter or edit a definition for the submodel.
Attachment Bindings tab
Bind an external piece of information, or attachment to the submodel. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the
Value
field of the target attachment. ER/Studio Data Architect opens the
Value Override Editor
or a list depending on the attachment datatype. Attachments are created in the
Attachments
folder of the
Data Dictionary
. For more information, see
Attaching External Documents to the Data Model
.
Security Information tab
Displays the current security information as defined in the Data Dictionary. You can add or edit security reporting information in by double-clicking the field you want to change. To set the model-wide default value for a property, go to the Data Dictionary tab and expand the Data Security Information node. For more information, see
Enforcing Security Using Data Security Types and Properties
.
Notes
If you select a submodel to add to the new submodel, then all objects belonging to the source submodel will be added to the new submodel.
Deleting an object from a submodel does not delete the object from the Main model unless you select the Delete from Model option in the Delete dialog.
Once you have created a submodel, you can add objects to it by right-clicking an object in the main model or in another submodel and then selecting Apply to Submodel(s) from the shortcut menu. In the dialog that appears you can select which submodels to add the object to.}}
See Also
Using the Submodel Synchronization Utility
Synchronizing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Submodels&oldid=5105
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Editing_Synonyms,Creating and Editing Synonyms,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Dependent Objects
Contents
1
Create a Synonym
2
Name page/tab
3
Reference page/tab
4
Definition page/tab
5
DDL page/tab
6
Attachment Bindings tab
7
See Also
A synonym is an alternate name for a database object that lets you:
Reference an object without specifying its owner (The synonym definition references the owner, but to use the synonym thereafter you do not have to know the owner name.)
Reference a remote object without specifying its database.
Alias an object so its purpose becomes more obvious.
The following database platforms support Synonyms:
IBM DB2 for OS/390
IBM DB2 for z/OS
Microsoft SQL Server
Netezza
Oracle
Note:
The Synonym Wizard and Synonym Editor share the same options, except for Attachment Bindings options which are present only in the editor.
Create a Synonym
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Synonyms
node, and then select
New Synonym
.
Complete the
Synonyms Wizard
and then click
Finish
to create the synonym.
Tip:
Once you have created the
synonym
, you can edit it by right-clicking the
synonym
you want to change, and then clicking Edit Synonym.
The options available depend on the database platform selected.
Name page/tab
Make this synonym accessible to all users?
If selected, creates a
public synonym
that can be used by everyone in the database, otherwise a
private synonym
is created that belongs to the synonym owner.
Reference page/tab
What type of object does this synonym reference?
The list of objects available depends on the selected database platform.
IBM DB2 for OS/390: Supports synonyms for aliases, synonyms, tables, unknown, and views.
IBM DB2 for z/OS: Supports synonyms for aliases, synonyms, tables, unknown, and views.
Microsoft SQL Server 2008 and earlier: Supports synonyms for functions, procedures, and views.
Microsoft SQL Server 2012 and later: Supports synonyms for sequences.
Netezza: Supports synonyms for tables and views.
Oracle: Supports synonyms for functions, materialized views, object types, packages, procedures, sequences, synonyms, tables, and views.
If you specify Unknown, the object type will change to correspond to the type of object named below.
What is the schema of the referenced object? What is the name of the referenced object?
The list is populated with the names of all the objects in the model matching the model type specified as the type of object. But you can also enter your own value in this field.
Who is the owner of the referenced object? What is the name of the referenced object?
The list is populated with the names of all the objects in the model matching the model type specified as the type of object. But you can also enter your own value in this field.
If the object is on a remote database, please enter the DB link.
Type the path of the remote database, or click the list and select it.
Definition page/tab
Enter or edit a definition for the synonym. If the target database supports it, ER/Studio Data Architect adds this definition as a comment when generating SQL code.
DDL page/tab
Displays the
CREATE SYNONYM
statement needed to build the synonym. In physical models, ER/Studio Data Architect uses the platform-specific parser of the model's selected database platform to generate the view. If you're adding a view to a logical data model, the default parser AINSI SQL is used unless you change the View Parser in the Logical Model Options to another parser. For more information, see
Defining Model Options for the Selected Model
.
Attachment Bindings tab
The Attachment Bindings tab is available in the Synonym Editor. Bind an external piece of information, or attachment to the synonym. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary. For more information, see
Attaching External Documents to the Data Model
.
See Also
Defining Model Options for the Selected Model
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Editing_Synonyms&oldid=5922
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Managing_Groups,Creating and Managing Groups,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Security for the Repository
Contents
1
Create, Update, and Delete Group
2
Assigning a Role to a Group
3
Granting and Prohibiting User Access to Repository Items
4
Assigning Users/Groups Roles for Accessing Repository Items
5
Prevent Users from Accessing Specific Repository Items
6
Change User/Group Access to Repository Items
7
See Also
You can use groups in the Repository Security Center to make it easier to handle permissions. You can assign roles to a group at the Repository, Project, and Diagram levels and then add or remove users from the group to apply the settings to the user quickly and easily.
Groups can be created two ways:
Create a group in the Repository Security Center and then add users to it manually
Create a group with the same name as an LDAP/Active Directory group, and any LDAP/Active Directory users that are added to the Repository would automatically be members of that group based on the LDAP/Active Directory settings.
Create, Update, and Delete Group
Choose
Repository > Security > Security Center
.
Click the
Manage Groups
tab and select
New
.
Provide a name for the group and optionally, a description of the group.
If you want to create a group based on an LDAP/Active Directory group
, click
Directory Service Group
and another option becomes available at the bottom of the dialog,
Create Repository Users for all members of this Directory Service Group
. If you select this option, then repository users in this group are automatically added to the list of Repository users. If you do not select this option, then you will need to create the users manually and as you add LDAP/Active Directory Service users, they will be added to the Repository groups that correspond to the LDAP/Active Directory Service groups that they are members of.
If you want to manually populate the group
, do not select
Directory Service Group
, from the list of
Available Users
, select the group members by Ctrl-clicking each user, or click the double right-facing arrow to select all the users. You can also remove group members by clicking the left-facing arrow.
Notes
Delete a group
: On the
Manage Groups
tab, you can delete a group by selecting the group and clicking
Delete
. Deleting a group does not delete the group members but the group members will no longer have the permissions afforded to them by the group membership.
Edit a group
: On the
Manage Groups
tab, you can edit the group name and list of group members by selecting the group and clicking
Edit
and making your changes on the
Edit Repository Group
dialog.
Assigning a Role to a Group
Assigning a role to a group grants the group all the permissions selected in the role.
Choose
Repository > Security > Security Center
.
Select a Repository item you want to assign permissions to.
If the group is not currently assigned a role
, on the
Repository Security
tab, click the group name in the
Available Users
column and drag it onto a role name in the
Available Roles
column.
If the group was already assigned a role, on the
Repository Security
tab, click the group name the
Available Roles
column and drag it onto another role name in the
Available Roles
column.
Click
Apply
and then click
OK
to exit the
Security Center
.
Notify users in the group that they must log out and then log in again to receive the security updates.
Granting and Prohibiting User Access to Repository Items
On the Repository Security tab of the Security Center, users with the appropriate privileges can assign other users the appropriate access privileges for different objects, granting them permission to perform specific operations on a Repository item and prohibiting them from performing other operations on the same object. You can assign the access privileges of a role to individual users or to an entire group.
Assigning Users/Groups Roles for Accessing Repository Items
Log in to the Repository.
Choose
Repository > Security > Security Center
.
Click the
Manage Roles
tab; explore the available roles to determine if an existing role provides the access you want to grant the user. If necessary, create a new role with the appropriate permissions.
Click the
Manage Groups
tab; explore the available groups to determine if an existing group encompassed the users you want to authorize users. You can double click the name of a group to see the members of the group in the
Edit Repository Group
dialog. If necessary, create a new group. Assigning a role to a group is more efficient than assigning the role to the users one at a time.
Click the
Repository Security
tab.
In the
Repository Object
area, select a Repository item (diagram, object, submodel, data flow, transformation, or data dictionary) to which you want to grant or prohibit access.
Beneath
Available Users
, select a group or user to which you want to assign the role to the selected object and drag it onto the appropriate role in the
Available Roles
area.
To remove the role assignment of a user/group to a Repository item, click the Repository item, drag the user/group name from under role onto another role in the Available Roles area or back onto the Available Users list.
Notes
All permissions available to a user through direct assignment to roles are added to the permissions available to any groups the user is a member of. Permissions are additive, so the user gets all the permissions assigned to the user whether they were assigned through a group or directly to the user.
A user or group can only have one role for each object. But a user or group can have different roles for different objects.
If a user is listed in the Available Users area, but cannot be selected, the user has been deactivated and must be reactivated before you can modify the user.
Prevent Users from Accessing Specific Repository Items
The system-defined No Access role can prevent a user from accessing selected projects or diagrams
Log in to the Repository.
Choose
Repository > Security > Security Center
.
In the
Repository Object
area, navigate to and then click to select a project or diagram you want to secure from specific users.
From the list of users in the
Available Users
area, click a user name or
CTRL-click
several names and then drag the users onto the
No Access
role in the
Available Roles
area.
Repeat Step3 and Step4 as required to secure other diagrams and projects.
Click
Apply
, continue changing security settings if required, and then click
OK
to exit the security center.
Notes
If a user has been assigned the No Access role for an object, but that user is a member of a group with permissions for the object, then the user will have all permissions assigned to the group. All permissions available to a user through direct assignment to roles are added to the permissions available to any groups the user is a member of. Permissions are additive, so the user gets all the permissions assigned to the user whether they were assigned through a group or directly to the user.
Change User/Group Access to Repository Items
To change user/group access to Repository items, change the permissions of the role the user/group has for the Repository item or assign another role to the user/group for that particular Repository item. If required, you can force the user log out on the Manage Users tab of the Security Center, and then change the user's access privileges.
See Also
Creating and Managing Roles
Creating and Managing Users
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Managing_Groups&oldid=5110
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Managing_Users,Creating and Managing Users,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Security for the Repository
Contents
1
Create, Edit, Delete, Deactivate, Reactivate, Log Out, and Check In Users
2
User Management area
3
Administrator User 'Force' Options area
4
Notes
5
Assigning a Role to a User
6
See Also
Managing users entails creating, changing, and deleting user account permissions and logins, checking in a users checked out documents under unusual circumstances. You can control the privileges granted to a user for a specific diagram, model, submodel or Enterprise Data Dictionary by associating the user with a role. Using Roles, you can choose the permissions granted a user for the Repository item.
To access, create, update, and delete user information, a Repository administrator must have Repository Object Type Permission, Access Security Info and Update Security Info privileges.
Create, Edit, Delete, Deactivate, Reactivate, Log Out, and Check In Users
Choose
Repository > Security > Security Center
.
Click the
Manage Users
tab.
On the
Manage Users
tab, you can manage users by clicking their name in the list and then clicking a management option and following the prompts as required.
Continue making security changes and then click
OK
to exit the security center.
To assign permissions to users, see
Assigning a Role to a User/Group
.
Notify users that they must log out and then log in again to receive the security updates.
The following helps you complete the options of the
Manage Users
tab:
User Management area
Administrator User 'Force' Options area
Notes
User Management area
New
: Click
New
to add a new user through the
Create Repository User
dialog.
Directory Service User
: Select this option If you want the new user to login to the Repository using their Windows credentials. In this case ER/Studio Data Architect accesses the LDAP server on the network to verify the user's credentials. Directory service users can check the
Log in using current Windows account
option on the Repository login dialog to use their Windows user ID and password to log into the Repository.
Delete
: Select a user and then click Delete to delete the user. You cannot delete the Admin user.
Deleting a user also deletes version history for that user, which means that version history for all actions done on various objects by that user will also be deleted. It may be advisable to instead deactivate the user. Deactivating a user does not delete their history.
Administrator User 'Force' Options area
When you use the Check In User option, you can choose how to handle the checked out objects.
Convert to non-exclusive
: Enables the user to continue making changes to the checked out items. Other users can then check out the same items. When checking in non-exclusively checked out items, if the item was changed by another user since it was checked out, the user can resolve the differences and choose to override the other user's changes or to update his local version with the changes found in the Repository.
Undo Check Out
: When the user next connects to the Repository, the status of his items will be updated to show that they are not checked out.
Notes
You cannot delete or deactivate the Admin user, but you should change the Admin password from the default, which is Admin.
The new user appears in the user list with a star indicating that this user does not yet have any roles assigned to it for any Repository items.
Users must log out and log in again to receive any security updates.
The Admin does not need to know the user's password to create a new password for the user.
The Admin can look to the Manage Users tab to find out which users are logged in to the Repository and whether or not they currently have items checked out. Knowing if users have items checked out is particularly useful when upgrading the Repository, because after before upgrading the Repository the users should check all their items in and then do a clean get and check out of the items when the upgrade is complete. Knowing which users are logged in is useful when changing security center settings because after making any setting changes, the Admin should request online users to log off and log in again to receive the security center updates.
The Administrator may want to user log a user out to receive security center updates. For example, a new diagram has been added to a project and the diagram shouldn't be accessible by all the users who have access to the project. The Administrator can make the necessary security changes for the project and then log out the users, forcing them to log in again to receive the security updates. Other unusual circumstances may arise when it is necessary for the Administrator to log a user out of the Repository.
Assigning a Role to a User
Assigning a role to a user grants the user all the permissions selected in the role.
Choose
Repository > Security > Security Center
.
Select a Repository item you want to assign permissions to.
If the user is not currently assigned a role
, on the
Repository Security
tab, click the user name in the
Available Users
column and drag it onto a role name in the
Available Roles
column.
If the user was already assigned a role
, on the
Repository Security
tab, click the user name the
Available Roles
column and drag it onto another role name in the
Available Roles
column.
Click
Apply
and then click
OK
to exit the
Security Center
.
Notify users that they must log out and then log in again to receive the security updates.
See Also
Creating and Managing Roles
Creating and Managing Groups
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Managing_Users&oldid=5112
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Creating_and_Working_With_Data_Models,Creating and Working With Data Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Using the data modeling features of ER/Studio Data Architect you can create automatic and customized data model diagrams. ER/Studio Data Architect provides functionality such as automatic layouts, custom colors and fonts for your objects, and relationship line control.
ER/Studio Data Architect offers five preset auto layouts: circular, hierarchical, orthogonal, symmetric, and tree. You can use a preset layout to automatically generate your data model into a specific diagram type. These automatic layouts dictate how ER/Studio Data Architect displays relationships and objects. Although these layouts create a specific diagram with specific rules that control relationships and object placement, you can still change certain aspects of the display, overriding the automatic layout.
You can set color and font settings for almost any object in your diagram. You can create changes that affect all objects in your diagram. If you make a change in color or font to the entire diagram, you can then select individual objects to customize differently.
ER/Studio Data Architect gives you control over relationship lines. You can control the color, bending, straightening, verb phrases, and docking points of relationship lines.
If you are working with large data models, ER/Studio Data Architect offers features that help you zoom and navigate your models easily. The Overview Window and Zoom Window display thumbnail views of your entire data model. Utilities accessible from the Diagram toolbar, let you zoom, navigate relationships, and fit your entire data model into the Data Model Window.
There a several ways to create a data model. This section describes these methods. Subsequent discussions describe how you can customize your data model.
Creating a New, Blank Data Model
Reverse Engineering an Existing Database
Importing a Model
Generating a Physical Data Model
Using the Compare and Merge Utility
Changing the Database Platform of a Model
See Also
Best Practices
Common Tasks
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Creating_and_Working_With_Data_Models&oldid=5113
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customize_the_View_Settings_for_a_Specific_Model,Customize the View Settings for a Specific Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Views
Use the View tab of the Diagram and Object Display Options to control which components of the views in a specific model are displayed.
The settings here override display settings configured in Tools > Options > Display.
Choose
View > Diagram and Object Display Options
and then click the
Views
tab.
Complete your settings selections and then click the
Apply To
tab.
Select the models and submodels to apply the new settings to and then click
OK
.
See Also
Overriding Color and Font Settings for a Specific Object
Creating and Editing Materialized Views
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customize_the_View_Settings_for_a_Specific_Model&oldid=5114
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_Application_Visual_Style,Customizing Application Visual Style,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Configuring and Customizing
You can customize the visual style on
ER/Studio Data Architect
using the style dropdown in the top right hand corner of the screen.
Select the Visual Style you prefer.
See Also
Overview
Application Interface
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_Application_Visual_Style&oldid=7493
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_Datatype_Mappings,Customizing Datatype Mappings,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
When creating an entity attribute you can assign it a datatype, which defines how the data is stored in the database along with the length and precision. When you want to generate a physical model from the logical model, the datatype of the logical attribute is translated into a physical datatype. The target datatype used in the logical to physical translation depends on the target platform and the datatype mapping.
Physical datatypes are platform specific and can differ depending on your DBMS platform. You can view the specific mappings for each supported platform in the Datatype Mapping Editor. You can either use the default system mappings or create customized mappings.
Using the designated mapping, when generating a physical model ER/Studio Data Architect knows if, for example, the logical CHAR datatype should be converted into a string, C, or remain unchanged. From the datatype mappings ER/Studio Data Architect also knows the length and precision of the physical datatype. ER/Studio Data Architect supports many different database platforms and provides standard/default datatype mappings for each platform. For example, using the default mappings for Oracle 10g and 11g, ER/Studio Data Architect maps
FLOAT
to
BINARY_FLOAT
, whereas for Oracle 9i a
FLOAT
attribute is mapped by default to
DOUBLE PRECISION
. You can customize the default datatype mappings to create new mappings that better suit your purposes.
Use the Datatype Mapping Editor to customize the datatype mapping as you move your logical models to physical models.
Choose
Tools > Datatype Mapping Editor
.
Display the mapping for the target platform by choosing a mapping from the
Select Mapping
list. If you want to create a new mapping, click
New Physical Mapping
, type a name for the mapping, and then click
OK
.
Make the changes as required, and then click
OK
.
Note:
In the Datatype Mapping Editor, you can change the Physical Mapping values for every logical datatype.
In the Datatype Mapping Editor, you can change the
Is Default
,
Default Length
, and
Default Precision
values only if you have not defined a length, precision, or default for the datatype in the logical model.
Is Default
refers to whether the logical type is the default for a given physical type. This is used when reverse-engineering or importing from SQL. Because you can map physical types to more than one logical type, you also must assign a logical type when you get a physical type from the database or SQL. When a physical type is mapped to more than one logical type, the mapping that has
Is Default
marked as
Yes
is the one used. A physical type can only have one default logical mapping.
Default length
. Can be negative, as -1 is a valid length for certain datatypes on some platforms.
Default precision
. Can be negative, as -1 is a valid length for certain datatypes on some platforms. -2 indicates that the precision is not used for this data type.
Click
New Custom Datatype
to define custom datatypes so the unsupported datatypes are not assigned a default datatype, such as CHAR (10) when importing, reverse engineering, or merging databases that contain those unsupported datatypes.
Rename a datatype by clicking
Rename
in the Datatype Mapping Editor.
Customized datatype mappings are saved as.xml files in the following directory location:
C:\ProgramData\IDERA\ERStudioDA_x.x\DatatypeMapping
.
In the Generate Physical Model Wizard, the list of datatype mappings is limited to the system mapping for the physical platform and any customized mappings that were based on this system mapping.
See Also
Logical Design Concepts
Working with Universal Mappings
Datatype Mappings File Merge Tool
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_Datatype_Mappings&oldid=7751
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_Table_DDL,Customizing Table DDL or Object JSON,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Physical Storage Considerations
Using the Table DDL tab
The options selected in the Table Editor determine the clauses used in the
CREATE TABLE
and
CREATE INDEX
statements. Options on the DDL tab can give you more control over the DDL created.
To manage DDL options
Double-click a table to open the Table Editor.
Click the DDL tab, and then click
Customize
.
Note:
If the DDL is not displaying the options you expect to see, it may be because the relevant options on the DDL Tab Options dialog were not selected.
Additional explanation on the following options:
Generate Defined Bloom Filter Indexes
. Controls index generation in DDL regarding Bloom filter indexes.
Enclose names in quotes/brackets
. To avoid object name conflicts, you can enclose in brackets or quotations all names or enclose only names that conflict with SQL keywords. If the database platform supports object names enclosed in brackets or quotes, these options are available in the General Options section of the DDL tab Options and the
DDL Generation Wizard
. If you select
Enclose Names That Conflict with Keywords
, then any column names that contain SQL keywords will be automatically enclosed in brackets.
Use Complete Syntax for Virtual Columns
. This option is available for Oracle 11g and later. When this option is not selected, virtual columns will be added to the DDL with the following syntax:
column [<datatype>] AS (<column_expression>)
where
<datatype>
is set to the data type of the column if the Show Datatype option is on for the column and is omitted otherwise, and
<column_expression>
is the expression stored as the virtual column expression.
When this is selected, virtual columns will be added to the DDL with the following syntax:
column [<datatype>] GENERATED ALWAYS AS (<column_expression>) VIRTUAL
NUMBER datatype
: NUMBER or NUMBER(*) you must set the width and scale to *. A width of 0 will be converted to * when generating DDL.
Using the Object JSON tab
For MongoDB and JSON Instance, the JSON tab of the Object Editor displays the fields of the context object as well as all nested objects and their fields. If you edit a nested object, its fields and nested objects are included recursively, but none of the parent information is included. Options on the JSON tab can give you more control over the JSON created.
To customize the content of the JSON tab
Double-click an object to open the Object Editor.
Click the JSON tab, and then click
Customize
.
Note:
If the JSON is not displaying the options you expect to see, it may be because the relevant options on the JSON Tab Options dialog are not selected.
The following describe options that require additional explanation:
Quote field names
selects whether you want to add quotation marks around field names.
Only quote field names containing
means that only field names containing a period are enclosed in quotation marks.
Quote all field names
means that all field names in the generated JSON will be contained in quotation marks.
Output as plain JSON
means to remove all MongoDB-specific constructs when generating a database for a MongoDB model. This option removes MongoDb constructs such as ObjectId() and instead a generic JSON is generated.
See Also
Partitioning a Table Index
Partitioning a Table
MongoDB JSON Generation
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_Table_DDL&oldid=7783
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_the_Data_Model,Customizing the Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
This section describes customizations you can make to the Data Model. It is comprised of the following topics:
Setting Diagram Properties
Setting Data Model Properties
Creating Entity Relational or Dimensional Models
Dimensional Table Types Indepth
Changing the Model Notation
Setting the Relationship Notation
Manipulating Relationship Lines
Changing the Model Background
‎Change the Background and Outline Colors of Existing Models and Views
Setting Default Diagram Colors and Fonts
‎Customizing the Layout
Locking Data Model Objects to a Drawing Shape
Creating and Editing Shapes
Adding and Editing Lines
Adding and Editing Title Blocks
Adding Text Blocks
Overriding Color and Font Settings for a Specific Object
Change Data Model Display Preferences
Changing Entity/Table Display Preferences
Changing Data Model Layout
Enforcing Data Integrity Using Check Constraints
See Also
Best Practices
Creating and Working With Data Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_the_Data_Model&oldid=5118
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_the_Display_of_Diagrams_and_Objects,Customizing the Display of Diagrams and Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Configuring and Customizing
Diagram and Object Display options affect how the diagram objects appear only for the selected model or submodel. You can choose different display options for each physical and logical model and submodel. By accessing the Diagram and Object Display Options from the Data Lineage Tab, you can also customize the appearance of transformation objects. The diagram and object display options you choose are stored in the.dm1 file along with your diagram and apply only to the current diagram. Diagram display options include setting page boundaries and snapping to grid. Object-specific display options include specifying the information displayed about each object on the diagram. You can specify the content displayed for entities and views. You can also customize display settings for relationships and schema objects.
You can change the entity/table display level to show attributes/columns, primary keys, all keys, tables, definitions or notes. You can also set display options for certain objects to display object datatype, domain, null options, alternate keys, and owner.
For views, you can change the display level to show columns, primary keys, all keys, definitions, and notes. You can also set display options for certain objects to display object owner and parent name.
By default, ER/Studio Data Architect automatically sizes the entities and views to display all the content selected. However, you can manually resize any entity or view by right-clicking the object in the Data Model Window, grabbing a handle, and then dragging to resize the object.
Note:
You can make global changes to the display of any new diagrams and objects by choosing
Tools > Options > Display
and making your choices there. For more information, see
Defining Model Options for the Selected Model
.
To change the display of a specific model or submodel
From the Data Model Explorer on the Data Model Explorer, select the model or submodel.
To change the display of objects on the Data Lineage tab
Click the
Data Lineage
tab.
In the
Diagram
ribbon, click
Diagram/Object Display Options
.
Complete the tabs of the Diagram and Object Display Options dialog, and then click
OK
to save your changes.
Contents
1
Diagram tab
1.1
Diagram Display Preferences
1.2
Diagram Grid Preferences
2
Entity/Table tab
2.1
Display Level
3
Relationship tab
4
View tab
4.1
Display Level
4.2
Available Options
5
Schema Objects tab
6
Transformation tab
7
Drawing Shapes tab
8
Security Objects tab
9
Apply To tab
10
See Also
Diagram tab
Diagram Display Preferences
Show Page Boundaries
. If selected, displays the page boundaries according to the print options, such as the printer selected, and page size, scale, and orientation chosen in the Print and Print Setup dialogs.
Auto-center Diagram over Pages
. If
Show Page Boundaries
is selected, this option is available. Selecting this option arranges the diagram elements so the diagram always appears centered across the pages required to display or print the diagram.
Diagram Grid Preferences
Display and Enable Snap to Grid
If selected, displays grid lines in the diagram background, and aligns diagram objects along their nearest grid line. ER/Studio Data Architect lets you set a grid to the background of your diagram. You can use the grid to align diagram objects and to create a regular or uniform appearance. If you set a grid in the background of your diagram, you can set ER/Studio Data Architect to snap diagram objects to the nearest grid line.
Grid Step Size
. Specifies the horizontal and vertical size of each grid cell.
Grid Steps Per Line
. Specifies a horizontal grid spacing per line.
Units
. Specifies the unit of measurement for grid cells. You can select inches and centimeters.
Entity/Table tab
Display Level
The display level options selected dictate which options are available in the
Available Options
area.
WARNING:
If the Display Level in the Diagram and Object Display Options editor does not match the Attribute Order designation in the Model Options
Model > Model Options > Attribute Order
, drag and drop errors and on-screen editing errors can occur. If the true attribute sequence, as designated in the Model Options, and the displayed sequence, as designated in the Diagram and Object Display Options, are not synchronized, then ER/Studio Data Architect cannot make the appropriate changes to the entity.
Logical Attribute Order
. When selected, the Primary Key of the table displays at the top. The other columns display in the order designated in the Entity Editor for the corresponding entity.
Physical Attribute Ordering
. When selected, the attributes are ordered by their Column Sequence ID. The sequence ID of a column can be changed by moving it up or down in the list of columns on the Columns tab of the Table Editor.
Definition
. If selected, displays the entity or table definition as defined on the Definition tab of the Entity Editor or Table Editor.
Note
. If selected, displays the entity or table note as defined on the Notes tab of the Entity Editor or Table Editor.
Display Table Names
. If selected, displays entity and table names.
Display Column Names
. If selected, displays the attribute and column names.
Hidden Attributes Marker
. This option become available when attributes or keys of an entity in a submodel has been hidden. When selected, an ellipsis displays in submodel entities where all attributes are not currently displayed. Attributes or keys of an entity can be hidden by deselecting the object on the Attributes tab of the Submodel Editor.
Roll Up Contained Objects
. Check this box to cause the display of the current submodel to change between the standard graph structure and a rolled-up, nested style. If you choose other submodels in the Apply To tab, this setting also applies to those submodels if they are part of hierarchical models. If Logical submodels and standard RDBMS Physical submodels are selected in the Apply To tab, property changes are applied but do not appear any differently.
Relationship tab
Relationship Style
. The style chosen here applies to any new relationships created in the model or submodel. Override the relationship style by right-clicking the relationship and choosing one of the format options available.
View tab
Display Level
Definition
. If selected, displays the view definition as defined on the Definition tab of the View Editor.
Note
. If selected, displays the view note as defined on the Notes tab of the View Editor.
Available Options
Name Compartment
. If selected, displays the view name within the view object; otherwise, the view name displays just above the object.
Wrap Name
. If selected, wraps the view name when the view width is not large enough to accommodate the entire name.
Schema Objects tab
For physical models only, controls the display of schema objects such as packages, procedures, functions, materialized views, auxiliary tables, and triggers.
Transformation tab
Note:
Available only if the Data Lineage tab is active when
View > Diagram and Object Display Options
is chosen.
Transformation display options control the information displayed for transformation objects in a data flow on the Data Lineage window.
Transformation Type
. If selected, displays the transformation type as entered or selected in the Transformation Editor. For more information, see
Creating and Editing Data Lineage Data Flows
.
Input and Output Columns
. If selected, displays the names of the input and output columns on the transformation object.
Code Definition
. If selected, displays the transformation code entered in the Code section of the Definition tab for the Transformation Editor.
Business Definition
. If selected, displays the business description entered in the Business section of the Definition tab for the Transformation Editor.
Drawing Shapes tab
Verb and inverse verb phrases are defined on the Phrases tab of the Relationship Editor. If you choose to display these phrases, in the Data Model Window you can click and drag them for optimal positioning.
Security Objects tab
Security objects, such as users and roles are not automatically displayed in data models that have been reverse-engineered; in this case, you must enable their display here.
Apply To tab
You can selectively apply the object display options set on the other tabs to individual elements of your model.
See Also
Overview
Application Interface
Creating and Working With Data Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_the_Display_of_Diagrams_and_Objects&oldid=7011
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_the_JSON_Tab,Customizing the JSON Tab,"From ER/Studio Data Architect
Jump to:
navigation
,
search
You can customize what items appear on the JSON tab of the Editor. These settings apply to all objects.
Under the Collection tab you can select which collections from your model that you want to add to your JSON file.
Use the Generation Options to select how you want your JSON output to appear.
Output as JSON Instance
must be selected to use the
JSON Instance Options
. Likewise,
Output as JSON Schema
must be selected to use the
JSON Schema Options
.
The following options are available:
Quote field names
selects whether you want to add quotation marks around field names.
Only quote field names containing 'dot'
means that only field names containing a period are enclosed in quotation marks.
Quote all field names
means that all field names in the generated JSON are contained in quotation marks.
Output as plain JSON
means to remove all MongoDB-specific constructs when generating a database for a MongoDB model. This option removes MongoDb constructs such as ObjectId() and instead a generic JSON is generated.
JSON Schema Version
Draft 07
generates a valid Draft-07 file as per
JSON Schema Draft-07 Release Notes
.
Draft 2020-12
generates a valid JSON schema file as per
JSON Schema Specifications.
Add objects to $def
All Nested Objects
adds all nested objects under the $def keyword.
Only reused Nested Objects
adds reused nested objects under the $def keyword. A reused nested object is one that is used in other parent objects.
Manage Reusable Definitions
Address relative to Root
signifies that every object added to the $defs section is referenced by its name relative to the $defs object using $ref. For example, ""$ref"":""#/$defs/nestedObjectName""
Address relative to Base URI
signifies that every object added to the $defs section is given an $id comprised of the Relative URI extension plus the object name. This is referenced by parent fields using $ref.
Roll up Nested Objects
adds every object to the parent field, similar to the roll-up view.
See Also
MongoDB JSON Generation
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_the_JSON_Tab&oldid=6795
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Customizing_the_Layout,Customizing the Layout,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
All tabs
2
General tab
3
Disconnected tab
4
Circular tab
5
Hierarchical tab
6
Orthogonal tab
7
Symmetric tab
8
Tree tab
9
Routing tab
10
See Also
Using the
Layout Properties Editor
, customize layout properties common to all layouts and customize the appearance of a specific layout method.
Note:
Any changes made in the Layout Properties Editor apply only to the model currently selected.
In the
Data Model Explorer
, click the model you want to layout using a customized layout.
Choose
Layout > Layout Properties
.
Click a layout tab.
Complete the changes as desired.
Click
OK
to save the changes and exit the editor.
The following describe options that require additional explanation:
All tabs
General tabs
Disconnected tab
Circular tab
Hierarchical tab
Orthogonal tab
Symmetric tab
Tree tab
Routing tab
All tabs
These buttons are commons to every tab on the editor:
Ok
: Save changes and close the
Layout Properties Editor
.
Apply
: Applies your changes to all selected diagrams without closing the dialog box.
Defaults
: Resets all values of the selected property sheet to
ER/Studio Data Architect
default values.
Layout
: Applies your changes to all selected diagrams without closing the dialog box, and immediately displays any changes to the active model in the Data Model Window.
Reset
: Resets all values of the selected property sheet to the values displayed when you opened the
Layout Properties Editor
.
General tab
Margin Spacing
: Allows you to modify the width of each margin.
Drawing Fitting
: All entities move to fit to canvas or to a print view.
Disconnected tab
Tiling
: Offers three ways of tiling disconnected entities: to grid, to rows, and to columns.
Tile to Grid
: All disconnected entities are spaced evenly apart in a grid.
Tile to Rows
: Maximizes space efficiency by placing entities in rows running left to right, leaving just enough vertical space for the tallest entity in the row.
Tile to Columns
: Maximizes space efficiency by placing  entities in columns running top to bottom, leaving just enough horizontal space for the widest entity in the column.
Circular tab
Spacing
:
Between Nodes
: Specifies the distance between entities.
Between Edges
: Specifies the distance between relationship lines.
Layout Quality
: Specifies the speed of the algorithm used to produce the layout.
Hierarchical tab
Routing
: Specifies the nature and look of the relationship lines in the selected data model.
Incremental Layout
: Specifies the retention of familiar component shapes in the Data Model Window. For example, if you produce a data model in one layout style, paste into the window of a data model laid out in a different style, and then join them to make a connected diagram, selecting the Incremental Layout check box preserves the different layout styles as you continue to make modifications to the data modelEdge RoutingV.
Layout Quality
: Specifies the speed of the algorithm used to produce the layout.
Draft
: Provides the lowest quality, but fastest level of layout.
Proof
: Provides the highest quality, slowest level.
Orientation
: Lets you specify one of four ways to orient the data model. Changing data model orientation does not automatically change port specifications, connectors, entity shapes, or constraints, some or all of which can rely on specific sides of entities, making for some complicated side effects of changing the orientation of complex data models. Selecting Rotation Specifications includes port specifications, connectors, entity shapes, or constraints when re-orienting the data model.
Incremental Layout
: Specifies the retention of familiar component shapes in the Data Model Window. For example, if you produce a data model in one layout style, paste into the window of a data model laid out in a different style, and then join them to make a connected diagram, selecting the Incremental Layout check box preserves the different layout styles as you continue to make modifications to the data modelEdge RoutingV.
Orthogonal tab
Layout Quality
: Specifies the speed of the algorithm used to produce the layout. The primary difference between Draft, Default, and Proof quality is the number of times ER/Studio Data Architect runs the algorithm on the diagram. The more often the algorithm runs, the more quality.
Horizontal Spacing
Between Nodes
: Specifies the horizontal distance between parallel entities.
Between Edges
: Specifies the horizontal distance between parallel relationship lines.
Vertical Spacing
Between Nodes
: Specifies the vertical distance between parallel entities.
Between Edges
: Specifies the vertical distance between parallel relationship lines.
Symmetric tab
Layout Quality
: Specifies the speed of the algorithm used to produce the layout.
Draft
: Provides the lowest quality, but fastest level of layout.
Proof
: Provides the highest quality, slowest level.
Tree tab
Undirected Layout
: When a diagram is undirected, the source and target entities of any relationship are treated the same. In a directed diagram, the direction of the relationship is significant. Networks are often represented in undirected layouts, while processes are often represented in directed layouts.
Routing tab
Horizontal Spacing
Between Nodes
: Specifies the horizontal distance between parallel entities.
Between Edges
: Specifies the horizontal distance between parallel relationship lines.
Vertical Spacing
Between Nodes
: Specifies the vertical distance between parallel entities.
Between Edges
: Specifies the vertical distance between parallel relationship lines.
See Also
Overriding Color and Font Settings for a Specific Object
Changing the Model Background
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Customizing_the_Layout&oldid=5120
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Lineage_Window,Data Lineage Window,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
The Data Lineage window provides a view of the selected data flow, including the transformations and their inputs and outputs. You can use the Data Lineage window in much the same way as you do in the Data Model window. You can arrange the inputs and outputs by dragging them. You can add shapes and colors to enhance the readability of your data lineage diagram. For more information, see
Documenting Data Extraction, Transformation, and Load
.
See Also
Overview
Application Interface
Automating ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Lineage_Window&oldid=5329
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Lineage_Workflow,Data Lineage Workflow,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Documenting Data Extraction, Transformation, and Load
Data Lineage workflow generally goes as follows:
Defining Source Systems
Relating Source and Target Models
Relating Source and Target Tables and Columns
Creating and Editing Data Lineage Data Flows
Documenting Table/Entity Data ETL
Documenting Column/Attribute ETL
Share the data lineage with your colleagues through reports, SQL, XML, exported Metadata or through the ER/Studio Team Server and ER/Studio Viewer.
See Also
Data Modeling Fundamentals
Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Lineage_Workflow&oldid=5122
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Model_Explorer,Data Model Explorer,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
The Data Model Explorer helps you navigate data models and their objects, reuse design elements, and create new objects. The Data Model Explorer has four tabs that offer easy access to important functionality, enabling you to efficiently manage your Data Models.
Data Model
: Expand and collapse the Data Model Explorer nodes as needed. Double-click a node to start an Object Editor.
Data Dictionary
: Manage data dictionary objects, including attachments, defaults, rules, reference values, user data types, domains, reusable procedural logic, reusable procedures, and libraries.
Data Lineage
: Document how data is moved and transformed. You start with a data source and move through an intermediate schema or target using as many transformations as you need.
Macros
: Manage sample, system, and user macros. Create, rename and delete folders as well as add a macro and refresh the macro list.
Contents
1
Data Model
2
Data Dictionary
3
Data Lineage
4
Macros
5
See Also
Data Model
The Data Model tab displays logical elements such as entities and relationships, and physical schema objects such as packages and triggers as separate nodes. Shortcut menus are available on the Data Model tab when you right-click an element. Use the Data Model tab to:
Create an object
Edit an object
Delete an object
Rename an object
Change how the data model tree displays by choosing
Tools > Options > Application
in the ribbon.
Use the Data Model tab to manage objects that are contained within objects, such as columns, which are contained within tables.
ER/Studio DA displays the active model in bold type, so you can easily recognize which model or submodel on which you are working.
Data Dictionary
Use the Data Dictionary tab of the Data Model Explorer to manage data dictionary objects, including attachments, defaults, rules, reference values, user data types, domains, reusable procedural logic, reusable procedures, and libraries. The shortcut menu available when you right-click an object lets you add, edit, or delete these Data Dictionary objects.
The Reusable Procedural Logic folder lets you organize several procedural logic items such as reusable triggers, reusable procedures, and libraries.
Data Lineage
The Data Lineage tab provides a visual, drag-and-drop interface to enable you to document how data moves between the target and source systems along with why and when the data is moved.
Data lineage documents the Extraction, Transformation, and Load (ETL) of data movement and the relevant computations required when moving data between disparate systems. You can create data movement rules that can dictate, for example, when the data should be archived or a specific value range the data must fall within in order to be moved. You may also need to massage the data to, for example, compute the total sales for a particular product before moving the data to the target. This is sometimes referred to as
source and target
mapping. For example, your organization's data warehouse may have data fed in from multiple sources such as CRM, Payroll, General Ledger, Accounting, or Product/Inventory system. The data warehouse will likely need on-line data marts receiving data from one of those systems to produce reports for Sales Executives, HR Executives or marketing teams who produce performance reports about of various aspects of your business
Macros
The Macro tab of the Data Model Explorer lets you add, edit, rename, delete, and run macros. You can also create folders in which to store macros for easier reference. ER/Studio Data Architect installs several sample macros in the Sample Macros folder. These macros are described in more detail in
Using the SAX Basic Macro Editor
of this documentation.
See Also
Application Interface
Data Model Window
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Model_Explorer&oldid=6797
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Model_Window,Data Model Window,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
The Data Model window displays the logical and physical data model. You can access functionality through the menus, shortcut menus, and tool bar buttons. The Data Model window lets you move diagram objects, copy and paste them in a new location, resize the diagram objects, and change their colors.
The Data Model Window also displays physical schema objects like Procedures, Functions, Packages, Auxiliary Tables, Tablespaces, Materialized Views, and Synonyms. This presents a visual representation of object dependencies for impact analysis.
If you right-click a relationship, ER/Studio Data Architect opens a shortcut menu that lets you modify the relationship between entities or tables.
In the Data Model Window, ER/Studio DA displays useful information about each object in your Data Model in the
Pop-up Windows
,
Zoom Window
, and
Overview Window
.
See Also
Overview
Data Model Explorer
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Model_Window&oldid=5124
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Modeling_Concepts,Data Modeling Concepts,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Overview
A data model represents the things of significance to your enterprise and the relationships between them. At its core, a data model depicts the underlying structure of an enterprise's data and the business rules governing it. A data model is comprised of two parts, a logical design and a physical design.
The following describes the main components of an ER/Studio diagram:
The Logical Model
The Physical Design
Data Model Design Principals
The Purpose of a Data Model
The Relational Model
The Entity-Relationship Model
The Dimensional Model
The Logical Model
A logical model is developed before the physical model. It addresses the business and functional requirements of systems development. The logical design allows you to determine the organization of the data that you need to store in a database before you create the database; it serves as a blueprint.
The Physical Design
The physical design addresses the technical implementation of a data model, and shows how the data is stored in the database. For example, you can specify the datatype to be used by each column in the table, and determine how tables will be stored in the database.
Data Model Design Principals
To design the most effective data model possible, you should focus on the logical design before developing the physical design. Both the logical and physical design processes are complex, so it is best to separate rather than to mix the two. A sound logical design should streamline the physical design process by clearly defining data structures and the relationships between them.
The Purpose of a Data Model
A data model can be useful for other things in addition to creating databases, although creating a database is generally its primary purpose. In systems development, the goal is to create an effective database application that can support some or all of your enterprise. However, a data model of your business can help you define operational aspects of your business that you might otherwise overlook. Also, a well-defined data model that accurately represents your business, can be helpful in orienting employees to goals and operations. The data model can also serve as an invaluable communications tool for both internal and external constituents.
The Relational Model
Most early data models were developed to help systems analysts make business data conform to a physical database or machine architecture. Hierarchical and network models often ran most efficiently on particular systems. In the early 1970s E. F. Codd developed the relational data model, based on relational algebra. The relational model stressed data independence, where data independence is defined as independence of data from the underlying physical structure in which it is stored. Thus, systems that supported relational data models let users easily migrate data to larger or newer systems with little regard to the physical differences between storage devices.
The power of the relational model lies in its simplicity. In the relational model, data is organized in tables of rows and columns. Each table represents one type of data. Each row, or tuple, represents one item of data of that type. Each column, or domain, represents one type of information about the type of data stored in the table.
The Entity-Relationship Model
Peter Chen introduced entity-relationship modeling during the late 1970s. Along with a number of other theorists, such as Hammer and McLeod with their Semantic Data Model, Chen introduced a new way of thinking about data. Chen's ideas stressed that a data model should represent the reality of a business, without regard for how that model might be implemented in a manual or automated system. Though it can seem ridiculous today, these ideas were revolutionary at the time, and were instrumental in freeing individuals from the constraints of a hierarchical business model. The ability to model a business 'on paper' let business planners test out and debug ideas before implementing them, thus saving money, other resources, and aggravation.
The basic idea behind entity-relationship modeling is this: everything in a business can be generalized into an abstract or archetypal ideal, which we call an entity. These entities have certain characteristics or attributes. These entities also are related to one another through actions that each entity performs on one or more of the other entities. We call these actions, relationships.
In determining the relationship between each of the entities in a data model, you will define a number of business rules. Business rules define your business and how you run it. For instance, you know that to be useful, each employee ID, project ID, and department ID must be unique. While you could use the social security number as the employee ID, you might want to keep the ID short and more easily sorted. More complex issues to consider are questions such as, ""How are we to connect employees, projects, and departments so that we minimize data redundancy and maximize our reporting capabilities?"" The answers to this and other questions form the rules by which you run your business.
Attribute definitions can be used along with relationships to determine or enforce business rules. You can define a particular set of valid values for any attribute of any entity. For example, you can define a valid range of salaries for a subset of employees for an attribute called Salary. This set of values is known as a domain.
The Dimensional Model
Dimensional modeling is generally agreed to be the most useful for representing end-user access to data. Where a single entity-relationship diagram for an enterprise represents every possible business process, a dimensional diagram represents a single business process in a fact table. ER/Studio Data Architect can identify individual business process components and create the DM diagram for you.
You can create a dimensional diagram by starting with a logical model, by reverse-engineering, by importing an SQL or ERX file, or by adding a new physical model.
See Also
Developing a Data Model
Best Practices
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Modeling_Concepts&oldid=5125
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Data_Modeling_Fundamentals,Data Modeling Fundamentals,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Overview
ER/Studio Data Architect is an entity-relationship modeling tool. The following sections outline data modeling concepts and especially entity-relationship modeling concepts, upon which ER/Studio Data Architect is based. The design process, from creating a logical model to creating the physical model, is also explained in the following sections.
Data Modeling Concepts
: Describes data modeling concepts, the development of the relational model, entity-relationship modeling, and the IDEF1X methodology.
Developing a Data Model
: Describes the steps involved in creating the logical design; including naming objects; documenting the design; and normalizing the model; as well as creating the physical design, from transforming the physical design from the logical model to denormalizing the physical design and implementing the database.
See Also
Configuring and Customizing
Creating and Working With Data Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Data_Modeling_Fundamentals&oldid=5126
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Database_Privileges_for_Reverse_Engineering,Database Privileges for Reverse Engineering,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Reverse Engineering an Existing Database
For SQL Server you need to ensure that you have SELECT privileges on the following system tables:
master.dbo.sysmessages
master.dbo.syslanguages
master.dbo.syslogins
master.dbo.sysremotelogins
master.dbo.sysservers
master.dbo.sysdatabases
master.dbo.sysprocesses
master.dbo.sysdevices
master.dbo.spt_values
master.dbo.sysoledbusers
master..sysxlogins
master.dbo.syssrvroles
master.dbo.sysloginroles
master.dbo.sysconfigures
master.dbo.sysusages
master.dbo.sysdevices
sysforeignkeys
sysprotects
sys.views
sysindexkeys
sysalternates
syskeys
syslogs
sysfiles
sysmembers
systhresholds
See Also
Using Native or Direct Database Connections
Configuring ODBC Data Source and Target Connections
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Database_Privileges_for_Reverse_Engineering&oldid=4159
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Database_Support_and_Connectivity,Supported Database Platforms,"From ER/Studio Data Architect
(Redirected from
Database Support and Connectivity
)
Jump to:
navigation
,
search
Go Up to
Main Page
ER/Studio Data Architect supports the following database platforms:
Database
Version
Amazon Redshift
Databricks
Embarcadero InterBase
XE, XE3, 2007, 2009
Firebird
1.5, 2.x
Google BigQuery
Greenplum
4.2
Hadoop Hive
0.12, 0.13
Hitachi HiRDB
IBM Db2 Common Server
IBM Db2 for iSeries
V4R5, V5R2
IBM Db2 for LUW
5.x - 10.x
IBM Db2 for z/OS
5.x - 11.x
IBM Informix Dynamic Server
9.x
IBM Informix OnLine and SE
IBM Netezza
4.6, 5.0, 6.0, 7.0
JSON Instance and Schema Files
Microsoft Access
2.0, 95, 97, 2000, 2013
Microsoft Azure SQL Database
Microsoft Azure Synapse Analytics
Microsoft SQL Server
6.5, 7, 2000, 2005, 2008, 2012, 2014, 2016, 2017, 2019
Microsoft Visual FoxPro
2, 3, 5
MongoDB
2.6, 3.0, 3.2, 3.4, 3.6, 4.x
MySQL
3.x, 4.x, 5.x, 8.0
Oracle
7.x, 8.x, 9i, 10g, 11g, 12c, 18c, 19c
ODBC / ANSI SQL
PostgreSQL
8.x, 9.x, 10.x, 11.x, 12.x
SAP Adaptive Server Anywhere (ASA)
5, 6, 7, 8, 9, 10
SAP Adaptive Server Enterprise (ASE)
11.9.2, 12.x, 15.0
SAP IQ
12.x, 15.x, 16.x
Snowflake
Teradata
V2R4, V2R5, V2R6, 12, 13.0, 14.x, 15.10
Database Connectivity
The following table describes the necessary client software needed to successfully connect to a target database.
When selecting client software, make sure the DBMS version matches the client software version. In cases where the client libraries are backward compatible, the latest client version is recommended. Please refer to the DBMS vendor for specific client software and the database versions for which it is supported.
Database
Required Client Libraries
Vendor
Google BigQuery
BigQuery ODBC
Magnitude Simba
Hitachi HiRDB
Hitachi ODBC
Hitachi
IBM DB/2 OS/390 / IBM DB2 LUW
IBM DB2 Connect
IBM
IBM AS/400
IBM Client Access for AS/400
IBM
Informix OnLine and SE
Informix-Cli and ODBC
Informix Software, Inc. and Intersolv, Inc.
InterBase
ODBC
IDERA, Inc.
Microsoft Access
Access ODBC
Microsoft
Microsoft SQL Server
SQL Server Client Tools
Microsoft
Microsoft Azure SQL DB
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Azure Synapse
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Visual FoxPro
FoxPro ODBC
Microsoft
MySQL
MySQL ODBC
MySQL
Netezza
ODBC
Netezza Corporation
Teradata
Teradata ODBC
Teradata
Oracle
SQL*Net or Net8 with configuration files (hosts, tnsnames.ora)
Oracle
PostgreSQL
PostgreSQL ODBC
Postgre
Sybase ASA
Sybase ASA ODBC
Sybase
Sybase ASE
Sybase Open Client
Sybase
Sybase Adaptive Server IQ
Sybase ASA ODBC
Sybase
Sybase Watcom SQL Anywhere
SQL Anywhere ODBC
Sybase
For information on connecting to databases in ER/Studio Data Architect, see
Connecting to Database Sources and Targets
.
See Also
Changing the Database Platform of a Model
Connecting to Database Sources and Targets
System Requirements
Databricks Support
JSON Support
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Supported_Database_Platforms&oldid=7830
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Databricks_Support,Databricks Support,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Supported Database Platforms
ER/Studio supports Databricks as a Core Platform, which enables you to:
reverse engineer from the Unity Data Catalog
generate DDL Code
import DDL Code
generate ALTER script
ER/Studio allows you to design and document Delta tables within a Unity Data Catalog instance.
Connecting to the Unity Data Catalog
Before connecting to the Unity Data Catalog, you must download and install the Databricks ODBC driver from the Databricks website at
https://www.databricks.com/spark/odbc-drivers-download
.
For more information about configuring these connections, see
Configuring ODBC Data Source and Target Connections
.
Once you configure your ODBC driver, you can connect to your Unity Data Catalog, and then either reverse engineer or use the Compare and Merge Utility for your Databricks Catalogs and Schemas. 
Note that the ER/Studio user interface refers to
Database
and
Owners
, which equate to Databricks Catalog and Schema Objects, respectively.
For more information about reverse engineering, see
Reverse Engineering an Existing Database
. For more information about using the compare/merge feature, see
Using the Compare and Merge Utility
.
What Databricks features are available?
With ER/Studio’s Databricks support, you can work with the following features available on Delta tables in the Unity Data Catalog:
Primary Key, Foreign Key, and Check Constraints
Materialized Views
Managed & Unmanaged Tables
Clustering and Partitioning
Bloom Filter Indexes
Functions and Mask Functions in Tables
Views
Databricks includes data types for creating denormalised structures to improve performance. ER/Studio has some powerful tools to allow you to generate these nested structures both to and from logical data models with containment relationships. For more information about this feature, see
Containment Relationships
.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Databricks_Support&oldid=7881
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Datatype_Mappings_File_Merge_Tool,Datatype Mappings File Merge Tool,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing Datatype Mappings
As new versions of ER/Studio are released, new data types are introduced. The Datatype Mappings File Merge tool allows you to merge user-defined logical and physical datatypes and their mappings from previous versions of ER/Studio into the latest version and resolve any duplication.
The Datatype Mappings File Merge utility merges datatypes and mappings within the
DatatypeMappings_SystemDefault.xml
file from a previous version to the current version in the Data Type Mapping folder. You can change the current version's folder location from the default
C:\ProgramData\Idera\ERStudioDA_xx.x\DatatypeMapping
by going to
Tools > Options
and searching for the appropriate location.
The following merge options are available:
Resolve Logical Types with Duplicate Names
. This option resolves issues when user-defined logical types in the source have the same name as new logical types in the target. Available options include:
Rename imported type with ‘_1’
Overwrite target type and mappings
Skip import of duplicate type
Resolve Different Physical Mappings
. This option resolves issues when a physical data type found in the source file is different from the target. Available options include:
Use mapping from source
Use mapping from target
How the Tool Works
Upon execution, the utility:
Copies
DatatypeMappings_SystemDefault.xml
and names the copy
DatatypeMappings_SystemDefault_old.xml
.
Merges mappings without any collisions into the target.
Resolves any collisions based on the options mentioned previously.
Saves the new target file as
DatatypeMappings_SystemDefault.xml
.
Displays a report of how it resolved any collisions.
You can roll back any changes by restoring the
DatatypeMappings_SystemDefault_old.xml
file in the latest version folder
C:\ProgramData\Idera\ERStudioDA_xx.x\DatatypeMapping
to
DatatypeMappings_SystemDefault.xml
, and then restarting ER/Studio Data Architect.
Note:
Existing models do not automatically use updated datatype mappings. To apply updated mappings to an existing model, select the model, open the Model Options dialog, and then click
Update Datatype Mapping
.
See Also
Logical Design Concepts
Working with Universal Mappings
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Datatype_Mappings_File_Merge_Tool&oldid=7708
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Defining_Index_Storage,Defining Index Storage,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
Contents
1
GreenPlum Index Storage Options
2
Hitachi HiRDB Index Storage Options
3
IBM DB2 for z/OS Index Storage Options
4
Informix Index Storage Options
5
Interbase Index Storage Options
6
Microsoft SQL Server Index Storage Options
7
Oracle Index Storage Options
8
Postgre SQL Index Storage Options
9
Sybase SQL Anywhere Index Storage Options
10
Sybase System 10, ASE Index Storage Options
11
See Also
Storage parameters affect both how long it takes to access data stored in the database and how efficiently space in the database is used. For heavily accessed tables, place these tables in one location and place the indexes of the table in a different location on different physical disk arrays. This will improve performance, because separate threads will be created to access the tables and indexes.
You can define how your tables are stored using the options in the Index Editor, which is accessible through the Index tab of the Table Editor.
In the
Data Model
Window, double-click the table for which you want to specify index storage options.
From the
Table Editor
, click the
Indexes
tab, select the index for which you want to specify storage options, and then click
Edit
.
The
Index Editor
appears with options that are specific to the database platform and version.
Complete the
Index Editor
options as required, click
OK
to exit the
Index Editor
, and then click
OK
again to exit the
Table Editor
.
For information on the storage options available for your database platform, click a link below:
GreenPlum Index Storage Options
Hitachi HiRDB Index Storage Options
IBM DB2 for z/OS Index Storage Options
Informix Index Storage Options
Interbase Index Storage Options
Microsoft SQL Server Index Storage Options
Oracle Index Storage Options
Postgre SQL Index Storage Options
Sybase SQL Anywhere Index Storage Options
Sybase System 10, ASE 10, 11 Index Storage Options
GreenPlum Index Storage Options
Tablespace (TABLESPACE)
Specifies the name of the tablespace where the index is stored.
Hitachi HiRDB Index Storage Options
Index Storage (ON)
Specifies where to store the index.
PCTFREE (PCTFREE)
Specifies the maximum percentage of space in each data block to reserve for future updates. This reserved space helps to avoid row migration and chaining caused by an update operation that extends the length of a data row. Tables that will not be updated should have this value set to 0.
Unbalanced Split (UNBALANCED SPLIT)
Specifies that in order to maintain the balance of the index tree and improve performance the index pages can be split.
IBM DB2 for z/OS Index Storage Options
The storage options for an IBM DB2 for z/OS appear on the Options tab of the Index Editor for that platform. For more information, see
IBM DB2 for z/OS Table Storage Options
.
Informix Index Storage Options
Fill Factor (FILLFACTOR)
Specifies the percent or degree of index-page fullness. A low value provides room for index growth. A high value compacts the index. If an index is full (100 percent), any new inserts result in splitting nodes.
Interbase Index Storage Options
External File
Specifies where to store the index.
Microsoft SQL Server Index Storage Options
The options available depend on the version of the database.
Segment (ON)
Specifies where the index will be stored.
File Group (ON)
Specifies where the index will be stored.
Fill Factor (FILLFACTOR)
Specifies the percent or degree of index-page fullness. A low value provides room for index growth. A high value compacts the index. If an index is full (100 percent), any new inserts result in splitting nodes.
Pad Index (PAD_INDEX)
Specifies how much space to leave available on each page in the intermediate levels of the index. If
PAD_INDEX
is not used, by default each intermediate index page is given only enough empty space to hold at least one row of the maximum size the index can have. For tables with heavy index updates, this can cause the intermediate index pages to split often, causing unnecessary overhead. To prevent intermediate index page splitting, assign both the
FILLFACTOR
and the
PAD_INDEX
options. The
PAD_INDEX
option uses the
FILLFACTOR
, and applies it to the intermediate index pages. For example, if a
FILLFACTOR
of 80 is specified, then the
PAD_INDEX
will use this value, and only fill 80% of the intermediate index page space, instead of leaving enough space for just one new row.
Sort In Tempdb (SORT_IN_TEMPDB)
Specifies to use tempdb to store intermediate sort results that are used to build the index. Although this increases the amount of temporary disk space that is used to create an index, it could reduce the time required to create or rebuild an index when tempdb is on a disparate set of disks from that of the user database.
Partition Keys
Select the key to use when partitioning the index. Partitioning the index can substantially reduce query time, improving the load time and maintainability of the index.
Compression
Specifies the data compression option for the specified table, partition number, or range of partitions. Options include:
NONE
: (Default) Table or specified partitions are not compressed.
ROW
: Table or specified partitions are compressed using row compression.
PAGE
: Table or specified partitions are compressed using page compression.
On Partitions
Specifies which partitions are affected. If this field is blank, the compression selection applies to all partitions of a partitioned index.
Oracle Index Storage Options
Tablespace (TABLESPACE)
Specifies the name of the tablespace where the index is stored.
Initial Transactions (INITTRANS)
Specifies the number of DML transactions for which space is initially reserved in the data block header. Oracle stores control information in the data block to indicate which rows in the block contain committed and uncommitted changes. The amount of history that is retained is controlled by this parameter. If too many transactions concurrently modify the same data block in a very short period, Oracle may not have sufficient history information to determine whether a row has been updated by a ""too recent"" transaction. Specify a higher value for indexes that may experience many transactions updating the same blocks.
Max Transactions
(MAXTRANS)
Once the space reserved by INITRANS is depleted, space for additional transaction entries is allocated out of any available free space. Once allocated, this space effectively becomes a permanent part of the block header. This parameter limits the number of transaction entries that can concurrently use data in a data block and therefore limits the amount of free space that can be allocated for transaction entries in a data block.
Percent Free (PCTFREE)
Specifies the maximum percentage of space in each data block to reserve for future updates. This reserved space helps to avoid row migration and chaining caused by an update operation that extends the length of a data row. Tables that will not be updated should have this value set to 0.
Initial Extent
(INITEXTENT)
Specifies the initial number of data blocks that Oracle should reserve. Oracle will reserve the number of data blocks that correspond to the initial extent for the rows of that table.
Next Extent (NEXT)
Specifies the size in kilobytes of the next extent. You should monitor this figure against the largest available chunk of free space in the tablespace. If a table cannot allocate its next extent, it will no longer be able to extend and, therefore, cannot accept additional data.
Percent Increase (PCTINCREASE)
Specifies the percentage by which the next extent should grow over the size of the previous extent. Be careful when setting Percent Increase because it magnifies how an object grows and, therefore, can materially affect available free space in a tablespace.
Min Extents (MINEXTENTS)
Specifies the number of extents to allocate when the segment is created. Controls free space fragmentation by making sure that every used or free extent is at least as large as the value you specify.
Max Extents (STORAGE (MAXEXTENTS))
Species the maximum number of extents that Oracle can allocate to the index. Once this limit is reached, Oracle prevents further growth of the cluster and cannot accept additional data. Carefully monitor the number extents already allocated to the index with this limit.
Postgre SQL Index Storage Options
Tablespace (TABLESPACE)
Specifies the name of the tablespace where the index is stored.
Sybase SQL Anywhere Index Storage Options
DB Space (IN)
Specifies where the index is stored.
Sybase System 10, ASE Index Storage Options
Segment (ON)
Specifies where the index will be stored.
Max Rows per Page (MAX_ROWS_PER_PAGE)
Specifies the maximum number of rows per page. This restricts the number of rows allowed on a page, reducing lock contention and improving concurrency for frequently accessed tables. The default value is 0, which creates clustered indexes with full data pages, non clustered indexes with full leaf pages, and leaves a comfortable amount of space within the index B-tree in both the clustered and nonclustered indexes.
For heap tables and clustered indexes, the range for
MAX_ROWS_PER_PAGE
is 0-256. For non clustered indexes, the maximum value for
MAX_ROWS_PER_PAGE
is the number of index rows that fit on the leaf page, without exceeding 256. To determine the maximum value, subtract 32 (the size of the page header) from the page size and divide the difference by the index key size.
Fill Factor (FILLFACTOR)
Specifies the percent or degree of index-page fullness. A low value provides room for index growth. A high value compacts the index. If an index is full (100 percent), any new inserts result in splitting nodes.
See Also
Creating and Editing Indexes
Partitioning a Table Index
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Defining_Index_Storage&oldid=6381
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Defining_Model_Options_for_the_Selected_Model,Defining Model Options for the Selected Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Overview
Model Options
for the selected model define naming rules, model notation, default datatype, datatype mappings, rolename prefixes, and the attributes order. Use Model Options also to synchronize entity and table names, and attribute and column names.
The preferences set here are maintained in the diagram
.dm1
file.
To set Model Options
Right-click the target model, and then click
Model Options
or go to
Model > Model Options.
Depending on the target model selected, the Logical Model Options or Physical Model Options dialog displays.
Complete the changes on the General Options and Name Handling tabs, and then click
OK
.
Note:
The options that appear depend on whether the selected model is a logical or a physical model type.
The following describe options that require additional explanation.
General Options tab
Name Handling Options tab
General Options tab
Name
Description
Max Table Name Length
or
Max Entity Length
Read-only
Platform-dependent value.
Auto Rolename Prefix
(
Logical Model Only
)
Specify a string to add to the beginning of all rolenames.
Varchar/Char Size Unit
(
Physical Model Only
)
Size unit measured by BYTE or CHAR to support the varchar2 data type.
FK Column Definition/Note Synchronization
(
Physical Model Only
)
Options include:
None
. The
Note
and
Definition
text from the parent PK columns is propagated when the relationship is created or a new column is added to the primary key. If there are any changes to the parent PK columns, then the changes are not synchronized with the child columns.
Partial
|| The
Note
and
Definition
text from the parent PK column is propagated when the relationship is created or a new column is added to the primary key and the text is kept synchronized with the parent PK columns as long as the text in the parent equals the text in the child. If the text in the foreign key attributes is changed in the child, the tie between the parent and child is broken.
PK Indexes
(
Logical Model Only
)
Select
Manual Sequence
to manually change the sequencing of primary key index columns using the Index Editor. Otherwise, you cannot manually change the sequence of the index.
Attribute Order
(
Logical Model Only
)
Select
Logical Order
to position all primary key columns before non-key columns. Select
Physical Order
to position the keys to mimic the order in the physical model, meaning that primary keys can appear before or after non-key columns. Select
Logical Order
to prevent primary keys from being reordered in the Entity Editor. If
Logical Order
is selected after selecting
Physical Order
, the primary keys in each entity are re-sequenced so they appear first in the attributes list.
Note:
Set the default column sequence for new models on the
Options Editor > Application tab
.
WARNING:
If the Display Level in the Diagram and Object Display Options editor does not match the Attribute Order designation in the Model Options, drag and drop errors and on-screen editing errors can occur. If the true attribute sequence, as designated in the Model Options and the displayed sequence, as designated in the Diagram and Object Display Options, are not synchronized, then ER/Studio Data Architect cannot make the appropriate changes to the entity.
View Parser
(
Logical Model Only
)
Determines which parser is used to validate the SQL produced when creating a View. This feature allows you to maintain and parse platform-specific syntax in the logical model. If you use the same parser for both the logical model and the targeted platform, then after generating a physical model you do not need to rewrite the View SQL.
Datatype Mapping
(
Logical Model Only
)
If you have customized a datatype mapping for the selected database platform, from the Datatype Mapping list you can choose an alternate mapping or the system mapping, which is the default.
Note:
Custom datatype mappings are created using the Datatype Mapping Editor
Tools > Datatype Mapping Editor
.
Show Containment Properties
(
Logical Model Only
)
Check this option to display containment properties in the Relationship Editor dialog box.
Name Handling Options tab
Sets the synchronization level between entity and table names.
Name
Description
Complete Synchronization
Matches table and column names with their associated entity and column names. Both names are always synchronized.
Partial Synchronization
Automatically synchronizes table and column names with their associated entity and attribute names unless you edit the table name, which breaks the synchronization so that the names can be different. If names are the same, editing the entity name updates the table name.
No Synchronization
Prompts you to manually specify both sets of names. Entity and table names are separate. Also, the rolenames link is broken so that in a foreign key relationship child and parent attributes can have different names.
Enable Logical Name Editing
Enables corresponding objects to be directly edited from the table or entity editor. For example, attribute names can be edited from the Table Editor and column names can be edited from the Entity Editor.
See Also
Configuring and Customizing
Data Modeling Fundamentals
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Defining_Model_Options_for_the_Selected_Model&oldid=6955
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Defining_Source_Systems,Defining Source Systems,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
Data sources can originate from models in the active diagram (local models), from external sources imported into the active diagram, or from a data sources created on the Data Lineage tab. You can import the source  from
*.dm1
files,
*.dt1
files, database or SQL files, flat files, and other common application files. Potential sources from the open diagram are found on the Data Lineage tab, which can be seen by expanding
Data Sources > Local Models
.
Note:
Source data imported through the Data Lineage tab only includes information such as table and column name, datatype, nullability, primary key, and column definitions. To obtain more details, reverse engineer the database or import it into ER/Studio Data Architect using the Metadata Wizard.
Contents
1
Creating a New Source
1.1
General tab
1.2
Model Usage tab
2
Importing External Source into Other Sources
3
See Also
Creating a New Source
From the Data Lineage tab, expand the
Data Sources
node.
Right-click
Other Sources
, and then click
New Source
.
Complete the Data Source Properties dialog as required, and then click
OK
when complete.
The new source appears under the
Other Sources
node with one empty object node, which may be Tables or Entities depending on the data source type defined. You can edit the new source model by expanding the
Other Sources
node, and then the new source node. Then, right-click the source object, and select
Add Table/Entity
to launch the Table or Entity Editor.
The following describe options require additional explanation:
General tab
General Properties
Name
. The name you give it here appears as a data source in the
Other Sources
node within the Data Lineage tab.
Type
. Select the source type. This setting affects available options in the Connectivity group. For example, select
Relational
for a DBMS such as MySQL.
Connectivity Properties
.
Host, Server/Service, Port
. For connecting to an external DBMS. For an existing ER/Studio Data Architect physical model, leave blank.
DBMS Type
,
Version
,
Location/Path
,
File Type
,
Encoding
. These settings depend on the Type selected above.
Model Usage tab
This is a read-only display of the source defined on the General tab. Ensure that it matches your intentions.
Importing External Source into Other Sources
From the Data Lineage tab, expand the
Data Sources
node.
Right-click
Other Sources
, and then click
Import New Source
.
Complete the Data Source Properties dialog as required, and then click
OK
when complete.
The new source appears under the
Other Sources
node.
The following options require additional explanation:
Page 1 - Please select where you would like to import the source metadata from
From a Repository based DM1 file
. Lets you obtain source from data models and Named Releases managed within the Repository. When you select this option, ER/Studio Data Architect opens the Repository Operation Status dialog box and the Get From Repository dialog box. This process connects to the current Repository Server defined in the Repository settings. The Import Source wizard automatically gets the diagram.
From an SQL file
. ER/Studio Data Architect imports the SQL file.
Compare against a live database
. If you select this option, a page appears where you can select the database and connection type. The connection type can be either ODBC or Native/Direct Connection. For information about connecting to databases, including troubleshooting information, see
Connecting to Database Sources and Targets
.
Comparison Quick Launch
. The Compare Quick Launch data is saved as an *.rvo file. For information on using the Quick Launch option in the wizard, see
Saving and Using Quick Launch Settings
.
Page 5 - Results
Current and Target Model Display Grid
. Between the Source and Target models is a
Resolution
column. The default merge decision is
Merge the data into the new source file
. You can click on any item in the
Resolution
column to enable the decision list. If you want to change the decision, click the list, and then click the new resolution. When you change the default resolution of an object, the decisions of their dependent properties and objects are automatically updated. You can also click the category folders, like the Tables Resolution column to change all the decisions for all the underlying objects in that object category. Use the CTRL key to select multiple items, and then right-click to enable the decision list.
SQL Difference
. To enable the SQL Difference utility, select any difference that is a long text field, such as a Definition, Note, or DDL, and then click SQL Difference to view the differences between the SQL of the models. This utility only allows you to view the differences; difference resolutions are performed on the Results page of the Compare and Merge Utility.
Filter Report on Results
. Create a report of the source content and your chosen resolutions. You can choose to create an HTML or an RTF report.
You can modify the default display using the options at the bottom of the page.
See Also
Relating Source and Target Models
Creating and Editing Data Lineage Data Flows
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Defining_Source_Systems&oldid=7456
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Defining_Valid_Attribute_Data_Using_Reference_Values,Defining Valid Attribute Data Using Reference Values,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Contents
1
Reference Value tab
2
Definition tab
3
Attachment Bindings tab
4
Binding Information tab
5
See Also
Reference Values are attributes that define allowed data. They represent look-up table columns, code-value ranges, or a rule or constraint applied to a column. Reference values can be defined as a range of values or as an itemized list.
You can import or export multiple Reference Values from Excel using a macro. On the Macro Tab of the Data Model Explorer, choose
SampleMacros > Import Reference Values from Excel
for information on different macros.
In the
Data Dictionary
, right-click the
Reference Values
node and then click
New Reference Value
.
Define the reference value as required and then click
OK
to complete the editor.
Once created, you can edit the reference value by double-clicking it to launch the editor.
The following helps you complete the Reference Value Editor:
Reference Value tab
Definition tab
Attachment Bindings tab
Binding Information tab
See Also
Reference Value tab
Values 'NOT' Between
: If selected, lets you define a range of values for the bound domain, attribute, or column that are not considered valid.
Reference Value Type
:
By Range
: If selected, lets you define a range of values for the bound attribute, domain, or column. enter values in the Minimum and Maximum fields in the Reference Value Range section.
By List
: If selected, lets you define a list of values for the bound attribute, domain, or column. If you select By List, the Editor changes to display a Value and Value Description box. Double-click in the Value field in the first line of the table and enter a value. To enter a description, double-click the Value Description field for the first line to enter a corresponding description. Continue entering values in this manner until you have entered all desired values. The blank line at the end of the list is disregarded when saving the Reference Value.
Definition tab
Enter or edit a definition for the reference value. This description helps you to document the usage of the reference value.
Attachment Bindings tab
Bind an external piece of information, or attachment to the reference value. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the reference value before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Binding Information tab
Select which object classes and/or specific objects can use this reference value. You can override this setting using the Reference Values tab of the data model object editor.
See Also
Determining Which Objects are Bound by Data Dictionary Objects
Changing Data Dictionary Object Bindings and Values
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Defining_Valid_Attribute_Data_Using_Reference_Values&oldid=5131
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Defining_the_Default_View_Settings_for_New_Models,Defining the Default View Settings for New Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Database Views
Choose
Tools > Options
, and then click the
Display
tab.
Complete your setting selections in the
View Display Settings
area.
Click the
View
tab.
Complete your setting selections and then click
OK
.
You can override the settings here for a specific model or submodel using the options in
View > Diagram and Object Display Options > View
.
The following describe options that require additional explanation:
View Reverse-Engineer/Import > Import Invalid Views
: Lets you import invalid views when importing a data model or reverse-engineering a database.
Duplicate View Column Name Resolution
Prompt
: Prompts for column aliases to differentiate between columns whenever duplicate column names exist.
Don't propagate
: Eliminates duplicate column names from the SELECT clause of the SQL statement generated to create the view.
Attach prefix and/or suffix
: Appends a prefix or suffix to the column names to differentiate between duplicate column names. The prefix is comprised of the entity name and an underscore character. The suffix is comprised of sequential numbering.
View Column Propagation > Don't propagate any columns
: Does not automatically propagate any columns to a view. You can select the columns to include in the View Editor.
Column Sorting
: Sets column sorting hierarchy.
The Column Sorting setting determines the column order in the DDL SELECT statement.
See Also
Common Tasks
Creating and Editing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Defining_the_Default_View_Settings_for_New_Models&oldid=5132
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Deleting_Diagrams_from_the_Repository,Deleting Diagrams from the Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
The Delete Diagram operation lets you delete a diagram from the Repository. This also renders the diagram on the local disk unusable.
Note:
This is a destructive action. Before deleting a diagram, notify other users who may be currently accessing it. Save the diagram under a different name on your local disk in case you need to access it again.
Log in to the Repository.
Choose
Repository > Diagram > Delete a Diagram
.
In the
Select a Diagram to Delete
dialog, select the diagram to delete.
Select the
Leave Diagram Data behind and marked as Deleted
check box.
Although not required, use this option because it will prevent total loss of the diagram. With this option selected, the diagram can later be retrieved if necessary.
Click
OK
.
Additional Information
When you delete a Diagram from the Repository, the local copy of the Diagram is also deleted. If you want to save your local copy of the Diagram, you must rename the
*.DM1
file.
When deleting a diagram, ER/Studio Data Architect leaves diagram data behind and marks it as deleted. If deleted, data is still present in the Repository but visible only when querying the Repository directly, not through ER/Studio Data Architect client.
See Also
Determining Who has an Object Checked Out
Rolling Back a Diagram to a Previous Version
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Deleting_Diagrams_from_the_Repository&oldid=5133
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Deleting_an_Object,Deleting an Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
On the Data Model Explorer or Data Model Window, right-click the object to delete, and then click
Delete
from the shortcut menu.
Click
Yes
.
Notes
When you right-click a submodel object, there is no Delete option. Instead, there is an option to Remove. When you remove an object from a submodel, the object remains in the Main model unless you select Delete from Model from the dialog that appears.
To select multiple entities, press and hold CTRL while clicking the entities.
To delete an attribute, select the attribute in the Data Model Explorer or double-click the parent entity or table in the Data Model Window to bring up the entity or table editor. In the editor, you can select the attribute to delete and then click Delete.
When deleting a relationship, you can either delete the relationship entirely or, by selecting Make Foreign Keys Native in the dialog that displays, you can choose to convert the foreign key relationship to an attribute of the child entity or table.
See Also
Renaming an Object
Editing an Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Deleting_an_Object&oldid=5134
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Determining_Where_an_Enterprise_Data_Dictionary_is_Used,Determining Where an Enterprise Data Dictionary is Used,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
Before changing an Enterprise Data Dictionary, you may want to know which diagrams use the dictionary.
Choose
Repository > Data Dictionary > Enterprise Data Dictionary Bindings
.
See Also
Creating an Enterprise Data Dictionary
Associating a Data Dictionary with a Diagram
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Determining_Where_an_Enterprise_Data_Dictionary_is_Used&oldid=5135
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Determining_Which_Objects_are_Bound_by_Data_Dictionary_Objects,Determining Which Objects are Bound by Data Dictionary Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
The View Bindings dialog box displays the names of the attributes or columns to which the selected Data Dictionary object is bound. Selected objects show which domains are bound to which attributes and columns.
On the
Data Dictionary
tab, navigate to the dictionary object you want to investigate, such as a specific rule.
Right-click the data dictionary object and select
View.... Bindings
, where... is the name of the data dictionary object.
Notes
The View Bindings dialog is read-only.
To unbind an object, use the Binding Information tab of the data dictionary object editor or the relevant tab of the editor of the database class or object you want to unbind.
See Also
Changing Data Dictionary Object Bindings and Values
Importing a Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Determining_Which_Objects_are_Bound_by_Data_Dictionary_Objects&oldid=5136
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Determining_Who_has_an_Object_Checked_Out,Determining Who has an Object Checked Out,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
At any time while logged in to the Repository, you can see who has any part of a diagram checked out; this includes viewing the checkout status of everything from attributes to submodels and data dictionaries to entire diagrams, and everything in between.
Open a Repository diagram and then log in to the Repository.
On the
Data Model
,
Data Dictionary
,
Data Lineage
, or
Macros
tab, navigate to the object you want to investigate.
Right-click the object and then click
Version History
.
On the Version History dialog, click CheckOut Status.
ER/Studio Data Architect queries the Repository for the latest status.
The following describes the fields of the dialog that require additional explanation:
User Name
: The Repository login ID of the user who has the object checked out.
Machine Name
: The name of the computer, as defined in the Windows System Properties, that was used when the object was checked out.
See Also
Viewing the Checkin History of a Repository Object
Saving Changed Items to the Repository (Checking In)
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Determining_Who_has_an_Object_Checked_Out&oldid=5137
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Developing_a_Data_Model,Developing a Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Modeling Fundamentals
The following overview outlines the ER/Studio Data Architect data model development process, which is an iterative process:
Starting With a Basic Data Model
Creating a Basic Data Model
Reverse Engineering a Database
Importing a File to Create a New Database
Ensuring Data Integrity
Automating Data Model Creation and Maintenance
Fine Tuning the Data Model
Securing the Data Model
Preparing for Review and Implementation
Maintaining the Data Model
Starting With a Basic Data Model
You can start from scratch or reverse engineer an existing database.
Creating a Basic Data Model
Create a new data model
.
Add entities
.
Define entity attributes
.
Establish relationships between entities
.
Assign keys
.
Reverse Engineering a Database
Reverse engineer a database
.
Importing a File to Create a New Database
Import data from a variety of sources to create a new database. See
Importing a Model from an ERX File
and
Importing a Model from a SQL File
for further details.
Ensuring Data Integrity
Ensure object names conform to business standards by creating and applying naming conventions
.
Ensure data values are within a specified range or that they match a value defined in a list by defining reference values
.
Ensure data input in tables or column is valid by add rules
.
Automating Data Model Creation and Maintenance
Accelerate entity creation and updates by creating domains
.
Assist user data entry by assigning default values
.
Create macros to perform repetitive tasks
.
Define default values for attributes, domains, and user datatypes
.
Add reusable procedural logic
.
Fine Tuning the Data Model
Validate the model
.
Customize the datatype mappings
.
Create user-defined datatypes for domains and attributes
.
Generate a physical model
.
Normalize to reduce data redundancy
.
Denormalize to improve performance
.
Securing the Data Model
Check the data model in to the Repository
.
Prevent the data model from being updated or viewed by unauthorized persons by creating Users, Groups. and Roles and apply them to the data model. See
Creating and Editing Database Users
and
Creating and Editing Database Roles
for more information.
Prevent the database from being updated or viewed by unauthorized persons by creating Users and Roles and apply them to the data model. See
Creating and Editing Database Users
and
Creating and Editing Database Roles
for more information.
Specify data security information
.
Preparing for Review and Implementation
Customize the model display
.
Provide additional documentation for data model reviewers by creating attachments
.
Document data lineage
.
Create reports for distribution
.
Make it easy for users to access the data by providing a dimensional mode
.
Generate SQL to implement the database
.
Maintaining the Data Model
Ensure the model is updated from the correct sources by documenting data lineage
.
As the physical database is updated, synchronize the physical database model with the physical database
.
As the physical database model is updated, synchronize the logical database with the physical database
.
As updates are required, check out portions of the data model from the Repository
.
See Also
Data Modeling Concepts
Customizing the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Developing_a_Data_Model&oldid=5328
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Developing_the_Logical_Model,Developing the Logical Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
A logical model is developed before the physical model. It addresses the business and functional requirements of systems development. The logical design allows you to determine the organization of the data that you need to store in a database before you create the database; it serves as a blueprint.
To design the most effective data model possible, you should focus on the logical design before developing the physical design. Both the logical and physical design processes are complex so it is best to separate rather than to mix the two. A sound logical design should streamline the physical design process by clearly defining data structures and the relationships between them.
A data model can be extremely useful for other things besides creating databases, though that is generally its primary purpose. In systems development, the goal is to create an effective database application that can support some or all of your enterprise. However, a data model of your business can help you define operational aspects of your business that you might otherwise overlook. Also, a well-defined data model that accurately represents your business can be helpful in orienting employees to goals and operations. The data model can also serve as an invaluable communications tool for both internal and external constituents.
For more information, see the following topics:
Logical Design Concepts
Creating and Editing Entities and Tables
Creating and Editing Keys
Creating and Editing Business Data Objects
Associate Similar Objects Using User-Defined Mappings
Working with Relationships
Working with Universal Mappings
Validating the Model
Creating and Editing Database Users
Creating and Editing Database Roles
Creating and Editing SQL Procedures
Customizing Datatype Mappings
See Also
Developing the Physical Model
Common Tasks
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Developing_the_Logical_Model&oldid=5139
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Developing_the_Physical_Model,Developing the Physical Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
In order to create a database, ensure you have the client software installed and are using the correct connection strings. For more information, see
Connecting to Database Sources and Targets
.
If you do not have the client connection software for the platform for which you want to create a database, you can generate a physical model from the logical model (See
Generating a Physical Data Model
), and then change the database platform to the target database. You can then access the Database Wizard to create the DDL required to create the database.
Generally, a logical data model represents business information and defines business rules, and a physical data model represents the physical implementation of the model in a database. The physical design addresses the technical implementation of a data model, and shows how the data is stored in the database. For example, you can specify the datatype of each column in the table, and determine how tables will be stored in the database.
To design the most effective data model possible, focus on the logical design before developing the physical design. A physical data modeler should have the technical-know-how to create data models from existing databases and to tune the data models with referential integrity, alternate keys, indexes and how to match indexes to SQL code. In systems development, the goal is to create an effective database application that can support some or all of your enterprise.
The physical design focuses on performance and tuning issues for a particular database platform. A highly normalized database design often results in performance problems, particularly with large data volumes and many concurrent users. These problems are often due to complex query patterns, the cost of multi-table joins, and the high I/O intensity of querying or modifying large tables. When addressing performance problems, you should consider the following physical design issues:
Transforming Model Objects from Logical to Physical
: How the elements of a physical model correspond to the elements of the corresponding logical model.
Optimizing Query Performance on the Physical Model (Denormalizing the Physical Model)
: How to modify the logical design to increase the efficiency of database operations.
Creating and Editing Indexes
: How to create indexes to increase the efficiency of read operations (queries) without sacrificing the efficiency of write operations (insert, update, delete).
Physical Storage Considerations
: How to determine the physical storage of the tables and indexes in the database to maximize efficiency and allow for growth.
For information on physical data model objects in ER/Studio Data Architect, see the following topics:
Creating and Editing Entities and Tables
Creating and Editing Attributes and Columns
Customizing Table DDL
Creating and Editing Indexes
Defining Table Storage
Creating and Editing Database Dependent Objects
Creating and Editing Collections
See Also
Creating and Editing Relationships
Upgrading Diagrams with Denormalization Mappings
Synchronizing Physical and Logical Models
Planning for and Predicting Database Growth
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Developing_the_Physical_Model&oldid=5140
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Diagram_Data_Version_Upgrade,Diagram Data Version Upgrade,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Repository Administration
This procedure is only for the installations which include
Repository
. Once the
Team Server
and
Repository
upgrade is complete, and before users on client machines start working with their diagrams, the Administrator must update the diagram versions on
ER/Studio Data Architect
.
Be sure to backup or delete your existing local copies of diagrams before you check out any diagrams or do any work with the new version of
ER/Studio Data Architect
.
WARNING:
Upgrading a large number of diagrams is time consuming and memory intensive. The number and size of ER/Studio Data Architect diagrams managed in the upgraded Repository dictates the length of the upgrade process.
To upgrade one or more diagram data versions
Start
ER/Studio Data Architect
.
Update the
Repository
options to recognize the new server, in case it has changed. Go to
Repository > Repository Options
, and in the
Server Machine
box, type the host name or IP address of the Repository machine, and then click
OK
.
Log on to the
Repository
using an account with
Super User privileges
.
Make sure no diagrams are open. The Repository Administration menu is not available if there are any open diagrams.
Run the
Diagram Data Version Upgrade
utility as follows:
Go to
Repository > Administration > Diagram Data Version Upgrade
.
Use the available checkboxes to select the diagram(s) you want to upgrade, and then click
OK
. Once complete, ERDA lets you know the number of diagrams upgraded, a list of any diagrams that failed, and the overall time taken to perform the process.
Notes
By default, the Super User role is assigned to the Admin user. The default Admin user name and password are: Admin and Admin.
Named Releases are not upgraded in the
Repository
. You can upgrade your local copy by opening it in the current version of
ER/Studio Data Architect
.
After the diagrams are updated, each user should perform a clean get of all Repository diagrams they were working on previously.
See Also
Creating and Managing Roles
Creating and Managing Groups
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Diagram_Data_Version_Upgrade&oldid=7449
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Dimensional_Table_Types_Indepth,Dimensional Table Types Indepth,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Fact
2
Dimension
3
Snowflake
4
Bridge
5
Hierarchy Navigation
6
Undefined
7
See Also
In a dimensional model, each table is assigned a Table Model type, which is distinguished by an icon displayed in the upper left of the entity or table box. You can further define a table in the Table Editor by assigning it a Table Type that displays at the bottom of the table. The Table Type does not change how the data is handled but provides information to the reader about the data in the table:
ER/Studio Data Architect supports the following Dimensional table types:
Fact
Tables with one or more foreign keys and no children.
Fact tables contain individual records, the data for which the database is being designed. Fact tables are the central tables in a star schema.
ER/Studio Data Architect allows you to further define fact tables as one of the following types:
Aggregate
: Contains information that is more coarsely granulated than the detail data contained in other tables. For example, in a retail, transactional database, you can have a Sales_Receipts fact table that contains information about individual sales, and a Sales_Monthly aggregate table that aggregates information from the Sales_Receipts table to present information such as monthly sales totals for software, hardware, and services. Aggregates provide quick access to data during reporting; like indexes they improve performance.
Atomic
: Contains detail information, such as the Sales_Receipts table in the discussion above.
Cumulative
: Contains cumulative information such as how long it took to complete the sale by accumulating the time it took between the date of sale and the shipping date for each line item of the sales receipt.
Snapshot
: Contains time-related information that detail specific steps in the life on the entity. For example, snapshot information for a sale could contain information such as when the order was created, committed, shipped, delivered, and paid for.
Dimension
Parents of fact tables.
Dimension tables contain groups of related data, such as dates, hours, minutes, and seconds, represented by one key such as time in a fact table.
ER/Studio Data Architect allows you to further define dimension tables as one of the following types:
Fixed Dimension
: The values in the table are not expected to change.
Degenerate
: A degenerate dimension is derived from the fact table. Degenerate dimensions are useful when the grain of a fact table represents transactional level data and you want to maintain system-specific identifiers such as order numbers and invoice numbers without forcing them to be included in their own dimensions. Degenerate dimensions can provide a direct reference to a transactional system without the overhead of maintaining a separate dimension table. For example, in the sample model, Orders.dm1, you could create a degenerate dimension that references the Commission Credit ID, Payment Detail ID, and Sales Order ID from the Commission Credit, Payment Detail, and Sales Order Line ID fact tables respectively,
Multi-Valued
: A multi-valued dimension can help you model a situation where there are multiple values for an attribute or column. For example, a health care bill has a line item of Diagnosis, for which there could be multiple values. Best practice modeling dictates that there should be a single value for each line item. To model this multi-valued situation, you could create a multi-valued table that would capture the diagnosis information and weighs each diagnosis, so that the total adds up to one. This weighting factor allows you to create reports that do not double count the Billed Amount in the fact table.
Ragged
: In a ragged dimension, the logical parent of at least one member is missing from the level immediately above the member. Ragged dimensions allow for hierarchies of indeterminate depth, such as organizational charts and parts explosions. For example, in an organization some employees can be part of a team which is managed by a team leader, while other employees report directly to the department manager. Another example of a ragged dimension is illustrated in the model below which shows that cities such as: Washington, D.C.; Vatican City; and Monte Carlo do not belong to states.
Shrunken
: A shrunken table is a version of the fact table that it is attached to but with fewer attributes in order to draw attention to those specific attributes.
Slowly Changing Type 0, 1, 2, 3, 6
: Slowly changing dimensions capture information such as the customerï¿½s income level or income-to-debt ratio which can change overtime. The most commonly used methods to maintain these changes are:
Type 0
: No effort has been made to deal with the changes.
Type 1
: Overwrites the existing dimension member values. Does not track the change history.
Type 2
: Creates a new row with the current dimension member. Tag the original row as expired.
Type 3
: Used for dimensions that change with a predictable rhythm, such as every year. Every dimension row has a
current
category attribute that can be overwritten as well as attributes for each annual designation, such as 2008 category and 2009 category.
Type 6
: Combines the approaches of types 1, 2, and 3. For changes to this type of table, the row is overwritten but the table can contain an additional pair of date columns to indicate the date range at which a particular row in the dimension applies, or the table can contain a revision number.
Snowflake
Parents of dimension tables.
Snowflake tables present a more-normalized format where elements of dimension tables are listed. The following example shows two snowflake tables which are parents of a dimensional table. There are many other good examples or snowflake tables in the sample model, Orders.dm1.
Bridge
Implements a many-to-many relationship. Bridge tables support multi-valued dimensions or complex hierarchies. The Bridge is also known as a helper table or an associative table. It is the only way to implement two or more one-to-many relationships or many-to many relationships.
Hierarchy Navigation
Used to support complex hierarchies, such as organizational charts.
Undefined
All other tables. Assign this type to flag tables for which you have not yet determined the appropriate type, such as a table with a many-to-many relationship, or a table that is a parent to both a fact table and a dimension table.
See Also
Changing the Model Notation
Dimensional Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Dimensional_Table_Types_Indepth&oldid=5141
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Discarding_Changes_Made_to_a_Checked_Out_Diagram,Discarding Changes Made to a Checked Out Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
If you have checked out a diagram, made changes to it, and want to undo all the changes you made you can undo the check out.
Log in to the Repository and open the target diagram.
To discard the changes, without checking out the diagram again
, choose
Repository > Diagrams > Undo Diagram Check Out.
To discard the changes, and check out the diagram again
, choose
Repository > Diagrams > Redo Diagram Check Out.
This refreshes the local copy of the diagram with the latest version from the Repository.
See Also
Saving Changed Items to the Repository (Checking In)
Viewing the Checkin History of a Repository Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Discarding_Changes_Made_to_a_Checked_Out_Diagram&oldid=5142
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Distributing_Columns_for_Amazon_Redshift,Distributing Columns for Amazon Redshift,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Tables
The Distribution tab of the Table Editor for the Amazon Redshift platform allows you to create the DISTSTYLE and DISTKEY clauses for a table. The Distribution Style allows you to choose between one of the following values:
AUTO
KEY
: Distribution Keys (DISTKEY) means the data is distributed by the values in the DISTKEY column(s). When join columns of joining tables are set as distribution keys, the joining rows from both tables are collocated on the compute nodes. This allows the optimizer to perform joins more efficiently. When DISTSTYLE of KEY is specified, one or more DISTKEY columns must be specified for the table.
EVEN
: EVEN means that data in the table spreads evenly across the nodes in a cluster in round-robin distribution determined by Row IDs. The result is the distribution of approximately the same number of rows to each node. EVEN is the default distribution style and assumed unless a different DISTSTYLE is specified.
ALL
: ALL means that a copy of the entire table is distributed to every node. This distribution style ensures that all the rows required for any join to this table are available on every node. The downside is that it multiplies storage requirements, increases load time, and increases maintenance times for the table. ALL distribution can improve execution time when used with certain dimension tables where KEY distribution is not appropriate. It is generally suited to small tables used frequently in joins.
This translates to the DISTSTYLE clause of the DDL.
When the distribution style is chosen as KEY, the
Distribution Keys
selection is enabled and allows you to choose the distribution key column. This translates to the DISTKEY clause in the DDL.
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Sorting Tables for Redshift
Encoding Property for Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Distributing_Columns_for_Amazon_Redshift&oldid=5540
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Distributing_Columns_for_GreenPlum,Distributing Columns for GreenPlum,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
The Distribution tab of the Table Editor for the GreenPlum platform allows you to create the DISTRIBUTED BY or DISTRIBUTED RANDOMLY statements that specify the distribution key. If you do not specify the columns of the distribution key and do not activate the random distribution option, the GreenPlum server will assign to the distribution key by default by the first column created in the table.
Available Columns
: Displays all the columns available to add to the distribution key. Select the column you want to add to the distribution key and move it to the Selected Columns box. Use the left and right arrows to move columns to and from the Selected Columns box. When no unique indexes or primary key columns are specified, this list includes all the columns of the table.
Selected Columns
: Displays the columns that make up the distribution key.
Up
/
Down
buttons: Let you reorder the columns in the distribution key. The column order can affect the access speed. The most frequently accessed columns should be at the top of the Selected Columns list. The Up/Down buttons are disabled when a single unique or primary index exists. In that case, the columns in the distribution key will be ordered automatically to must match the order of the index columns.
Random
: This option is available on if there are no unique indexes or primary keys specified for the table. If selected, the table is created using a random round-robin distribution key.
Completing this tab with the Random option selected will produce SQL code similar to the following:
CREATE TABLE ""Entity1""(
""PK1"" CHAR(10) NOT NULL,
""A1"" CHAR(10),
""A2"" CHAR(10),
)
DISTRIBUTED RANDOMLY
Selecting PK1 to be the only column in the distribution key will produce SQL code similar to the following:
CREATE TABLE ""Entity1""(
""PK1"" CHAR(10) NOT NULL,
""A1"" CHAR(10),
""A2"" CHAR(10),
CONSTRAINT ""PK1"" PRIMARY KEY (""PK1"")
)
DISTRIBUTED BY (""PK1"")
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Distributing_Columns_for_GreenPlum&oldid=5143
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Distributing_Columns_for_IBM_DB2_for_LUW_9.x_(and_later_versions),Distributing Columns for IBM DB2 for LUW 9.x (and later versions),"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
For IBM DB2 for LUW 9.x (and later versions). The Distribute Columns tab of the Table Editor allows you to create the DISTIBUTE BY... statement for IBM DB2 that specifies how the table should be distributed across databases partitions within a single tablespace.
Available Columns
: Displays all the columns available to add to the partition. Select the column you want to add to the partition and move it to the Selected Columns box.
Selected Columns
: Displays the columns that make up the partition key. This guides how data is divided along the partition boundaries. Typically, a partition key is date-based or based on a numerically ordered data grouping. Use the left and right arrows to move columns to and from this grid. Columns that are in this grid make up the partition.
Up
/
Down
buttons: Let you reorder the columns on the partition. The partition order can affect the access speed. The most frequently accessed columns should be at the top of the partition list.
By Hash
: For IBM DB2. If selected, ER/Studio Data Architect partitions the table according to a hash function, which can speed up table lookup or data comparison tasks.
Completing this tab will produce SQL code similar to the following:
CREATE TABLE Entity1(
PK1 CHAR(10) NOT NULL,
A1 CHAR(10),
A2 CHAR(10),
CONSTRAINT PK1 PRIMARY KEY (PK1)
)
DISTRIBUTE BY HASH (PK1,A1)
A column cannot be used as part of a distribution key if the data type of the column is LONG VARCHAR, LONG VAR GRAPHIC, BLOB, CLOB, DATALINK, XML distinct type on any of these types, or structured type. Available columns are limited to columns that are common to all existing PKs or unique constraints.
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Distributing_Columns_for_IBM_DB2_for_LUW_9.x_(and_later_versions)&oldid=5144
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Distributing_Columns_for_Netezza,Distributing Columns for Netezza,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
The Distribute tab of the Table Editor for the Netezza platform allows you to create the DISTRIBUTE ON statement that specifies the distribution key. The distribution key is used by the SPUs ( Snippet Processing Units or intelligent storage nodes) to store data on the server. If you do not specify the columns of the distribution key and do not activate the random distribution option, the Netezza server will assign to the distribution key by default the first column created in the table.
Available Columns
: Displays all the columns available to add to the distribution key. Select the column you want to add to the distribution key and move it to the Selected Columns box. Use the left and right arrows to move columns to and from the Selected Columns box. You can select a maximum of four columns to use in the distribution key.
Selected Columns
: Displays the columns that make up the distribution key.
Up
/
Down
buttons: Let you reorder the columns in the distribution key. The column order can affect the access speed. The most frequently accessed columns should be at the top of the Selected Columns list.
Random
: If selected, the table is created using a random or round-robin distribution key.
Completing this tab with the Random option selected will produce SQL code similar to the following:
CREATE TABLE Entity1(
PK1 CHAR(10) NOT NULL,
A1 CHAR(10),
A2 CHAR(10),
CONSTRAINT PK1 PRIMARY KEY (PK1)
)
DISTRIBUTE ON RANDOM
Selecting PK1 to be the only column in the distribution key and not selecting Random will produce SQL code similar to the following:
CREATE TABLE Entity1(
PK1 CHAR(10) NOT NULL,
A1 CHAR(10),
A2 CHAR(10),
CONSTRAINT PK1 PRIMARY KEY (PK1)
)
DISTRIBUTE ON (PK1)
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Distributing_Columns_for_Netezza&oldid=5145
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Documenting_Column/Attribute_ETL,Documenting Column/Attribute ETL,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
At the column/attribute level, you can document how data is transformed as it moves from one system to another, by adding transformation logic for source/target attribute mapping. You can map multiple source/targets to one column/attribute in the physical/logical model.
You can register the same source/target or physical model more than once for a given physical model. For example, in the Adventure Works.dm1 model, you can register the Adventure Works physical model to the Adventure Works DW physical model as a direct source AND direct target if the data warehouse is used for analytical reporting and to perform some data cleansing. Additionally, you can also register the Adventure Works physical model to the Adventure Works DW physical model as both a secondary source and direct source.
Document column/attribute data sources
From the
Data Model
tab, navigate to and then double-click the table/entity whose data lineage you want to document.
In the table/entity editor, select the column or attribute to document and then click the
Data Lineage
tab.
Click the
Direct Sources
tab.
Click
Edit
.
In the
Edit Source/Target Mappings
dialog, select from the list of sources to map to your target and edit the transformation logic accordingly.
A description is optional, but a very good engineering practice vital to maintainability.
Continue in the same manner as above, to map secondary sources, and direct and secondary targets.
Click
OK
to exit the editor.
See Also
Documenting Table/Entity Data ETL
Documenting Data Extraction, Transformation, and Load
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Documenting_Column/Attribute_ETL&oldid=5146
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Documenting_Data_Extraction,_Transformation,_and_Load","Documenting Data Extraction, Transformation, and Load","From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
This section is comprised of the following topics:
Introduction to Data Lineage
Data Lineage Workflow
Creating and Editing Data Lineage Data Flows
Defining Source Systems
Relating Source and Target Tables and Columns
Assigning Model Data Movement Properties
Creating and Editing Data Lineage Data Flows
Documenting Table/Entity Data ETL
Documenting Column/Attribute ETL
See Also
Tutorials: Documenting an Existing Database
Exporting a Data Model to XML
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Documenting_Data_Extraction,_Transformation,_and_Load&oldid=5147
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Documenting_Table/Entity_Data_ETL,Documenting Table/Entity Data ETL,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
Use the Data Lineage tab of the entity or table editor to document how often the table/entity data is sourced and when it was last sourced. Once you have created data movement rules in the Data Lineage Explorer, you can apply these rules to the selected table/entity. You can associate as many data movement rules as you want to the table/entity. You can report data movement rules when creating reports, generating SQL or XML Schema, or Metadata is exported.
Document table data movement
From the
Data Model
tab, navigate to and then double-click the table/entity whose data lineage you want to document.
In the Table Editor, click the
Data Lineage
tab.
Complete the
Data Lineage
dialog as required and then click
OK
to exit the editor.
See Also
Data Lineage Workflow
Documenting Data Extraction, Transformation, and Load
Documenting Column/Attribute ETL
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Documenting_Table/Entity_Data_ETL&oldid=5148
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/ETL,ETL,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
About Data Lineage for ER/Studio
Data Lineage for ER/Studio gives data management professionals and business users essential insight to the extracts, transformations, and loads of complex enterprise data. Data governance and organizational compliance is supported with detailed metadata management for risk reduction and data discrepancy isolation. Labor-intensive data quality-related research can be achieved in a fraction of the time.
With a Data Lineage for ER/Studio license you can add to the benefits of the MetaWizard Import.
To see instructions on this, please see
ETL Import
.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=ETL&oldid=7975
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/ETL_Import,ETL Import,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
ETL
When using the MetaWizard Import in tandem with a Data Lineage for an ER/Studio license, the imported data lineage information from ETL tools such as Microsoft SQL Server Integration Services (SSIS) is imported and appears in Data Flows in the Data Lineage tab.
To import with the MetaWizard Import after registering the Data Lineage license
In ER/Studio ER/Studio Data Architect,  click
Tools > Import File > From External Metadata
.
In the Import External Metadata and ETL Mappings dialog, use the
Import from
drop-down list to select the tool from which you want to import ETL/Data Lineage information. ER/Studio ER/Studio Data Architect displays related information below the
Available Options
.
Note:
Click inside the
Value
column to enable editing. Items with a red dot usually indicate information that you must provide.
Continue with the wizard until complete, selecting the necessary options such as the level of consistency checking, etc.
When the import is complete, you can view your Data Flows using the Data Lineage tab of the Model Explorer.
See Also
ETL
Data Lineage Workflow
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=ETL_Import&oldid=6462
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Editing_an_Object,Editing an Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
On the Data Model Explorer or Data Model Window, double-click the object that you want to edit.
An object-specific editor displays where you can change the properties of the object selected.
Alternatively, you can open the editor by selecting the object and then choosing
Edit > Edit object type
.
See Also
Deleting an Object
Renaming an Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Editing_an_Object&oldid=5151
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Editing_the_Name_of_an_Object,Editing the Name of an Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
On the Data Model Explorer or Data Model Window, double-click the object that you want to edit and then change the name of the object in the editor.
Note:
Alternatively, shift-click the object to change and the object name becomes an editable field. Click Backspace to erase the name, enter a new name, and then click anywhere outside the object to effect the change.
See Also
Deleting an Object
Editing an Object
Automatic Naming Translation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Editing_the_Name_of_an_Object&oldid=5152
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Encoding_Property_for_Columns,Encoding Property for Columns,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Distributing Columns for Amazon Redshift
Amazon Redshift uses a keyword called ENCODE to define the specific compression encoding for a column. the following compression encodings are supported:
BYTEDICT
DELTA
DELTA32K
LZO
MOSTLY8
MOSTLY16
MOSTLY32
RAW (no compression)
RUNLENGTH
TEXT32K
ZSTD
In the Column Editor for Redshift tables, under the datatype tab, a dropdown next to the
Identity Property
section allows you to select the encoding for this property.
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Sorting Tables for Redshift
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Encoding_Property_for_Columns&oldid=5544
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Enforcing_Data_Integrity_Using_Check_Constraints,Enforcing Data Integrity Using Check Constraints,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
The Check constraint evaluates the data as it is entered and only if the check evaluates to true is the entry allowed. The constraint entered for an entity is used when creating the physical model and can be seen in the table's DDL.
Double-click the entity or table you want to create a check constraint for.
On the
Rule/Constraints
tab of the Entity or Table Editor, name the constraint and then enter the constraint in the text box.
The constraint is added to the CREATE TABLE statement in the Table's DDL in the format:
CONSTRAINT (
constraint_name
) CHECK (
constraint_text
)
where
constraint_name
is the name of the constraint
constraint_text
is the text entered in the text box
Constraints are created in the Data Dictionary, in the Rules folder. For more information, see
Promoting Data Integrity Through Rules
.
See Also
Promoting Data Integrity Through Rules
Enhancing Data Integrity Using Defaults
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Enforcing_Data_Integrity_Using_Check_Constraints&oldid=5153
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Enforcing_Security_Using_Data_Security_Types_and_Properties,Enforcing Security Using Data Security Types and Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
Contents
1
Generate Default Security Information
2
Create and Edit a Data Security Type
3
Create and Edit a Data Security Property
4
See Also
The Data Security management function of the Data Dictionary extension helps enforce security standards within the data model. It allows the data architect to classify objects in the model such as an entity, attribute, submodel or model and associate the database object with various security impact levels or compliance mappings. You can document the security of your data as you would document other properties such as the data steward would for functional business areas or external documentation. Use reporting features to communicate security information to other stakeholders.
Data Security Type
: A top-level description of a security aspect to be observed. Default descriptions are Compliance and Classification. You can add or edit your own types and then add properties to the types. For example, you may want to describe how security is enforced, so you might add an ""Enforcement Mechanism"" type and then give it properties such as ""Project and Model passwords required,"" ""Read-Only Granted By Default,"" and so on.
Data Security Property
: A specific security attribute to be observed. A default example is ""Compliance Mapping"" which describes which of several industry compliance and reporting standards should be maintained. You can add or edit your own types and then add properties to the types. For example, you may want to describe how security is enforced, so you might add an ""Enforcement Mechanism"" type and then give it properties such as ""Project and Model passwords required,"" ""Read-Only Granted By Default,"" and so on.
The topics in this section include:
Generate Default Security Information
Create and Edit a Data Security Type
Create and Edit a Data Security Property
Generate Default Security Information
On the
Data Dictionary
tab, right-click the
Data Security Information
folder and then click
Generate Default Security Information
.
if you have already generated the default security information, choose how to resolve duplicate properties.
This generates Compliance Mapping, Privacy Level, and Security Information security properties that you can customize for your environment.
Notes
View and edit the default security properties, right-click a security property object and then select Edit Security Property.
If, after editing the default security properties, you want to reset the properties to their default values, generate the properties again and, when prompted, overwrite the existing security objects.
Create and Edit a Data Security Type
On the
Data Dictionary
tab, right-click the
Data Security Information
folder and then click
New Security Type
.
Enter a name for the security property type, provide a description of it, such as when and why this security property is used, and then click
OK
.
Once you have created the Data Security Type, you can edit it by right-clicking the type you want to change, and then selecting Edit Data Security Type.
Create and Edit a Data Security Property
On the
Data Dictionary
tab, right-click the appropriate security type folder and then select
New Security Property
.
Define the security property as required and then click
OK
to complete the editor.
Once you have created the Data Security Property, you can edit it by right-clicking the property object you want to change, and then selecting Edit Data Security Property.
The following describe options that require additional explanation:
Name
tab
Define the name of the security object and provide a description of it, such as when and why this data security property is used.
Value
page/tab
Select what kind of data this security object contains. For Text List datatypes, you can list possible data values and then set the default value.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this security property. You can override this setting using the Security Information tab of object class editors.
See Also
Importing a Data Dictionary
Enhancing Data Integrity Using Defaults
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Enforcing_Security_Using_Data_Security_Types_and_Properties&oldid=5155
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Enhancing_Data_Integrity_Using_Defaults,Enhancing Data Integrity Using Defaults,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Defaults enhance data integrity in your model by supplying a value to an attribute or column when you do not specify one. Defaults ensure that attributes and columns always adopt a value, even when the user or transaction does not. provide one.
You can bind defaults to columns, attributes, and domains, along with user-defined datatype created in the Data Dictionary. Defaults are created in the Data Dictionary, which lets you manage and reuse commonly used defaults.
Create and Edit Defaults
In the
Data Dictionary
, right-click the
Defaults
folder and then click
New Default
.
Define the default as required and then click
OK
to complete the editor.
Once you have created the Default, you can edit it by right-clicking the default you want to change, and then selecting Edit Default.
The following describe options that require additional explanation:
Default Value
tab
You must add the value in the same syntax as the database platform in which you intend to use the default.
Attachment Bindings
tab
Bind an external piece of information, or attachment to the domain. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the default before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this default. You can override this setting using the Default tab of the data model object editor.
See Also
Determining Which Objects are Bound by Data Dictionary Objects
Changing Data Dictionary Object Bindings and Values
Enforcing Data Integrity Using Check Constraints
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Enhancing_Data_Integrity_Using_Defaults&oldid=5156
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Ensuring_Consistent_Domain_Definitions_Using_User_Datatypes,Ensuring Consistent Domain Definitions Using User Datatypes,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
User-defined datatypes are a powerful mechanism for ensuring the consistent definition of domain properties throughout a data model. You can build a user-defined datatype from base datatypes, specifying width, precision and scale, as applicable. In addition, you can bind rules and defaults to the user-defined datatype to enforce domain integrity. After creating a user-defined datatype, you can use it in attributes, table columns, and domains without needing to define its underlying definition each time. User-defined datatypes are particularly useful with commonly-referenced table columns in a database, such as
PhoneNo
,
ZipCode
or
PartNo
.
The central maintenance of user datatypes eliminates the tedium and potential for errors users can encounter when manually editing each referenced table column. For example, you can define a surrogate key in the Part table, PartNo, as an integer for efficiency. You have defined a user datatype,
partnumber
, to represent every use of PartNo throughout the database design. Subsequently, you learn that the data to be converted from a legacy system contains some part numbers in character format. To accommodate the change, you only need to edit the definition of
partnumber
from an integer to a character-based user datatype. ER/Studio Data Architect automatically converts all table columns using
partnumber
to the new definition.
Although only a few database platforms currently support user-defined datatypes, ER/Studio Data Architect extends their utility to all database platforms in the physical model. ER/Studio Data Architect automatically converts user-defined datatypes to their base definitions when generating SQL code for any database platforms that do not provide native support.
For SQL Server, Sybase, and IBM DB2 only, the
CREATE
statements of the user datatype can be included in the DDL when generating the database.
Create and Edit User Datatypes
On the
Data Dictionary
tab, right-click the
User Datatypes
node and then select
New UserDatatype
.
Define the user-defined datatype as required and then click
OK
to complete the editor.
Once created, you can edit the naming standards template by double-clicking its object on the Data Dictionary tab to launch the editor.
The following describe options that require additional explanation:
UDT
tab
Apply nullability to all bound columns
: If you indicate Yes Allow Nulls, this check box is available. When you are editing the user datatype and you change this selection from what it was previously, selecting this check box broadcasts the change to all objects bound to this user datatype.
Default Binding
:
Optional
If you want to bind the user datatype to a Default, select it from the list.
Rule Binding
:
Optional
If you want to bind the user datatype to a Rule, select it from the list.
Attachment Bindings
tab
Bind an external piece of information, or attachment to the user datatype. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the user datatype before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Binding Information
tab
Select which object classes and/or specific objects can use this user-defined datatype. You can override this setting using the Attributes or Columns tab of the entity or table editor, respectively, or on the Datatype tab of the domain editor.
a user datatype and change its definition, ER/Studio Data Architect automatically updates your entire model so that all affected objects use the new definition.
See Also
Enforcing Naming Standards Using Naming Standards Templates
Enforcing Security Using Data Security Types and Properties
Reusing Attribute Definitions Using Domains
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Ensuring_Consistent_Domain_Definitions_Using_User_Datatypes&oldid=5157
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Establishing_Database_Security,Establishing Database Security,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
Define and establish database security to, for example, inform data model reviewers and database administrators of the security required for data model objects when these objects are implemented on a DBMS.
This section includes the following topics:
Creating and Editing Database Users
Creating and Editing Database Roles
Associating Database Users with New Database Roles
Associating Database Roles with New Database Users
Changing Database Roles Associated with Existing Database Users
Changing Database Users Associated with Existing Database Roles
Granting and Revoking Permissions to Modify Database Objects
See Also
Best Practices
Enforcing Security Using Data Security Types and Properties
Establishing Security for the Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Establishing_Database_Security&oldid=5158
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Establishing_Security_for_the_Repository,Establishing Security for the Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
Security of the Repository contents is managed by the Repository Administrator through the Security Center by creating and then assigning users particular Groups, Roles and Privileges.
To open the Security Center going to
Repository > Security > Security Center.
Note:
To prevent an accidental lockout, the Admin user cannot be deleted.
For example, we create a user JimB, give him a Role and call it DBA. The DBA role has many privileges, but none allow the DBA to modify a logical model. A Repository administrator can associate JimB with any model in the Repository and he will not be able to modify the diagram's logical model, but he can view it.
The Administrator can restrict user and group access to Repository items at the project, diagram, model, submodel, and data dictionary levels. To restrict access to the Repository, the Administrator creates users and then assigns the users a default role or assign, which grants specific permissions to the user, or creates new roles to assign to users. The Administrator can alternatively create a group of users and assign a role to that particular group. In these ways, the Administrator can grant users full access to some Repository items and restrict or deny access to others items.
Before creating users, groups,and roles, the Administrator should understand the following Repository concepts:
Cascading Security
: To make it easy for Administrators to assign a role globally to users when there are many diagrams in the Repository, such as when the user must have the same access permissions to many of diagrams, the Administrator can assign a user and role to various 'levels' of the ER/Studio Repository.
For example, a Project can be created in the ER/Studio Repository that contains many diagrams. If you assign a user a role to this Project, any diagrams contained within the Project will be granted the same permission set. The Repository itself can act as this highest-level point to assign permissions that are cascaded down.
Higher levels can be overwritten by assigning the same user different roles at a lower level, for example UserA may have the Viewer role at repository level but Modeler role for a specific diagram or submodel.
Client Side Security Caching
: To promote the concept of detached modeling collaboration (e.g. being logged out of ER/Studio Repository and possibly detached from the network), all security associated with the user by diagram is cached on the client when the user logs into ER/Studio Repository.
Note:
When security changes are made, users must re-login to update their permissions.
Super User
: Super User is a default Role created upon installation of ER/Studio Repository. The default 'Admin' user is assigned to the Super User role. This user can do anything to diagrams, users and roles managed in the ER/Studio Repository as it is granted all privileges. It is not removable or editable, and is only found at the 'Repository' level of the Repository Security area of the Security Center.
No Access
:
No Access
is a role that can be applied only at the project and diagram levels of the Repository. It is a quick and global mechanism to prevent any access whatsoever to diagrams managed in specific projects, or to individual diagrams themselves. For example, you can create a group and assign it to the no access role for a project, then any users added to the group will not have access.
Additive permissions
: Permission granted to a user by group membership are additive. The user will have all the permission granted to him plus the permissions afforded him by group membership.
Notes
When a user gets a file from the Repository, ER/Studio Data Architect tracks the user and machine combination for that particular file. In addition, to enable users to model while they are ""offline"" or unable to connect to the Repository server, ER/Studio Data Architect stores information about the security rights of the user and the diagram with the file, which has the following effects:
When a user is logged into the Repository, and attempts to open a DM1 file that was retrieved from the Repository by a different user/machine combination than the currently logged in user, ER/Studio Data Architect indicates that the file cannot be opened due to the conflict. This ensures that one user does not attempt to work on or check in changes to a diagram that was originally retrieved by a different user. Because the Repository keeps track of object check outs based on the user and machine, only the user on the machine that originally checked out an object can check it back in.
Even if a user is not logged into the Repository, Repository DM1 files can be opened and worked on in ER/Studio Data Architect. ER/Studio Data Architect will load the security permission data for the user that originally retrieved the file from the Repository, and that security data will govern the rest of the working session until the user either logs in to the Repository or closes the file. If multiple files are open while the user is NOT logged in to the Repository they must all have been retrieved by the same user. Of course, this also applies when the user IS logged in.
The cached security data stored with each diagram is updated whenever an open Repository file is saved while logged in to the Repository, but if the file is not saved before closing it, then any changes to the security permissions for that user and diagram will not be cached with the file. So, if you plan to work offline, and the security settings have changed since the file was last saved, then you should open each file while logged into the Repository and save it before taking the files to work offline.
Permission settings can be applied at the project or repository level, which might cause a conflict when two files are opened while a user is offline. If two files are opened that both have cached security information for the Repository level or for the same Project, and if the cached data differs, then the most recently saved data will be used and stored in both files if and when they are saved.
If an admin makes changes to the security UI, such as changing permissions on folders to grant or revoke access or moving diagrams between projects with different permissions, users must re-login to update their permissions.
This section also includes the following:
Creating and Managing Roles
Creating and Managing Users
Creating and Managing Groups
Granting and Prohibiting User Access to Repository Items
See Also
Creating and Managing Roles
Creating and Managing Users
Creating and Managing Groups
Granting and Prohibiting User Access to Repository Items
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Establishing_Security_for_the_Repository&oldid=5159
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Export_an_SQL_Procedure,Export an SQL Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Procedures
node, and then click
New Procedure
.
On the
Description
tab, click
Export
and then type, or browse to and then select the name of the SQL procedure file name where you want to save the SQL procedure.
Complete the
Procedure SQL Editor
and then click
OK
to create the procedure.
See Also
Creating and Editing Database Dependent Objects
Developing the Physical Model
Import an SQL Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Export_an_SQL_Procedure&oldid=5160
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Exporting_Metadata_for_a_Particular_Model,Exporting Metadata for a Particular Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Exporting the Data Model
You need a separate license to access the MetaData Export bridges. See the About ERStudio dialog for a list of the modules you are licensed to use.
Using the MetaData Export Wizard, you can export your diagrams in formats compatible with a wide-variety of industry-standard tools. For a current list of supported platforms and bridges available, see
ER/Studio MetaWizard Import/Export Bridges
.
To export model metadata
On the Data Model Explorer, right-click the model or submodel you want to export.
Click Export Model Metadata.
Complete the
Export Model Metadata
dialog as required.
Click the field beside the option name to either enter a value or select a value from the list. Help text for each option appears in the area at the bottom of the page.
If you want to save or print the log, click
Save to File
or
Print
.
The following describe options that require additional explanation.
Page 1
Type
: From the list, select the MIR Bridge you want to use to generates a file that can be imported into the third-party application supported by the selected bridge type.
Page 3
This page displays informational and warning messages describing successful and unsuccessful exports respectively.
See Also
Exporting an Image of the Data Model
Printing the Data Model
ER/Studio MetaWizard Import/Export Bridges
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Exporting_Metadata_for_a_Particular_Model&oldid=6455
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Exporting_Metadata_for_all_Models_and_Submodels,Exporting Metadata for all Models and Submodels,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Exporting the Data Model
You need a separate license to access the MetaData Export bridges. See the
About ERStudio
dialog for a list of the modules you are licensed to use.
Using the MetaData Export Wizard, you can export your diagrams in formats compatible with a wide-variety of industry-standard tools. For a current list of supported platforms and bridges available, see
ER/Studio MetaWizard Import/Export Bridges
.
To export model metadata
Click
File > Export File > Export Model Metadata
.
Complete the
Export Model Metadata
dialog as required.
Click the field beside the option name to either enter a value or select a value from the list. Help text for each option appears in the area at the bottom of the page.
If you want to save or print the log, choose
Save to File
or
Print
.
The following describe options that require additional explanation:
Page 1
Type
: From the list, select the MIR Bridge you want to use to generates a file that can be imported into the third-party application supported by the selected bridge type.
Page 2
Model selection
: Choose to export the logical model, physical model, or all models. If you choose to export the physical model, because there can be numerous physical models in an ER/Studio Data Architect file you must enter the name of the model in the Physical model name field.
Page 3
This page displays informational and warning messages describing successful and unsuccessful exports respectively.
See Also
Exporting an Image of the Data Model
Printing the Data Model
ER/Studio MetaWizard Import/Export Bridges
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Exporting_Metadata_for_all_Models_and_Submodels&oldid=6454
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Exporting_a_Data_Model_to_XML,Exporting a Data Model to XML,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Exporting the Data Model
The eXtensible Markup Language (XML) is a document format that has recently emerged as a standard for data representation and exchange on the Internet. XML is also now supported by many applications and platforms, allowing the data modelers and application developers to collaborate on service-oriented architecture (SOA) initiatives. For example, the data modeler models the data and the relationships that describe how applications exchange data, and exports the model to XML, which the application developer can then use to ensure that the applications interface correctly.
ER/Studio Data Architect allows you to generate the following XML-type files:
XML Metadata Interchange (XMI)
: The XMI file format was designed primarily to allow the exchange of data between data modeling applications. Based on the XML format, XMI allows data modelers using Unified Modeling Language (UML) and programmers using different languages and development tools to exchange information about the model metadata, what a set of data consists of and how it is organized.
Using the MetaData Export Wizard, you can export the entire.dm1 file or an individual model to an.xsd or an.xmi file. This function makes assumptions about how the model elements map to the xsd elements but gives you some control over the export parameters. For more information, see
Exporting Metadata for a Particular Model
and
Exporting Metadata for all Models and Submodels
.
XML Schema Generation (XML)
: The XML Schema Generation Wizard creates schemas that can be based on a logical or physical model, a submodel, or even specific components only of a model or submodel. The XML Schema Generation Wizard allows you to customize the XML schema structure by clicking the desired options and dragging the available objects from the database design into a tree representing the XML schema. This wizard provides advanced options to transform relational entities and attributes into complex types, elements and attributes, define naming standards and datatype mapping, and incorporates the Quicklaunch system used in other wizards to save previous settings and streamline repetitive operations. For more information, see
Generating a Customized XML Schema
.
You can use XML editing applications such as Microsoft XML Notepad, Eclipse, Visual Studio, and Altova XML Spy to view and edit the schema.
See Also
Generating a Document Type Definition (DTD)
Generating a Customized XML Schema
Exporting an Image of the Data Model
Printing the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Exporting_a_Data_Model_to_XML&oldid=5163
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Exporting_an_Image_of_the_Data_Model,Exporting an Image of the Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
From ER/Studio Data Architect, you can create a screenshot image of your data models to distribute to your reviewers. You can choose from several different image formats, including EMF, JPEG, GIF, BMP, and PNG.
In the
Data Model Explorer
, select the physical or logical model, or the submodel that you want to capture as an image.
Choose
Tools > Export Image
.
Choose your options in the
Save As Image
dialog and click
OK
.
Note:
When choosing the image characteristics, be aware that the lower the resolution, the smaller the file size will be. The higher the resolution, the bigger the file size will be.
See Also
Exporting the Data Model
Printing the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Exporting_an_Image_of_the_Data_Model&oldid=6713
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Exporting_the_Data_Model,Exporting the Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
You can export the logical or physical data model to a variety of different formats and platforms, allowing you to collaborate with other database users, communicate your database design, create SQL from your data model to create a physical database, and create an XSD Schema you can share with application developers who can use this schema.
Click a link below for information on exporting data models:
Exporting Metadata for a Particular Model
Exporting Metadata for all Models and Submodels
Exporting a Data Model to XML
Generating a Script File or Database
ER/Studio MetaWizard Import/Export Bridges
See Also
Exporting an Image of the Data Model
Printing the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Exporting_the_Data_Model&oldid=6414
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/External_Table_Properties,External Table Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Defining Table Storage
The External Table Properties dialog allows you to manage external table properties for Oracle 12c and later. External tables allow Oracle to query data stored in flat files that are outside of the database. Make any necessary updates, and then click
OK
to save your changes, which then are reflected in the DDL.
Access Driver
. Options include ORACLE_LOADER and ORACLE_DATAPUMP.
ORACLE_LOADER
(Default) The ORACLE_LOADER driver performs only data loads and that data must come from text datafiles. Loads from external tables to internal tables occur by reading from the external tables' text-only datafiles.
ORACLE_DATAPUMP
The ORACLE_DATAPUMP can perform both loads and unloads, but the data must come from binary dump files. Loads to internal tables from external tables occur by fetching from the binary dump files while unloads from internal tables to external tables occur by populating the external tables' binary dump files.
Default Directory
. Specifies the default directory object location of files read or written by external tables.
Access Parameters
. Specifies the external data source and implements the external table type. Each type of external table has its own access driver that provides access parameters unique to that type of external table.
Location
. Specifies the location of the external data as a list of directory objects and filenames. If the directory object is not specified, then the default directory object is used as the file location.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=External_Table_Properties&oldid=6582
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Filtered_ID_(Hide_Foreign_Keys)_Notation,Filtered ID (Hide Foreign Keys) Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Setting the Relationship Notation
Identifying versus Non-Identify means that the parent entity identifies the child e.g. City contains (identifying) State allows us to have two Cities of the same name that can be made unique by the State within they exist. e.g. Dover in Delaware, Dover in Minnesota.
Non Specific Relationships, also referred to as a ""many to many relationship"", is an association between two entities in which each instance of the first entity is associated with zero, one, or many instances of the second entity and each instance of the second entity is associated with zero, one, or many instances of the first entity. These cannot be created in most databases so a special relationship exists to model it until it can be resolved with an associative entity.
Multiplicity is shown with adornments on each end of the line and shows the number of each Parent to each Child entity as a range with lower and upper values.You read the line from each direction. e.g. State must have one to many Cities. City must have one and only one State.
The following illustrates how relationships are presented in ER/Studio Data Architect using the Filtered ID (Hide Foreign Keys) notation.
See Also
IDEF1X Notation
IE (James Martin) Notation
IE (Crow's Feet) Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Filtered_ID_(Hide_Foreign_Keys)_Notation&oldid=5632
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Finding_an_Entity,_Table_or_View","Finding an Entity, Table or View","From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
On the Diagram ribbon, click Find Entity/View.
Enter the first letter or first few letters of the entity or view you want to find.
The first matching entity or view found will be highlighted in the list.
If necessary, scroll through the list to find the object you are looking for or type more letters to further limit the scope of the search.
Once you have found the object you are searching for, double-click the entry.
ER/Studio Data Architect highlights the object in the
Data Model Explorer
and the
Data Model Window
.
You can also use the Universal Naming Utility to find strings in various objects, enabling you to for example find all entities with an attribute named city. For more information on the Universal Naming Utility, see
Searching for and Changing Object or Object Attribute Names
.
See Also
Searching for and Changing Object or Object Attribute Names
Locating an Object in the Data Model Window
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Finding_an_Entity,_Table_or_View&oldid=7281
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Forcing_a_Checkin,Forcing a Checkin,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
The Repository Administrator can check in objects a user has checked out. For more information, see
Creating and Managing Users
.
See Also
Determining Who has an Object Checked Out
Viewing the Checkin History of a Repository Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Forcing_a_Checkin&oldid=5167
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Generate_a_Report,Generate a Report,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Contents
1
Page 1: Generate Report
2
Page 2: Select Objects
3
Page 3: RTF Reports
4
Page 3: HTML Reports
5
See Also
ER/Studio Data Architect generates reports on all data model objects each with their own specific properties.
On the
Data Model Explorer
, locate the Logical or Physical model for which you want to create a report.
Right-click the model source for the report and then click
Generate Reports
.
Tip:
You can also go from
Tools > Generate Reports
.
Complete the pages of the
ER/Studio Data Architect Report Wizard
as required.
ER/Studio Data Architect
generates reports on all data model objects each with their own specific properties.
The following helps you complete the options of the
ER/Studio Data Architect Report Wizard
:
Note:
The options may differ depending on whether the model selected is a Logical or a Physical model and whether you selected to create an RTF or an HTML report.
Page 1: Generate Report
Select report type
. Select the report type you want to generate. Depending on your selections, the options available in page 3 of the wizard vary.
Do you want to invoke an Editor to view the report after it is generated?
If
Yes
, it launches the default application for viewing and editing .rtf or.html files, for example, Microsoft Word for .rtf files or Firefox for .html files.
Use enhanced version
. Select this option if your model contains an attribute with more than 200 objects. If selected, ER/Studio Data Architect splits the HTML report into three areas or frames, ensuring quick navigation of all objects in an attribute. In the report, viewable data is divided into Object Type, Object List, and Object detail.
Page 2: Select Objects
Select the database and data lineage objects on which you want to report.
Tip:
To view the full name of the database object in the tree on the left side of this page, pause the cursor over the representative icon and the full name will appear.
The tabs available depend on the database platform you have selected.
If you right-click anywhere on the object tree, you can select all or deselect all objects using the short-cut menu. You can also display or hide object owner names for those objects with owners.
If you select diagram objects on the data model before opening the wizard, only those selected object are selected in the object tree saving you from reselecting objects.
You can expand or collapse portions of the tree by clicking the + and - nodes.
Select All
: Selects all objects. If you do not click Select All and if you are using Quick Launch settings saved from versions earlier than 6.6, object selections will be overwritten due to a more recent feature that organizes objects by submodel.
Page 3: RTF Reports
Create Title Page
: Lets you create a title page, which consists of the report title, Diagram Report, followed by diagram details as specified on the Information tab of Diagram Properties.
Page Break Options
: Lets you specify where to insert page breaks in the report. By default, a page break occurs after each section in the report.
Note:
Inserting page breaks after each section can significantly increase the length of the report.
Page 3: HTML Reports
Submodel Image Options
: Select either a.gif,.jpg or.png formatted image of the model or submodel, similar to a screenshot, to include in the report.
Generating a JPG is resource intensive and may not be possible for large data models. If you need to capture an entire large data model, you can try reducing quality or zoom size, changing the image type format, or select individual options and ER/Studio Data Architect will capture individual objects for each selected object. For example, do not select the Logical Model, which selects each model and submodel in that model; rather, select the models and submodels individually.
Logo and Link Options
:
Image File
: Select an image, such as your company logo, to include on the to left-hand side of the page.
New Link
: Enter the URL of the content you want to display when the report reader clicks the image specified above.
Report Formatting
: Choose separately to retain the format, which can include.html tags, of the object definition and note, or if you are not formatting the text within the object editor, choose to wrap the text.
See Also
Printing the Data Model
Exporting an Image of the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Generate_a_Report&oldid=7799
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Generating_RTF_and_HTML_Model_Reports,Generating RTF and HTML Model Reports,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
One of ER/Studio Data Architect's most powerful applications is that of a documentation generator to communicate complex databases and associated metadata to the Enterprise. ER/Studio Data Architect is equipped with extensive
report generation
capabilities:
HTML Report Generation: Instantaneous generation of an HTML-based Web site designed to provide simple navigability through data models and model metadata using standard browsers such as Microsoft's Internet Explorer or Netscape Navigator.
RTF Report Generation: Instantaneous documentation generation compatible with applications like Microsoft Word.
In addition to providing model reviewers with reports, you can also make the model available so reviewers using ER/Studio Viewer or ER/Studio Team Server can see the actual model, but not make any changes to it.
The ER/Studio Data Architect Report Wizard guides you through the process of creating rich text format (RTF) and HTML reports based on your logical or physical models. The ER/Studio Data Architect Report Wizard lets you generate RTF and HTML reports. Due to the formatting differences between RTF reports and HTML reports, the information is presented in slightly different ways, even though the data, with few exceptions, is the same for both formats. Differences in the type of information reported is noted for each format type in the pages that have specific information about each object type's reports.
Why Use RTF Reports?
RTF reports are suitable for hard copy distribution. You can view the RTF-formatted reports using almost any popular word processing application.
You can select the object types to include in the report (such as entities, relationships, etc.) You can also select the amount of information about each object type to include in the report such as the summary of all instances of each object type, and/or detailed information about each object instance.
RTF reports include a title page, followed by a table of contents, followed by the reports. In general, and subject to the selections made for information that should be included in the report, each object type such as entity, relationship, etc. is introduced in a summary report that gives general information about each instance of each object type, followed by detailed reports for each instance of an object type. Much of the information in the report is presented in easy-to-read tables.
Why Use HTML Reports?
HTML reports are suitable for sharing on the internet or local Intranet. The reports require a browser that supports frames (and has them enabled). You can include a JPG, GIF, or BMP image of the submodels in your report and you can set the zoom level for each submodel individually.
Reports generated in HTML format have a similar feel to web pages. The title page is opened when the report is open. At the top of the title page and at the top of all pages in the report is a list that lets you select an object type's report page. The list includes only those object types that have a report page. If there is no information reported about a particular diagram object type, it is not included in the list. The report page for each object type has a list in a left-hand pane that provides links to specific instances of an object type. Information is presented in easy-to-read tables.
See Also
Generate a Report
Using Reports
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Generating_RTF_and_HTML_Model_Reports&oldid=6938
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Generating_a_Document_Type_Definition_(DTD),Generating a Document Type Definition (DTD),"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Exporting a Data Model to XML
Use the Schema Definition (XSD) command to create a schema definition of the logical model.
Open the model you want to base the Schema Definition on.
Choose
File > Export File > XML File > Document Type Definition (DTD)
.
Specify the output file and then click
Save
.
See Also
Exporting an Image of the Data Model
Printing the Data Model
Exporting the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Generating_a_Document_Type_Definition_(DTD)&oldid=5171
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Generating_a_Physical_Data_Model,Generating a Physical Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Working With Data Models
Contents
1
Generate Physical Model wizard Page 1
2
Generate Physical Model wizard Page 2
3
Generate Physical Model wizard Page 3
4
Generate Physical Model wizard Page 4
5
Creating a New Physical Model
6
See Also
The Generate Physical Model Wizard automatically creates a relational or dimensional physical model based on a logical model, freeing you to focus on performance during the physical model design phase. The wizard can assist you by ensuring conformance with the basic naming and syntax rules of the target database platform; implementing referential integrity, such as the enforcement of logical keys through indexes or table constraints; and replacing non-specific (many-to-many) relationships with alternative schema elements more appropriate to the relational or dimensional model being generated.
Once you have created a logical data model you can generate a physical data model for many different platforms that is based on the logical data model selected.
To create a physical data model from a logical data model
In the Data Model Explorer, right-click the
Main
model or a submodel of the logical data model, and then click
Generate Physical Model
.
Complete the Generate Physical Model Wizard, and then click
Finish
to complete the wizard.
The following page breakdowns describe options that require additional explanation.
Generate Physical Model wizard Page 1
What is the target database platform?
All supported database platforms appear in this list for selection.
Wizard Quick Launch
. All fields and settings from pages 1 through 5 of the wizard are restored when you click
Use Settings
. With the
Settings Only
option, only those general options that are likely to be useful with a different model are restored.
Settings Only
loads information that is generic and can be used across models. Conversely, the
Settings and Objects
option, as an example, loads SQL path data specific to the model.
Generate Physical Model wizard Page 2
Include Contained Objects
. (
Business Data Object tab
)
How should Collections be created from Logical Entities? > Convert if Not Contained
. (
Tables tab
) Converts to Collections all entities which are contained by other objects.
Generate Physical Model wizard Page 3
Naming Standards Template
. Select naming standards based on either an XML file or a Naming Standards Template from the Data Dictionary. Naming standards can replace or remove spaces, perform uppercase/lowercase conversion, and replace invalid SQL characters.
Generate Physical Model wizard Page 4
Oracle Datatype Defaults
. (
Oracle 12c and later only
) Allows the user to select whether the
Varchar/Char Size Unit
is measured by
BYTE
or
CHAR
to support the
varchar2
data type.
Indexes
. The storage and index parameters vary depending on the target database platform selected on page 1. PK indexes are generated for each entity having primary key columns. For platforms that support clustered PK indexes, a clustered option exists on page 2 of the wizard.
Note:
For information on defining storage for tables and indexes, see
Defining Table Storage
and
Defining Index Storage
.
Creating a New Physical Model
ER/Studio Data Architect lets you create a new physical model by reverse-engineering a live database or importing an SQL or ERX file.
To create a new physical model using reverse engineering
On the Data Model tab, right-click the logical model icon, and then select
Add New Physical Model
.
Complete the Add New Physical Model wizard, and then click
Finish
.
The following options that are available from the first page of the wizard.
Name
Description
Reverse engineer from a database
The options on this tab and subsequent steps are the same as those for the Reverse Engineering Wizard. For information on these options, see
Reverse Engineering an Existing Database
.
Load from a SQL File
The options on this tab and subsequent steps are the same as those for the Import Model Utility for importing an SQL File. For more information on these options, see
Importing a Model from a SQL File
.
Load from an ERX File
The options on this tab and subsequent steps are the same as those for the Import Model Utility for importing an ERX File. For more information on these options, see
Importing a Model from an ERX File
.
Load from an ER/Studio Data Architect File
Enter the file name including the path, select the physical model to import, and then click
Finish
.
Load from a DT/Designer File
Enter the file name including the path, select the physical model to import, and then click
Finish
.
Load from a JSON File
The options on this tab and subsequent steps are the same as those for the Import Model Utility for importing a JSON File. For more information on these options, see
Importing a Model from a JSON File
.
See Also
Reverse Engineering an Existing Database
Physical Storage Considerations
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Generating_a_Physical_Data_Model&oldid=6956
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Generating_a_Script_File_or_Database,Generating a Script File or Database,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Using the DDL Generation wizard
The DDL Generation Wizard lets you generate SQL code to build a database. You can use this wizard to create a database from a physical model. The wizard guides you through the process of building a database and generating the SQL code for the database without requiring you to know any of the underlying commands.
Note:
For MongoDB you are able to create a JSON file. For this reason, the wizard is slightly different if you are using the
DDL generation wizard to create a JSON file
.
ER/Studio Data Architect lets you generate DDL to update an existing database or to create a brand new database. The wizard lets you select database objects specific to your platform and the options associated with those objects.
Note:
The options of the wizard may vary depending on the database platform you are using.
To generate a script file or database
On the
Data Model Explorer
, right click a physical model, and then select
Generate Database
.
Tip:
If you select diagram objects on the data model before opening the wizard, the selected objects are selected in the object tree within the wizard, saving you the effort of re-selecting them.
Follow the pages of
DDL Generation Wizard
because they easily guide you through the rest of the process.
Page 1
Generate Script File or Database
Generate a Single, Ordered Script File
: If selected, it writes a single SQL file with specification of all objects.
Database Creation Script File
: This control allows you to provide the filename and path for the generated SQL file.
Generate Objects To Multiple Files
: If selected, it writes a separate SQL file for each selected object. Objects are ordered in subdirectories for each selected object class.
Base Directory
:  This control allows you to specify the directory that is to contain the generated script files.
Generate Objects with a Database Connection
Select this option to directly create the objects in a live database. Once selected, use the following steps:
Click
Connect
. The Database Connection dialog appears offering you the following methods to connect:
Generate Database Objects Using ODBC
. Allows you to select a generic ODBC connection, and then provide relevant connection information and credentials.
Generate Database Objects Using Direct Connect
. Allows you to select a native driver connection, and then provide relevant connection information and credentials.
Generate Database Objects Using ER/Studio Team Server
. If you are logged in to ER/Studio Team Server, you can choose a database type, select a data source, and then provide credentials. If you are not currently logged in to ER/Studio Team Server, you are prompted to log in before proceeding.
(Optional)
Select
Create ER/Studio Team Server Data Source from current settings
if you want to create the ODBC or native driver data source on ER/Studio Team Server using the setting you have provided to connect.
Provide the
Name
that will identify the data source.
Select
Relate Data Source to  Model
, available only for repository models, if you want to relate the current model to the new data source on ER/Studio Team Server.
Click
Next
to continue.
Generate a Script File to Git
Select the
Generate a Script File to Git
option, and then click the adjacent
Connect
button. The Git File window appears.
Use this dialog to select an existing branch or create a new branch for a switch. You also can browse for a file as well as add a comment to use as a
Commit Message
. Be sure to click
OK
to save your changes.
Wizard Quick Launch
See how you can
load DDL Generation Wizard settings
from a file created on a previous session.
Page 2
Select or Create a Database
Note:
The double asterisk (**) represents the specific database platform.
An intermediate page appears if your original physical model database platform is Microsoft SQL Server or Databricks. If the database server on which you are deploying the model has multiple database defined, you must either select an existing database or create a new one if you want to save your DDL changes into an specific database. For this purpose:
Select
Select or Create a Database
(Optional).
Click
Select (use) an Existing ** Database
to update an existing database. Then type the database name.
Click
Create a New ** Database
if you choose to create a new one. Then enter the information to configure the new database.
Click
Next
to continue.
Page 3
Object Selection and Generation Options
The Generation Options are on the tabs where you select the objects in the data model for which you would like to build a database or generate SQL scripts. Below you can see the explanation of some specific objects.
Tables tab
Generate as primary key constraint:
This is one of the
Primary Key Options
. If you select it, the unique index created will also be listed as a constraint object in the database.
DROP statements
:If you want to generate the Database directly by using the wizard include
DROP statements
in your Table
Generation Options
; otherwise, you will receive DDL errors when ER/Studio Data Architect tries to create an object that already exists in the target database.
Use complete syntax for virtual columns
: This option is available for Oracle 11g and later. When this option is not selected, virtual columns are added to the DDL with the following syntax:
column [<datatype>] AS (<column_expression>)
;
Where
<datatype>
is set to the data type of the column if the Show Datatype option is on for the column and is omitted otherwise, and <column_expression> is the expression stored as the virtual column expression.
When this is selected, virtual columns are added to the DDL with the following syntax:
column [<datatype>] GENERATED ALWAYS AS (<column_expression>) VIRTUAL
;
Generate Column Comments
: This is one of the
Column Options
. If you selected it, the information included on the definition tab of columns will appear as a comment on the DDL generated.
Users tab
Generate system permissions:
If you select this options, ER/Studio Data Architect will generate queries to include permissions for the users into your new database. Permissions are added to the DDL with the following syntax:
GRANT [<user_permission>] ON DATABASE TO [<user>];
General Options tab
Note:
You can change the object types selected by default in the
Generate Other Object Types
area of the
General Options
tab.  Go to
Tools > Options > Object Types
and select your preferences
Generate Table-level Check Constraints:
This type of constraint checks if there is any modification to a row, regardless of the value of the column (changed or not). Is you select that option the Table-level Check Constraints you have added into your model will be generated on the DDL like that:
CONSTRAINT [<constraint_name>] CHECK [<condition>],
Generate Object Creation Verification Code:
Just for the SQL Server and Sybase database platforms. When selected, this option generates code similar to the following for tables, views, indexes, procedures, and functions.
IF OBJECT_ID('Entity1') IS NOT NULL
PRINT '<<< CREATED TABLE Entity1 >>>'
ELSE
PRINT '<<< FAILED CREATING TABLE Entity1 >>>'
go;
Tips:
If you right-click anywhere on the object tree within the wizard, you can select or deselect all objects using the short-cut menu. You can also display or hide object owner names for those objects with owners.
To view the DDL generated by the currently selected settings, click the
SQL Preview
button on the wizard at anytime. You can print or save the SQL script directly from the
SQL Preview
dialog.
Page 4
Summary
In this page you can check whether you have selected all the objects you want to generate on the DDL and the options to do it.
Databricks only
. The
Generate Table Constraint Name
and Generate Column Constraint Name
options are selected and grayed out (unavailable). That is because check constraints are generated with the Constraint Name in Databricks. Note that the
Additional Table Properties
option appears under
Table Storage Options
which is responsible for generating the storage properties corresponding to Databricks, including
Options
,
Location
,
TBLPROPERTIES
, and
ROW FILTER
.
Wizard Quick Launch Options
See how you can
save the DDL Generation Wizard settings
to a file. You can also
rename
or
delete
one you have already created.
See Also
Database Support and Connectivity
Connecting to Database Sources and Targets
Saving and Using Quick Launch Settings
Exporting an Image of the Data Model
Printing the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Generating_a_Script_File_or_Database&oldid=7931
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Getting_Started_with_ER/Studio_Data_Architect,Getting Started with ER/Studio Data Architect,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Introducing ER/Studio Data Architect
ER/Studio Data Architect
is a visual modeling application used for platform-independent logical data architecture analysis and design, in addition to platform-specific physical database design and construction. The powerful, multi-level design environment addresses the everyday needs of database administrators, developers, and data architects who build and maintain large, complex database applications and strive to consolidate, report, and re-use metadata across the enterprise.
The progressive interface and simplicity of
ER/Studio Data Architect
has been designed to effectively address the ease-of-use issues which have plagued data modeling and CASE tools for the past decade and more. The application equips you to create, understand, and manage the life-cycle of mission-critical database designs and business metadata within the enterprise.
ER/Studio Data Architect
is rich and customizable, offering strong logical design capabilities like:
The ability to spawn many physical designs from a corporate logical design.
Bi-directional model comparison and information synchronization.
Visual-Basic for Applications API for product customization.
Powerful DDL reverse engineering and generation.
Metadata import and export capabilities.
Data lineage documentation.
Sophisticated XML, HTML, and RTF-based documentation and reporting facilities.
Feature
ER/Studio DA Professional
ER/Studio DA
Physical / logical modeling
Forward / reverse engineering
Repository (model version control)
Agile change management
Metadata import/export capabilities
Model import bridges included
Create HTML & RTF reports
Create reports in other formats (XML Schema, PNG, JPEG and DTD Output)
RDBMS platforms
Big data platforms – MongoDB, Hadoop Hive
Data source registry
Product Benefits by Audience
Data Modelers and Data Architects
: ER/Studio Data Architect is critical for organizations concerned with eliminating data redundancy, creating an enterprise view of data assets, and assisting development with making informed decisions about how best to reuse elements pre-defined by the enterprise. Its powerful logical (non-database or technology specific) analysis and design environment helps to normalize and create an enterprise view of the objects concerning the data managed by an organization. More importantly, it can communicate this quickly through powerful reporting and metadata exchange mechanisms throughout the enterprise.
Database Administrators and Database Developers
: Managing databases can be incredibly difficult without a blueprint or roadmap to understand important object dependencies. ER/Studio Data Architect's round-trip engineering capabilities including database reverse-engineering provide database administrators (DBAs) or developers with important
physical
data models in seconds. These models can be used as powerful and efficient change management platforms, allowing users to update a model with the required changes which need to be implemented at the database and automatically generate DBMS-specific, syntactically correct, alteration or database DDL.
Business and IT Managers
: ER/Studio Data Architect's robust reporting facilities allow critical information about designs to the enterprise to be delivered in seconds. This heavily leveraged and beneficial capability of ER/Studio DA allows users to provide, in literally seconds, clear, easily navigable and safe-to-distribute documentation about a database or enterprise data model to those who need to review it.
See Also
What's New
Release Notes
Upgrading ER/Studio Data Architect
Supported Database Platforms
Overview of the ER/Studio Data Architect User Interface
User Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Getting_Started_with_ER/Studio_Data_Architect&oldid=5554
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Getting_Started_with_ER_Studio_Data_Architect,Getting Started with ER/Studio Data Architect,"From ER/Studio Data Architect
(Redirected from
Getting Started with ER Studio Data Architect
)
Jump to:
navigation
,
search
Go Up to
Main Page
Introducing ER/Studio Data Architect
ER/Studio Data Architect
is a visual modeling application used for platform-independent logical data architecture analysis and design, in addition to platform-specific physical database design and construction. The powerful, multi-level design environment addresses the everyday needs of database administrators, developers, and data architects who build and maintain large, complex database applications and strive to consolidate, report, and re-use metadata across the enterprise.
The progressive interface and simplicity of
ER/Studio Data Architect
has been designed to effectively address the ease-of-use issues which have plagued data modeling and CASE tools for the past decade and more. The application equips you to create, understand, and manage the life-cycle of mission-critical database designs and business metadata within the enterprise.
ER/Studio Data Architect
is rich and customizable, offering strong logical design capabilities like:
The ability to spawn many physical designs from a corporate logical design.
Bi-directional model comparison and information synchronization.
Visual-Basic for Applications API for product customization.
Powerful DDL reverse engineering and generation.
Metadata import and export capabilities.
Data lineage documentation.
Sophisticated XML, HTML, and RTF-based documentation and reporting facilities.
Feature
ER/Studio DA Professional
ER/Studio DA
Physical / logical modeling
Forward / reverse engineering
Repository (model version control)
Agile change management
Metadata import/export capabilities
Model import bridges included
Create HTML & RTF reports
Create reports in other formats (XML Schema, PNG, JPEG and DTD Output)
RDBMS platforms
Big data platforms – MongoDB, Hadoop Hive
Data source registry
Product Benefits by Audience
Data Modelers and Data Architects
: ER/Studio Data Architect is critical for organizations concerned with eliminating data redundancy, creating an enterprise view of data assets, and assisting development with making informed decisions about how best to reuse elements pre-defined by the enterprise. Its powerful logical (non-database or technology specific) analysis and design environment helps to normalize and create an enterprise view of the objects concerning the data managed by an organization. More importantly, it can communicate this quickly through powerful reporting and metadata exchange mechanisms throughout the enterprise.
Database Administrators and Database Developers
: Managing databases can be incredibly difficult without a blueprint or roadmap to understand important object dependencies. ER/Studio Data Architect's round-trip engineering capabilities including database reverse-engineering provide database administrators (DBAs) or developers with important
physical
data models in seconds. These models can be used as powerful and efficient change management platforms, allowing users to update a model with the required changes which need to be implemented at the database and automatically generate DBMS-specific, syntactically correct, alteration or database DDL.
Business and IT Managers
: ER/Studio Data Architect's robust reporting facilities allow critical information about designs to the enterprise to be delivered in seconds. This heavily leveraged and beneficial capability of ER/Studio DA allows users to provide, in literally seconds, clear, easily navigable and safe-to-distribute documentation about a database or enterprise data model to those who need to review it.
See Also
What's New
Release Notes
Upgrading ER/Studio Data Architect
Supported Database Platforms
Overview of the ER/Studio Data Architect User Interface
User Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Getting_Started_with_ER/Studio_Data_Architect&oldid=5554
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Getting_the_Latest_Version_of_a_Diagram,Getting the Latest Version of a Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Get Latest Version refreshes the local version of the open diagram with the version in the Repository. For example, if multiple people check out the same diagram, and someone makes changes to the diagram you are working on, you can get the latest version to update your local version after they submit their changes.
Choose
Repository > Diagrams > Get Latest Version
.
Note:
If conflicting changes are detected because multiple people changed the diagram, ER/Studio Data Architect opens the Review Changes and Resolve Conflicts dialog, where you must resolve any conflicts between the local and remote diagrams before continuing.
See Also
Determining Who has an Object Checked Out
Forcing a Checkin
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Getting_the_Latest_Version_of_a_Diagram&oldid=5175
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Glossary_Integration,Glossary Integration,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing Entities and Tables
Your Team Server terms can be linked directly in to the ER/Studio interface. When enabled, if a glossary term is used in the Name, Definition, or Notes of certain model objects, it is highlighted to identify that you have a definition in your Team Server Glossary. Holding your mouse cursor over the highlighted term pops up the short definition while Ctrl-clicking on the term will navigate to that term in the Team Server Glossary.
This feature also allows you to select specific models or sub-models in a repository and associate them with a specific glossary. That glossary then can provide the scope when trying to detect and link terms to the model objects.
To enable Glossary Integration:
Go to
Repository > Team Server Log In
.
Enter the URL for your Team Server installation that contains the
Terms
that you want to use.
Enter a User Name and Password that has access to the Terms.
Click
OK
to log in.
After completing the Team Server login as listed above, any terms that are matched in the Name, Definition, or Notes of a model object will be highlighted in blue and underlined with a dashed line.
If you hover your mouse icon over the highlighted term, a popup definition will appear.
Ctrl-clicking on the term will open up a browser and navigate to the term in Team Server interface.
The Glossary Integration function works on the following objects:
Entity/Table Editor
Entity/Table Editor for attributes
Attribute/Column Editor
View editor
Submodel Editor
Data Lineage - Other Source - Tables
Data Lineage - Other Source - Views
See Also
Creating Terms
Logging In and Out of the Repository and ER/Studio TS
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Glossary_Integration&oldid=4786
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Granting_and_Revoking_Permissions_to_Modify_Database_Objects,Granting and Revoking Permissions to Modify Database Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Establishing Database Security
After you have created users and roles you can grant or revoke their permissions to insert, select, update, delete, reference, and alter entities, tables, attributes, columns, and views.
In the
Data Model Explorer
, double-click an object to invoke the editor.
Click the
Permissions
tab.
Select a role or user.
Select an operation or click the column header to select the entire range of operations.
You can select multiple operations by holding CTRL+Alt down while clicking the operations.
Click
Grant
or
Revoke
.
Click
OK
to exit the editor
Keep in mind that the more specific permissions are, the more time you may have to spend maintaining and updating them.
See Also
Creating and Editing Database Users
Creating and Editing Database Roles
Changing Database Users Associated with Existing Database Roles
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Granting_and_Revoking_Permissions_to_Modify_Database_Objects&oldid=5177
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Handling_Update_Events,Handling Update Events,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
You can customize the Entity update template subroutines.
To enable this option, choose
Tools > Options > Automation Options
and then select
Update Handlers
.
You can customize templates for the following objects:
Name
Table Name
Definition
Note
PostSQL
PreSQL
Storage Location
Initial Extent
PCT Free
No Logging
PCT Increase
Next Extent
PCT Used
When you edit an entity with the Entity Editor, ER/Studio Data Architect immediately calls your UpdateEntityHandler function in the ERSUpdateHandlers.bas file.
The function is called, ER/Studio Data Architect passes the entity object as the first parameter, the diagram object as the second parameter, and the UpdateType as the third parameter. This distinguishes which property has been updated. The body of the function in the file contains empty case statements for the different entity properties. These empty statements do nothing. You can customize/extend the update behavior of any of the object's properties listed above by implementing the bodies of the property case statements in the function.
ER/Studio Data Architect does not call the update event functions for entities until after you exit from the Entity Editor.
Example
Sub UpdateEntityHandler(CurEntity As Object, CurDiagram As Object, UpdateType As Integer)
Dim Prefix as String
Dim EntityName as String
Dim NewEntityName as String
Prefix = ""ERS""
Select Case UpdateType
Case UPDENTITYNAME
EntityName = CurEntity.EntityName
NewEntityName = Prefix + EntityName
CurEntity.EntityName = NewEntityName
Case UPDENTITYTABLENAME
Case UPDENTITYDEFINITION
Case UPDENTITYNOTE
Case UPDENTITYPOSTSQL
Case UPDENTITYPRESQL
Case UPDENTITYSTORAGELOCATION
Case UPDENTITYINITIALEXTENT
Case UPDENTITYPCTFREE
Case UPDENTITYNOLOGGING
Case UPDENTITYPCTINCREASE
Case UPDENTITYNEXTEXTENT
Case UPDENTITYPCTUSED
End Select
End Sub
In this example, the UpdateEntityHandler function is modified so that a prefix of ERS is attached to the entity name each time you change the entity name.
Here is a more detailed explanation. When you edit the entity name and change it to Entity1, you also automatically add a prefix to the name. By modifying the case statement in the body of the UpdateEntityHandler function in the manner shown above, the entity name becomes ERSEntity1.
Notes
When ER/Studio Data Architect starts, it reads in all the update event handler functions from the file ERSUpdateHandlers.bas. Modifications to these functions while the application is running have no effect. You must restart ER/Studio Data Architect for the modifications to take effect.
A user cannot declare a specific object type (for example, Entity) in the update event handler functions. All objects must be declared as the generic Object type.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Handling_Update_Events&oldid=5327
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/How_to_Specify_Repository_Ports,How to Specify Repository Ports,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Administrator Guide
To change the ports that the server listens to you will need to edit registry keys on the machine that the Repository Application Server is running on. See
How to Specify Repository Ports - Server Side
.
Client Side
On the client side, in
ER/Studio Data Architect
you can use the menu
Repository > Repository Properties
. Change to the
Server
tab page and specify the ports that the client communicates to. The register value
RepoServer Port
mentioned before corresponds to the
Communication Port
listed on the
Server
tab. The register value
RepoProbe Port
corresponds to the
Identification Port
listed on the
Server
tab.
The identification port uses a UDP broadcast to identify running Repository servers that can be connected to in order to provide a list to the user (for example, the list in the
Repository > Options
dialog). This is optional and should not cause any issues if it is unavailable.
The communication port provides all communication between the ER/Studio client and the Repository server services, such as
login
requests,
get diagram
requests,
checkout/check-in
requests,
event updates
, and any other operations requiring information from the Repository. All communication is initiated by the client via TCP/IP. This port is required for use of the Repository, although it can be changed to a different port number if necessary.
The
TLS
checkbox allows you to securely connect with the repository at port 54334 or another port of your choosing.
See Also
How to Specify Repository Ports - Server Side
Setting Repository and ER/Studio Team Server Options
Working with ER/Studio Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=How_to_Specify_Repository_Ports&oldid=6251
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/IDEF1X_Notation,IDEF1X Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Setting the Relationship Notation
Identifying versus Non-Identify means that the parent entity identifies the child e.g. City contains (identifying) State allows us to have two Cities of the same name that can be made unique by the State within they exist. e.g. Dover in Delaware, Dover in Minnesota.
Non Specific Relationships, also referred to as a ""many to many relationship"", is an association between two entities in which each instance of the first entity is associated with zero, one, or many instances of the second entity and each instance of the second entity is associated with zero, one, or many instances of the first entity. These cannot be created in most databases so a special relationship exists to model it until it can be resolved with an associative entity.
Multiplicity is shown with adornments on each end of the line and shows the number of each Parent to each Child entity as a range with lower and upper values.You read the line from each direction. e.g. State must have one to many Cities. City must have one and only one State.
The following illustrates how relationships are presented in ER/Studio Data Architect using the IDEF1X notation:
IE is considered to be semantically stronger than IDEF1X, supporting more abstract approaches to data modeling. IE is more flexible in supporting subtypes, permitting roll up (generalization) and roll down (specialization) transformations. In addition, primary keys are less prominent in the IE notation; therefore, its practitioners are less likely to think about logical key choice prematurely.
See Also
IE (James Martin) Notation
IE (Crow's Feet) Notation
Filtered ID (Hide Foreign Keys) Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=IDEF1X_Notation&oldid=5629
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/IE_(Crow%27s_Feet)_Notation,IE (Crow's Feet) Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Setting the Relationship Notation
Identifying versus Non-Identify means that the parent entity identifies the child e.g. City contains (identifying) State allows us to have two Cities of the same name that can be made unique by the State within they exist. e.g. Dover in Delaware, Dover in Minnesota.
Non Specific Relationships, also referred to as a ""many to many relationship"", is an association between two entities in which each instance of the first entity is associated with zero, one, or many instances of the second entity and each instance of the second entity is associated with zero, one, or many instances of the first entity. These cannot be created in most databases so a special relationship exists to model it until it can be resolved with an associative entity.
Multiplicity is shown with adornments on each end of the line and shows the number of each Parent to each Child entity as a range with lower and upper values.You read the line from each direction. e.g. State must have one to many Cities. City must have one and only one State.
The following illustrates how relationships are presented in ER/Studio Data Architect using the IE (Crow's Feet) notation.
See Also
IDEF1X Notation
IE (James Martin) Notation
Filtered ID (Hide Foreign Keys) Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=IE_(Crow%27s_Feet)_Notation&oldid=5631
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/IE_(James_Martin)_Notation,IE (James Martin) Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Setting the Relationship Notation
Identifying versus Non-Identify means that the parent entity identifies the child e.g. City contains (identifying) State allows us to have two Cities of the same name that can be made unique by the State within they exist. e.g. Dover in Delaware, Dover in Minnesota.
Non Specific Relationships, also referred to as a ""many to many relationship"", is an association between two entities in which each instance of the first entity is associated with zero, one, or many instances of the second entity and each instance of the second entity is associated with zero, one, or many instances of the first entity. These cannot be created in most databases so a special relationship exists to model it until it can be resolved with an associative entity.
Multiplicity is shown with adornments on each end of the line and shows the number of each Parent to each Child entity as a range with lower and upper values.You read the line from each direction. e.g. State must have one to many Cities. City must have one and only one State.
The following illustrates how relationships are presented in ER/Studio Data Architect using the IE (James Martin) notation.
See Also
IDEF1X Notation
IE (Crow's Feet) Notation
Filtered ID (Hide Foreign Keys) Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=IE_(James_Martin)_Notation&oldid=5630
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Import_an_SQL_Procedure,Import an SQL Procedure,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Editing SQL Procedures
In the
Data Model Explorer
, expand the Physical
Main Model
, right-click the
Procedures
node, and then click
New Procedure
.
On the
SQL
tab, click
Import
and then type, or browse to and then select the name of SQL procedure file you want to import.
Complete the
Procedure SQL Editor
and then click
OK
to create the procedure.
See Also
Creating and Editing Procedures
Developing the Physical Model
Export an SQL Procedure
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Import_an_SQL_Procedure&oldid=5829
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Data_Dictionary,Importing a Data Dictionary,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
You can import the Data Dictionary of another data model diagram (DM1 file), making it building a new model easier and more efficient. You can also use macros to perform task such as importing items like domains and object definitions, setting storage parameters on physical tables, and add naming conventions to constraints.
Using a common data dictionary in your models facilitates the re-use and enforcement of established data definitions across multiple data models. When you important a Data Dictionary, the new objects are added to the existing Data Dictionary. ER/Studio Data Architect maintains all existing dictionary objects as well as organization structures.
To import a Data Dictionary:
Choose
File > Import Data Dictionary
.
In the
File Name
box, type the name of the data model where the target data Data Dictionary is stored, or browse and locate it.
Choose how you want to handle name duplications by selecting one of the option listed in the
Resolve Imported Objects with Duplicate Names
pane.
Click
Open
.
See Also
Copying and Pasting Data Dictionary Objects
Changing Data Dictionary Object Bindings and Values
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Data_Dictionary&oldid=6515
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Model,Importing a Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Creating and Working With Data Models
ER/Studio Data Architect allows you to import models from several other applications. This section describes the following import methods:
Importing a Model from an ERX File
Importing a Model from External Metadata
Importing a Model from a SQL File
Importing a Model from a JSON File
ER/Studio MetaWizard Import/Export Bridges
Note:
For the best performance when reverse engineering large databases, select Circular or Tree as the initial layout of your model.
See Also
Reverse Engineering an Existing Database
Creating a New, Blank Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Model&oldid=6831
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Model_from_External_Metadata,Importing a Model from External Metadata,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Importing a Model
MetaWizard, a separate product available from IDERA, extends ER/Studio Data Architect's functionality by providing an import bridge that allows you to import metadata from applications such as Microsoft Excel, CA AllFusion Erwin, IBM Rational Data Architect, Oracle Designer, and Sybase PowerDesigner, and also allows you to import metadata from XML structures.
Click
File > New
.
Select
Import Model from
and then from the list, click
External Metadata
.
Tip:
Alternatively, with a model already opened, you can select
File > Import File > From External Metadata
. In this case, the new model will be imported into the open diagram.
Click
Import
.
From the
Import from
list in the
Import External Metadata
wizard, select the XML type of the file to be imported or the application that created the file.
In the
Available Options
area, click the
Value
field in the
File
row, click the ellipses (
...
) and then select the file to be imported.
Optionally, set the other available options, which vary depending on the type of the selected file in the
Import From
list.
Click
Next
.
In the
Name
column, click on each of the parameters to see descriptions and help for the parameter. Click on the corresponding cell in the
Value
column to change its value.
To start the import, click
Next
.
The import log displays.
If the import was successful, click
Finish
to create the model.
Save the new model.
{{Note|The options are self-explanatory and additional details appear in the area beneath the options list.
You can find additional information on the Meta Integration Model Bridges at
http://www.metaintegration.net/Partners/IDERA.html
.
The Import File From External Metadata command generates a data model based on metadata in standard XML and common proprietary formats. For a current list of supported platforms, valid BridgeIDs, and corresponding bridge names, see
ER/Studio MetaWizard Import/Export Bridges
.
See Also
Importing a Model from an ERX File
Importing a Model from a SQL File
ER/Studio MetaWizard Import/Export Bridges
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Model_from_External_Metadata&oldid=6453
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Model_from_a_JSON_File,Importing a Model from a JSON File,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Importing a Model
ER/Studio Data Architect lets you create a data model by importing JSON files using a JSON document.
Click
File > New
.
Click
Import Model from
, and then select
JSON File
.
Click
Import
.
Navigate to the appropriate directory, and then select the .JSON or .txt file.
Select the target platform from the available list.
Select how you want the system to handle repeated elements, whether you want a new nested object for each element or combine all elements into a single, nested object.
Select an
Initial Layout Option
format to display the data.
Check
Use 'Roll-Up Contained Objects' display mode
to cause the element display to change between the standard graph structure and the rolled-up, nested style.
Click
OK
to begin importing.
When the
JSON Import Status
displays
Finished Import
, click
Close
.
Save the new model.
See Also
Importing a Model from a SQL File
Creating a New, Blank Data Model
Importing a Model from External Metadata
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Model_from_a_JSON_File&oldid=6837
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Model_from_a_SQL_File,Importing a Model from a SQL File,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Importing a Model
Choose
File > New
.
Select
Import Model From
, and then select
SQL File
or select
Import File
from the
Tools
ribbon, and then select
SQL File
.
Click
Import
.
Note:
The SQL file should be valid and encoded as ANSI or UTF-8 (no BOM)..
Complete the Import Database SQL File dialog, and then click
OK
.
The import log displays.
Optional
. To save or print the log, click
Save to File
or
Print
.
If the import was successful, click
Finish
to create the model.
When the Import Status dialog displays
Finished Import
, click
Close
.
Save the new model.
The following describe fields and options in the wizard that require additional explanation.
Quick Launch
: In the last step of the wizard, you can save settings to a file for later reuse. If you have previously saved such a file, you can load it by clicking the... button next to Select Settings File on page 2 of the Import Model wizard. Then click Go to run the import exactly as before, or click Next to modify the settings. The Wizard Quick Launch data is saved as an.rvo file. The default location for these files is:
C:\Users\<user>\AppData\Roaming\IDERA\ERStudio\XML
To change the default directory for Quick Launch files, choose
Tools > Options > Directories
.
Select a Database SQL File
: Type the database file name or browse to the file location and then click Open.
Select the target database platform
: From the list, select the target database platform.
Infer Referential Integrity
: ER/Studio Data Architect can infer referential Integrity when none is declared in the database. Click the options that follow to create relationships between entities in your diagram.
Infer Primary Keys
: If selected, ER/Studio Data Architect infers primary keys from unique indexes on a table. If more than one unique index exists on a table, ER/Studio Data Architect chooses the index with the fewest columns. Note this option is disabled for Databricks, which only supports Bloom Filter Indexes.
Infer Foreign Keys from Indexes
: If selected, ER/Studio Data Architect infers foreign keys from indexes. When inferring foreign keys from indexes, ER/Studio Data Architect looks for indexes whose columns match the names, datatype properties, and column sequences of a primary key. If the ""child"" index is a primary key index, it must contain more columns than the ""parent"" primary key. In this case, an identifying relationship is created. Note this option is disabled for Databricks, which only supports Bloom Filter Indexes.
Infer Foreign Keys from Names
: If selected and your database contains foreign keys, ER/Studio Data Architect infers foreign keys from names. When inferring foreign keys from names, ER/Studio Data Architect looks for columns matching the names and datatype properties of a primary key. In this case, a non-identifying relationship is created. ER/Studio Data Architect cannot infer relationships where the child column has a role name, instead create a non-identifying relationship and then designate the correct role-named column using the Edit Rolename function; right-click the relationship and then click Edit Rolename.
Infer Domains
: If selected, ER/Studio Data Architect infers domains from the columns in the database. ER/Studio Data Architect creates a domain for each unique combination of a column name and its associated datatype properties. Duplicate domains with an underscore and number suffix indicate that columns with the same name but different datatypes were found in the database. This can alert you of how standardized the columns are in a database. You can use macros to consolidate domains and preserve the bindings from the inferred domains.
Select the Initial Layout Option
: Select an initial layout for the data model:
Circular Layout
or
Tree Layout
: If selected, provides best performance when reverse engineering large databases. For more information, see
Changing Data Model Layout
.
View Parser
: Select a platform-specific syntax interpreter.
Summary of Selected Objects
: Select an object type to display in the Summary of Selected Objects grid and then review the object type, owner, and object name of all the objects you selected for the reverse engineer.
NUMBER datatype
: NUMBER or NUMBER(*) you must set the width and scale to *. A width of 0 will be converted to * when generating DDL.
See Also
Importing a Model from an ERX File
Importing a Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Model_from_a_SQL_File&oldid=7789
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Importing_a_Model_from_an_ERX_File,Importing a Model from an ERX File,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Importing a Model
ER/Studio Data Architect lets you create a data model by importing ERX files created with ERwin or Meta Integration's MIMB. ER/Studio Data Architect can import ERX files created with ERwin, versions 2.6 through 3.52.
Click
File > New
.
Select
Import Model from
and then from the list, choose
ERX File
.
Click
Import
.
Note:
You can also go from
File > Import File > From ERX File
.
Navigate to the appropriate directory, select the.erx file, and then click
Open
.
The import log displays.
Optional. To save or print the log, click
Save to File
or
Print
.
If import was successful, click
Finish
to create the model.
When the
ERX Import Status
displays
Finished Import
, click
Close
.
Save the new model.
See Also
Importing a Model from a SQL File
Creating a New, Blank Data Model
Importing a Model from External Metadata
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Importing_a_Model_from_an_ERX_File&oldid=5186
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Installing_ER/Studio_Data_Architect,Installing ER/Studio Data Architect,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
This section will help you ensure your environment meets the technical requirements and helps you install
ER/Studio Data Architect
.
You can download a 14-day trial version of
ER/Studio Data Architect
, from
https://www.idera.com/er-studio-data-architect-software
. IDERA will send you a license registration code by email.
System Requirements
Review the requirements before you install
ER/Studio Data Architect
. Adhering to these requirements optimizes the performance.
ER/Studio Data Architect Requirements
Hardware
Processor
Dual Core or higher
RAM
4 GB
Disk Space
2.5 GB
Operating System
Any of the following:
• Windows 7
• Windows 8
• Windows 8.1
• Windows 10
• Windows 11
Software
To use an Open Data Base Connectivity (ODBC) database as a data source, install the ODBC driver on your client computer.
To connect to the DBMS using native connectivity, install the native client libraries available from the DBMS vendor.
Privileges
Local administrator privileges (required for installation only).
Appropriate permissions are required to reverse or forward engineer directly from or to a database.
Installing ER/Studio Data Architect
Tip:
We recommend to have installed most current version of both,
ER/Studio Team Server
and
ER/Studio Data Architect
, to ensure compatibility.
Note:
It is not possible to install the x64 bit version where a x32 bit version is also installed. You will need to remove any previously installed x32 bit versions of the software.
Log on to Windows with local administrator privileges.
Start the
ER/Studio Data Architect
installation program.
Walk through the installation wizard following the on-screen prompts.
The following provides additional information for some options that you can check after the installation:
You can change the notation setting. Go
Tools > Options
, and then click the
Logical
or
Physical
tab where you can choose the
notation type
.
By default,
ER/Studio Data Architect
installs shared directories and application files such as the DatatypeMapping, Macros, and Sample Models directories in the following location:
C:\ProgramData\IDERA\ERStudioDA_x.x
. If you prefer to store these files in another directory after installation, follow the procedure in
Changing the Location of Shared Files
.
For step-by-step instructions on how to use
ER/Studio Data Architect
, see the
Tutorials
section.
Aditional Notes
For silent installations, launch the installer with commands adding -q to the installer:
installer.exe -q
Also you will be able to see a percentage bar if instead of -q you set a -passive:
installer.exe -passive
See Also
Tutorial: Modeling Tutorials
Upgrading ER/Studio Data Architect
Uninstalling ER/Studio Data Architect
Licensing ER/Studio Data Architect
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Installing_ER/Studio_Data_Architect&oldid=7140
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Installing_Embarcadero_ER/Studio_Data_Architect,Installing ER/Studio Data Architect,"From ER/Studio Data Architect
(Redirected from
Installing Embarcadero ER/Studio Data Architect
)
Jump to:
navigation
,
search
Go Up to
Introduction
This section will help you ensure your environment meets the technical requirements and helps you install
ER/Studio Data Architect
.
You can download a 14-day trial version of
ER/Studio Data Architect
, from
https://www.idera.com/er-studio-data-architect-software
. IDERA will send you a license registration code by email.
System Requirements
Review the requirements before you install
ER/Studio Data Architect
. Adhering to these requirements optimizes the performance.
ER/Studio Data Architect Requirements
Hardware
Processor
Dual Core or higher
RAM
4 GB
Disk Space
2.5 GB
Operating System
Any of the following:
• Windows 7
• Windows 8
• Windows 8.1
• Windows 10
• Windows 11
Software
To use an Open Data Base Connectivity (ODBC) database as a data source, install the ODBC driver on your client computer.
To connect to the DBMS using native connectivity, install the native client libraries available from the DBMS vendor.
Privileges
Local administrator privileges (required for installation only).
Appropriate permissions are required to reverse or forward engineer directly from or to a database.
Installing ER/Studio Data Architect
Tip:
We recommend to have installed most current version of both,
ER/Studio Team Server
and
ER/Studio Data Architect
, to ensure compatibility.
Note:
It is not possible to install the x64 bit version where a x32 bit version is also installed. You will need to remove any previously installed x32 bit versions of the software.
Log on to Windows with local administrator privileges.
Start the
ER/Studio Data Architect
installation program.
Walk through the installation wizard following the on-screen prompts.
The following provides additional information for some options that you can check after the installation:
You can change the notation setting. Go
Tools > Options
, and then click the
Logical
or
Physical
tab where you can choose the
notation type
.
By default,
ER/Studio Data Architect
installs shared directories and application files such as the DatatypeMapping, Macros, and Sample Models directories in the following location:
C:\ProgramData\IDERA\ERStudioDA_x.x
. If you prefer to store these files in another directory after installation, follow the procedure in
Changing the Location of Shared Files
.
For step-by-step instructions on how to use
ER/Studio Data Architect
, see the
Tutorials
section.
Aditional Notes
For silent installations, launch the installer with commands adding -q to the installer:
installer.exe -q
Also you will be able to see a percentage bar if instead of -q you set a -passive:
installer.exe -passive
See Also
Tutorial: Modeling Tutorials
Upgrading ER/Studio Data Architect
Uninstalling ER/Studio Data Architect
Licensing ER/Studio Data Architect
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Installing_ER/Studio_Data_Architect&oldid=7140
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Installing_Embarcadero_ER_Studio_Data_Architect,Installing ER/Studio Data Architect,"From ER/Studio Data Architect
(Redirected from
Installing Embarcadero ER Studio Data Architect
)
Jump to:
navigation
,
search
Go Up to
Introduction
This section will help you ensure your environment meets the technical requirements and helps you install
ER/Studio Data Architect
.
You can download a 14-day trial version of
ER/Studio Data Architect
, from
https://www.idera.com/er-studio-data-architect-software
. IDERA will send you a license registration code by email.
System Requirements
Review the requirements before you install
ER/Studio Data Architect
. Adhering to these requirements optimizes the performance.
ER/Studio Data Architect Requirements
Hardware
Processor
Dual Core or higher
RAM
4 GB
Disk Space
2.5 GB
Operating System
Any of the following:
• Windows 7
• Windows 8
• Windows 8.1
• Windows 10
• Windows 11
Software
To use an Open Data Base Connectivity (ODBC) database as a data source, install the ODBC driver on your client computer.
To connect to the DBMS using native connectivity, install the native client libraries available from the DBMS vendor.
Privileges
Local administrator privileges (required for installation only).
Appropriate permissions are required to reverse or forward engineer directly from or to a database.
Installing ER/Studio Data Architect
Tip:
We recommend to have installed most current version of both,
ER/Studio Team Server
and
ER/Studio Data Architect
, to ensure compatibility.
Note:
It is not possible to install the x64 bit version where a x32 bit version is also installed. You will need to remove any previously installed x32 bit versions of the software.
Log on to Windows with local administrator privileges.
Start the
ER/Studio Data Architect
installation program.
Walk through the installation wizard following the on-screen prompts.
The following provides additional information for some options that you can check after the installation:
You can change the notation setting. Go
Tools > Options
, and then click the
Logical
or
Physical
tab where you can choose the
notation type
.
By default,
ER/Studio Data Architect
installs shared directories and application files such as the DatatypeMapping, Macros, and Sample Models directories in the following location:
C:\ProgramData\IDERA\ERStudioDA_x.x
. If you prefer to store these files in another directory after installation, follow the procedure in
Changing the Location of Shared Files
.
For step-by-step instructions on how to use
ER/Studio Data Architect
, see the
Tutorials
section.
Aditional Notes
For silent installations, launch the installer with commands adding -q to the installer:
installer.exe -q
Also you will be able to see a percentage bar if instead of -q you set a -passive:
installer.exe -passive
See Also
Tutorial: Modeling Tutorials
Upgrading ER/Studio Data Architect
Uninstalling ER/Studio Data Architect
Licensing ER/Studio Data Architect
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Installing_ER/Studio_Data_Architect&oldid=7140
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Instantiating_the_Parent_Object_in_an_External_Application,Instantiating the Parent Object in an External Application,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
The namespace and context differ somewhat outside of ER/Studio Data Architect's Macro Editor. External programs use the COM interface. For example, in an external Visual BASIC project, the base object is
ERStudio.Application
, whereas the base object in the ER/Studio Data Architect Macro environment is
DiagramManager.
The object models and instantiation sequence are otherwise identical.
There is a working example VB application installed with ER/Studio Data Architect. It is located in your installation directory under ""
C:\Program Files\IDERA\ERStudio Data Architect 18.x\Readme\TableList.zip
."" Other examples of this type exist in MSVB6,.Net VB, and C#, and are in the same directory.
To run it, open the archive file TableList.zip and follow steps 1-3 below.
If you are familiar with COM programming, skip to step 3 and the code segments below to configure your VB project for ER/Studio Data Architect.
Copy
Pubs.dm1
to
C:\
.
Pubs.dm1 is bundled with the application and is in:
C:\ProgramData\IDERA\ERStudioDA_x.x\Sample Models
Using MS Visual Basic 6.0 (or later), open the VB project file TableList.vbp.
Make sure your project refers to the ER/Studio Data Architect type library:
a) Choose
Project > References..
.
b) Select ER/Studio Data Architect
Type Library
from the list.
Add the following declarations at the appropriate scope. They are at module scope in the example TableList.bas: '
Option Explicit 'Require object declarations
Public app As ERStudio.Application 'Specify as ER/Studio types rather than ""Object""
Public diagm As ERStudio.Diagram
Public mdl As ERStudio.Model
Public ent As ERStudio.
And instantiate in this way:
Set app = CreateObject(""ERStudio.Application"") 'Start ER/Studio Data Architect if not running
Set diagm = app.OpenFile(""C:\Pubs.dm1"") 'Instantiate a diagram
Set mdl = diagm.ActiveModel 'Instantiate a model
Macros which run inside ER/Studio Data Architect's WINWRAP BASIC shell will use the pre-initialized 'DiagramManager' object. There are numerous examples of this in ER/Studio Data Architect's Macro tab and in the Code Samples section of help.
Good Programing Practice:
Use the
DiagramManager.GetLastErrorCode()
or
DiagramManager.GetLastErrorString()
to check for errors after method calls.
To summarize:
Outside ER/Studio Data Architect you begin with an instance of
ERStudio.Application
. Inside you begin with DiagramManager, and an instance is already running.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Instantiating_the_Parent_Object_in_an_External_Application&oldid=7954
""
Category
:
Data Templates"
https://docwiki.embarcadero.com/ERStudioDA/203/en/Instantiating_the_Parent_Object_in_the_Macro_Editor,Instantiating the Parent Object in the Macro Editor,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automation Objects Programmer's Guide
The DiagramManager is the parent-level object required to access all other ER/Studio Data Architect objects. The DiagramManager object is instantiated when you start the Macro Editor, which means you can immediately start using this object; you do not need to create it. Begin your code with:
Dim ActiveDiagram as Diagram
Set ActiveDiagram = DiagramManager.ActiveDiagram
If you are writing an external application, the parent object must be instantiated as
ERStudio.Application
. See
Instantiating the Parent Object in an External Application
.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Instantiating the Parent Object in an External Application
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Instantiating_the_Parent_Object_in_the_Macro_Editor&oldid=5189
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Integrating_with_Git,Integrating with Git,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Beginning with ER/Studio Data Architect 20.3, you can deploy a Devops process by integrating Data Architect with your Git repository. There is a
brief video
demonstrating this functionality. This feature allows you to commit CREATE DDL to your Git repository as well as use the Compare/Merge functionality to compare models with previous versions of that CREATE DDL in your Git repository. You can get started in setting up your Git integration by clicking the
Git Options
button in the
Tools
menu. You must be in the Physical Model view for this option to appear.
Clicking
Git Options
opens the Git Integration window.
Complete the following fields in the Git Integration window:
Server URL
. Type the https URL required for cloning or updating a particular repository.
User Name
. Type the name of the user account necessary to access the repository.
Password / Personal Access Token
. Type the password or token corresponding to the user accounts entered in the previous field.
Location
. Type or browse for the local Git repository that you want to clone or update.
Enable warning before discarding uncommitted changes
. Check this box to turn on warnings that appear while reverting local changes. Whenever an operation is performed to generate a database (.sql file) or compare and merge, ERDA ""cleans"" the repository by pulling the latest changes remotely. This action means that any local changes not committed and pushed are discarded.
Test
. Click this button to verify the entered credentials. You must successfully test your information before the
Clone / Update
button activates.
Clone / Update
. Use this button to fetch changes from the remote repository into the local repository. This button is inactive until after you test your entries.
Note:
ERDA can update the repository only if the URL used to clone it matches the server URL provided in this window. Otherwise the repository is treated as a separate repository and ERDA does not allow the update.
See Also
Using the Git features in ER/Studio
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Integrating_with_Git&oldid=7948
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Introduction,Introduction,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
ER/Studio Data Architect
is a visual modeling application used for platform-independent logical data architecture analysis and design, in addition to platform-specific physical database design and construction. The powerful, multi-level design environment addresses the everyday needs of database administrators, developers, and data architects who build and maintain large, complex database applications and strive to consolidate, report, and re-use metadata across the enterprise.
The progressive interface and simplicity of
ER/Studio Data Architect
has been designed to effectively address the ease-of-use issues which have plagued data modeling and CASE tools for the past decade and more. The application equips you to create, understand, and manage the life-cycle of mission-critical database designs and business metadata within the enterprise.
ER/Studio Data Architect
is rich and customizable, offering strong logical design capabilities like:
The ability to spawn many physical designs from a corporate logical design.
Bi-directional model comparison and information synchronization.
Visual-Basic for Applications API for product customization.
Powerful DDL reverse engineering and generation.
Metadata import and export capabilities.
Data lineage documentation.
Sophisticated XML, HTML, and RTF-based documentation and reporting facilities.
Application Interface
The application interface is divided into several tabbed windows that let you navigate and customize your workspace. The application includes context-sensitive toolbars, menus, intuitive icons, keyboard commands, and other resources to help you work efficiently. ER/Studio Data Architect user interface has a standard Windows look and feel.
For a detailed description of the internal data structure of the ER/Studio Data Architect application and the Repository, you can look at Metadata models (DM1 files), usually found in:
C:\ProgramData\IDERA\ERStudioDA_x.x\Sample Models
For information on enhanced UI features, please see the corresponding numbers below or mouseover the image:
Interface Features
ER/Studio Data Architect
has an enhanced user interface that is similar to Microsoft Windows with intuitive icons.
You can dock frequently-used design icons on a separate toolbar that's always available.
The name of the active model, with or without the full path to the file, can be displayed on the title bar of the main application window. This is an option you can set in
Tools > Options > Application > Application Defaults
.
ER/Studio Data Architect displays the active model in bold type, so that you can easily see which model or submodel you are working on.
The
Data Model
tab of the Data Model Explorer displays indexes, relationships, and attributes as separate nodes.
The
Data Model
tab of the Data Model Explorer displays schema objects like packages, procedures, functions, materialized views, auxiliary tables, and triggers as separate nodes.
The
Overview Window
lets you navigate large Data Models.
The
Zoom Window
helps you focus on the details of a specific area of a large, reduced diagram.
The Data Model Explorer is comprised of five tabs that offer easy access to important functionality and also includes an Explorer tree that lets you efficiently navigate the objects of your data models. The ER/Studio Data Architect interface to the Data Model is divided into two main areas. On the left is the Data Model Explorer and on the right is the Data Model Window. This convention is carried out on other tabs of the user interface, such as the Repository and Data Lineage tabs, where you’ll find an explorer on the left and a graphical representation on the right. The Data Model Window also provides a complete workspace for creating physical and logical data models and smaller, movable windows to help you navigate large data models.
See Also
Tutorial: Installing ER/Studio Data Architect
Upgrading ER/Studio Data Architect
Licensing ER/Studio Data Architect
What's New
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Introduction&oldid=6040
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Introduction_to_Data_Lineage,Introduction to Data Lineage,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Documenting Data Extraction, Transformation, and Load
Data Lineage enables you to document the movement of data from point A to point B, and any intermediate steps in between. This movement is sometimes referred to as Extraction, Transformation and Load (ETL). Points A and B can be anything from flat files, high-end databases like Oracles and DB2, XML files, Access databases, and Excel worksheets. This is sometimes referred to as source and target mapping. A model produced in ER/Studio can represent any point along the way. Data Architects need the ability to specify the ""source"" or ""target"" of data, down to the column/attribute level. Along with the metadata that defines the source and target mapping are rules for how the data is manipulated along the way.
The task of moving the data is often assigned to specialized developers who have little data modeling experience. They need good documentation to guide them in deciding what data goes where. Documenting the movement or mappings for the developers is usually the task of a data architect. Data Architects need to track data between very complex systems. For example, an organization may have a data warehouse that consists of data sourced from a number of different systems, such as CRM (Customer Relationship Management), payroll, general ledger, accounting, product, and inventory systems. The data warehouse may in turn have on-line data marts that receive data from it to produce reports for Sales Executives, HR Executives and marketing teams that are generating reports about the performance of various aspects of the business.
The following illustrates a generalized data movement process:
In this illustration, the data is sourced from various systems on the left and fed to a data warehouse that stores the data in a format that is more conducive to reporting. This reduces the amount of overhead on the source systems so resources are not used for reporting directly on them. The data also must be cleansed to ensure the quality of the data used for reports. Reports can be generated directly from the Enterprise Data Warehouse (EDW), but many times are fed to other specialized data marts targeted for specific audiences. Further cleansing or manipulation of the data is performed in the process of moving it to the Online Data Manager (ODM). An organization using ERStudio would most likely have a model of each part of this process, the Customer Relation Management (CRM), General Ledger/Accounting, Orders, Inventory, EDW, and ODMs. It is the job of the data architect to ""map"" these systems together. They manage the models and need to define the mappings which produce reports that assist the data warehouse engineers. An ETL developer feeding data into one of the data marts needs to know what columns and tables to get the data from in the EDW. For consistency sake, they may also need the mappings from the legacy or Online Transaction Processing (OLTP) systems.
ER/Studio Data Architect provides several ways for you to document how your data moves from system to system.
In Reports and generated SQL you can view the ETL information you have specified as follows:
In the Table editor, you can document how often the data is extracted along with the rules that regulate data movement
In the Table Column editor, you can document how the data is transformed as it moves from source to target, known as source-to-target mapping.
Using the Data Lineage tab you can create a visualization of the data movement and transformation, so you can see the relationships between the source and target, how the data flows from one table to another, and how the data is transformed.
See Also
Data Lineage Workflow
Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Introduction_to_Data_Lineage&oldid=5191
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/JSON_Support,JSON Support,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Supported Database Platforms
The Javascript Object Notation is a file-based format containing a hierarchical structure of fields. Fields that contain substructures can be thought of as Nested Objects which in turn have fields and substructures. ER/Studio allows you to model these hierarchical structures and convert them to and from relational logical data models. A common use case is to create a logical data model representing a canonical or polyglot model for multiple JSON message structures held as physical data models. We do this in the same way we do for database platforms.
Data Architect will reverse engineer JSON instance data or JSON Schema files to produce a physical data model. For the hierarchical structures in these JSON documents, Data Architect will render these as rolled-up structures inside the Collections for ease of viewing. It will also generate a logical data model based on the objects it finds within the JSON.
Contents
1
Generating a Physical Data Model for JSON
2
The Rolled Up View
3
Forward Engineering
4
Import File
5
Nested Objects
6
JSON Schema Properties
7
See Also
Generating a Physical Data Model for JSON
The Generate Database wizard differs for each target platform but for JSON models there will be the following options:
For JSON Instance on Page 2 of the wizard
Propagated Foreign Key properties can be removed from generated objects or made as native fields which may be useful later to connect objects together elsewhere via code.
The Rolled Up View
The object view is useful to understand the reuse of objects and edit the cardinality to Nested Objects. You can also select a rendering of the model that is easier to visualize the hierarchical nature of the model.
On the Diagram tab of the ribbon bar select Diagram/Display Options
On the Object tab select the checkbox 'Roll Up Contained Objects'
Forward Engineering
For guidance on how to forward engineering JSON, please see
Generating a Script File or Database
.
The Generate Database wizard will produce sample JSON output or JSON Schema files. For JSON Schema files you can opt to output Draft 07 or Draft 2020-12. 
For Draft 202-12 there are options to control whether Nested Objects are set as reused and added to the $defs section of the JSON Schema file or embedded locally in their parent objects. There are also options for addressing reusable definitions.
Import File
For a walkthrough of how to import a JSON instance or schema file, please see
Importing a Model from a JSON File
.
Nested Objects
Where objects are nested within objects, the wizard creates separate objects that are created with a containment relationship. For example the following JSON object has nested objects within the ""name"" object:
""name"": {
""first"": ""John"",
""last"": ""Smith""
},
Tip:
Separate object creation is useful for improved modeling. For example, nested objects such as
address
can be shared between different objects rather than duplicated. This also allows modifications to be made to all address fields without having to change each nested item individually.
JSON Schema Properties
The
Table Editor
allows you to view and edit the properties of an object and its fields. Many of these properties won't apply to JSON instance files but will be used in JSON Schema generation.
Features such as enumerated lists can be created by using Reference Values and binding them to fields in the Reference Values tab. For more information see
Defining Valid Attribute Data Using Reference Values
See Also
Containment Relationships
Collection Editor
Tutorials: Working with Hierarchical Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=JSON_Support&oldid=7137
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Keyboard_Commands,Keyboard Commands,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
Keyboard commands, function keys, and shortcuts offer alternative ways to access ER/Studio Data Architect functionality without using the mouse. You can use keyboard commands to navigate diagrams and perform basic functions.
Contents
1
Basic Functions
2
Function Keys
3
Shortcuts
4
Hot Keys
5
Full Undo Redo
6
See Also
Basic Functions
ALT
: Switches on the shortcut keys for the ribbon bar functions
PAGE UP
: Scrolls up the Data Model Window.
PAGE DOWN
: Scrolls down the Data Model Window.
UP ARROW
: Scrolls up one line.
DOWN ARROW
: Scrolls down one line.
RIGHT ARROW
: Scrolls over one position to the right.
LEFT ARROW
: Scrolls over one position to the left.
MINUS SIGN
: Decreases zoom level by one step.
SHIFT+F8
: Lets you freeze the Zoom window so that you can pan around the diagram and still maintain focus on a specific diagram object. The same command unfreezes the Zoom window.
Function Keys
The function keys let you access certain features or dialog boxes.
F1
: Opens the online Help.
F2
: Moves focus to the left-hand Explorer window
F4
: Opens the Find Entity/View dialog.
F5
: Redraws the diagram.
F7
: Activates or deactivate shadowing.
F8
: Opens or closes a zoom window.
Shortcuts
Shortcuts let you access important functionality through key combinations.
CTRL+A
: Selects all entities in the Data Model Window.
CTRL+Shift+A
: Selects all relationship lines in the Data Model Window. One relationship line needs to be selected first.
CTRL+H
: Straightens the selected relationship lines horizontally. The lines will straighten based on the docking point against the parent entity.
CTRL+L
: Straightens the selected relationship lines vertically. The lines will straighten based on the docking point against the parent entity.
Hot Keys
You can use the following hot keys to navigate through your models in the Data Model Explorer (Note, F2 puts the Explorer in focus):
CTRL+Page Down
: Selects the previous tab in the Explorer Window
CTRL+Page Up
: Selects the next tab in the Explorer Window
Page Up
: Scrolls up one screen size.
Page Down
: Scrolls down one screen size.
CTRL+Home
: Scrolls to the upper left hand page of the model.
Up Arrow
: Scrolls up one line.
Down Arrow
: Scrolls down one line.
Full Undo Redo
The Undo and Redo commands restore your model to the last stage of edits. Find them under the Edit menu or use the CTRL+Z and CTRL+Y hot keys.
See Also
Overview
Automating ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Keyboard_Commands&oldid=7293
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Licensing,Licensing,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Administrator Guide
Contents
1
Upgrading Your License
1.1
ER/Studio Data Architect Editions, Enterprise Team Edition 2016 (or later) and pre-2016, and ER/Studio Business Architect Licenses
1.2
ER/Studio Team Server Licenses
2
Registering Your License
2.1
Registering a Trial or Workstation License at Application Startup
2.2
Registering a Workstation License after Application Startup
2.3
Closed Network Registration
2.4
Registering a Networked License
3
See Also
ER/Studio Data Architect
requires one or more licenses in order to run. A baseline license provides basic feature support for the product. In addition, incremental licenses may be required to support specific DBMS platforms, product add-ons or other functions.
ER/Studio Data Architect
supports three types of licenses:
Trial licenses
: A license for a 14-day, full-featured trial version of the product. The trial license must be registered before you can use the product. For more information, see
Registering a Trial or Workstation License at Application Startup
.
Workstation licenses
: A license or set of licenses that is tied to a particular workstation. If licensee has purchased a single seat license, licensee may install the product on one computer for being used by one end user. For more information, see
Registering a Workstation License after Application Startup
.
Networked licenses
: Networked licenses are administered and distributed by a central license server, AppWave Enterprise License Center. There are two types of networked licenses:
Concurrent licensing
: Users on different machines take turns using licenses from a shared pool.
Networked Named User licensing
: Licenses are pre-assigned to specific users that are setup on the license server's user list. Those users are guaranteed to have licenses available any time.
For more information, see
Registering a Networked License
.
Upgrading Your License
ER/Studio Data Architect Editions, Enterprise Team Edition 2016 (or later) and pre-2016, and ER/Studio Business Architect Licenses
Type / Version
ER/Studio Data Architect Editions and Enterprise Team Edition: 2016 (or later) Client License
ER/Studio Data Architect Editions and Enterprise Team Edition: Pre-2016 Client License
ER/Studio Business Architect: All Licenses
Workstation
ER/Studio 19.1.x uses the version 2016 serial number. Have end users perform the ""Update ..."" function in the License Manager to generate a 19.1.x license. Note that version 19.1.x must be installed on the same machine as 2016 and 2016+. There is no need to go to the Maintenance Portal.
Obtain your 2016 serial numbers from the
Maintenance Portal
. Provide 2016 serial numbers to your end users, and they will install and activate 19.1.x products by using the 2016 serial numbers.
Version 19.1.x uses the same serial number as the 2016+ version. If you have a 2016+ serial number, register it again on the same machine. The updated license will include the 19.1.x version. If you do not have a 2016+ serial number, obtain it from the
Maintenance Portal
.
NNU/Concurrent
Your
license server (ELC) administrator
must update the existing 2016/2016+ license certificates to obtain the 19.1.x license. End users need to download a new client license file (
named***.slip
or
concurrent***.slip
) from the ELC catalog or obtain it from the ELC administrator.
To update license files:
Open the ELC Web Admin page.
Click
Licenses
on the left menu panel.
Click
License Files
, and then click
Update Licenses
. If the subscription is current, the license and catalog are updated to add the most recent version entries.
Obtain your 2016 certificates from the
Maintenance Portal
. Your
license server administrator
must host them and send end users a new slip file.
Version 19.1.x uses the same certificates as version 2016+. If needed, obtain your version 2016+ license certificates from the
Maintenance Portal
. Ask your
license server administrator
to host the new license certificates.
If you encounter a discrepancy with license counts or have issues retrieving your licenses, please submit a
Support request
.
ER/Studio Team Server Licenses
ER/Studio Team Server 19.1.x uses the version 16.5 (2016+) serial number. Obtain your 2016+ serial number from the
Maintenance Portal
. Provide the 2016+ serial numbers to your end users, and they will need to register them in Team Server.
If you encounter a discrepancy with license counts or have issues retrieving your licenses, please submit a
Support request
.
Registering Your License
Registering a Trial or Workstation License at Application Startup
Shortly after downloading a trial version of an IDERA product, you should receive an e-mail from IDERA with a serial number, which must be registered as follows. These instructions also apply if you have purchased a product and received a serial number prior to running the application for the first time, or if the trial period has expired.
When you start the application the
IDERA License Registration
dialog appears.
Copy the serial number from the e-mail, and then paste it into the
Serial Number
field.
Enter your Developer Network (DN) account credentials in the
Login or Email
and
Password
fields.
Click
Register
.
Note:
If you have not previously created a DN account, click
I need to create a DN account
. If you have forgotten your password, click
I’ve lost my password
.
The activation file should be downloaded and installed automatically. If this does not happen, click the
Trouble Connecting? Try Web Registration
link in the license registration dialog and follow the prompts.
Registering a Workstation License after Application Startup
The following instructions assume that you have received a workstation license by e-mail and that you currently have a valid trial license. If you did not install a trial version or if the trial period has expired, follow the instructions in
Registering a Trial or Workstation License at Application Startup
instead.
Start the application.
Go to
Help > Launch License Manager
.
On the
Product License Manager
dialog, select
Serial > Add
.
Enter the serial number from the e-mail into the
Add Serial Number
dialog, and then click
OK
.
Expand
Unregistered Serial Numbers
item, right-click the serial number just added, and then click
Register
.
The
IDERA License Registration
dialog appears.
Copy the serial number from the e-mail, and then paste it into the
Serial Number
field.
Enter your Developer Network (DN) account credentials in the
Login or Email
and
Password
fields.
Click
Register
.
The activation file should download and install automatically. If this does not happen, click the
Trouble Connecting? Try Web Registration
link and follow the prompts.
Closed Network Registration
To register your product on a closed network machine please follow these steps:
Go to
https://license.embarcadero.com/srs6/activation.jsp
from a workstation with Internet access.
Enter the product serial number and the registration code from your workstation. The
registration code
is found in the
IDERA Product Registration
window.
Click
Next
and enter your Developer Network (DN) account credentials in the
Login or Email
and
Password
fields.
Click
Next
and then select
Download
and click on the
Register
button.
Save the registration file and transfer the registration file to the closed network workstation.
Return to the Product Registration Window and select the
I have received an activation file (*.slip or reg*.txt)
option.
Click
Browse
and navigate to the registration file. Then click on
Import
.
Registering a Networked License
If your organization uses networked licensing, a license administrator, department head, or someone providing a similar function, needs to provide you with a
.slip
activation file. Point to that license file in the Product Registration Window that appears when you launch the product.
Start the application. The IDERA License Registration dialog appears.
Select the
I have received an activation file (*.slip or reg*.txt)
option.
Click
Browse
and navigate to the registration file. Then click on
Import
.
You can also import your license through the License Manager (In case you already have another license registered).
Start the application.
Click
Help > License Manager
.
Select
License > Import
.
Browse and open the
.slip
activation file.
Tip:
If you have problems with either of the above procedures, please contact
support.
See Also
Upgrading From Previous Versions
Checking Out a Concurrent License for Offline Usage
Exporting Metadata for all Models and Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Licensing&oldid=6654
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Locating_an_Object_in_the_Data_Model_Window,Locating an Object in the Data Model Window,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
You can use this procedure to locate objects such as entities, tables, attributes, columns, indexes, procedures, keys, views, relationships, foreign keys, functions, procedures, and shapes. Some objects, such as users and roles, are not represented in the Data Model Window and so cannot be found using this method.
Find and click an object in the
Data Model Explorer
.
ER/Studio Data Architect highlights the object in the Data Model Window.
When searching for a foreign key or relationship, ER/Studio Data Architect focuses the Data Model Window on the parent and the relationship or foreign key is highlighted so you can follow the line to the child table.
See Also
Resizing Objects
Finding an Entity, Table or View
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Locating_an_Object_in_the_Data_Model_Window&oldid=5194
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Locking_Data_Model_Objects_to_a_Drawing_Shape,Locking Data Model Objects to a Drawing Shape,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
In the
Data Model Window
, place a shape close to the data model object you want to contain.
Click the shape and then use the sizing handles to resize the shape so that it encompass the objects you want to move with the shape.
Right-click the shape and choose
Containment > Enable
.
You can remove the containment restriction by right-clicking the object and then choosing
Containment > Disable
.
See Also
Overriding Color and Font Settings for a Specific Object
Changing the Model Background
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Locking_Data_Model_Objects_to_a_Drawing_Shape&oldid=5195
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Logging_In_and_Out_of_the_Repository_and_ER/Studio_TS,Logging In and Out of the Repository and ER/Studio TS,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
Log in to the Repository or ER/Studio Team Server
To log in to the Repository and/or Team Server, click
Log In
.
To activate Team Server log in, check the
Also log in to Team Server Core
box. This area is not available to users who do not have an Enterprise license.
Complete the log in dialog, and then click
OK
.
The following describes the options that require additional explanation:
User Name
: Enter your user name. This is case-sensitive.
Password
: Enter your password. This is case-sensitive. You can change your password by selecting
Repository > Security > Change Password
.
Log in using current Windows Account
: Select this option to log in to the Repository or ER/Studio TS using the user name and password of the current Windows user. This option accesses the LDAP server on the network to verify the user's credentials.
Remember me
: Select this option to retain your credentials for faster login next time.
Notes
During the Repository Installation, a default user name and password
Admin
is set as the default. The Administrator should change the Admin password after the initial log in.
The Admin user cannot be deleted. This prevents an accidental lockout. You can set up additional users with Roles and Privileges to maintain Repository security.
If an administrator changes the repository security, users must log in again to update their permissions.
Log out of the Repository
To log out of the Repository, click
Log Out
.
In the
Operation Status
dialog, select the desired options and operations and then click
Close
.
If you select
Do Not Display Dialog Again
and later want to see the Operation Status dialog, you can re-enable it in Options. For more information, see
Setting Repository and ER/Studio TS Options
.
See Also
ER/Studio TS wiki
Setting Repository and ER/Studio TS Options
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Logging_In_and_Out_of_the_Repository_and_ER/Studio_TS&oldid=7525
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Logical_Design_Concepts,Logical Design Concepts,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
To avoid bugs, rewrites, and, in some instances, failed projects, ensure critical design issues have been fully identified and addressed. In order to realize the benefits of data modeling, you must commit to certain practices that require a more thorough design cycle in order to realize a more efficient development cycle. A sound design can streamline the development process and improve the quality of your data models and ultimately improve the performance of your database.
Because most people involved in data modeling are database administrators or developers, there is a tendency to approach data modeling as a straightforward database design exercise. While you ultimately implement a data model as a database design, you should not dismiss the opportunity to re-examine fundamental assumptions about your business and the rules that govern it. At the design stage the focus should be on business problems, not the technical details. In the process of developing the logical model, you might discover a simpler approach to implementing a database design that better accommodates growth and change.
The following topics provide guidelines for the logical design process that should help you achieve better results:
Object Name Rules
describes how to name the entities and attributes in the logical design.
Logical Design Documentation
describes the importance of providing definitions for entities, attributes, and relationships.
Normalization
briefly describes the importance of normalizing your logical design before transforming it to a physical design.
See Also
Developing the Physical Model
Common Tasks
Validating the Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Logical_Design_Concepts&oldid=5197
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Logical_Design_Documentation,Logical Design Documentation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Logical Design Concepts
To ensure your ideas are understandable, document the meaning of your entities, relationships and attributes. A well-documented data model is easier to maintain and will probably find greater use in your organization.
Provide a definition for each entity in the logical model, even when their meanings seem obvious. Sometimes, this can reveal an incomplete design or logical inconsistencies. In addition to defining the entities, define all attributes in your logical design. Detailed documentation is invaluable to database developers and administrators who need to understand the design at its most basic level.
In addition to defining entities and attributes, you should also define the relationships in the logical model. Since relationships are used to enforce business rules, it is especially important to document their meaning. Relationships can be defined using verb phrases, names, and definitions. Verb phrases can clarify the business rules that govern the interaction between a pair of entities, while a name and definition can provide additional details about the relationship.
See Also
Normalization
Object Name Rules
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Logical_Design_Documentation&oldid=5198
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Main_Page,Online Help for ER/Studio Data Architect 20.3.x,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Getting Started
★
What's New
★
Release Notes
Installation Notes
|
Installation Guide
Upgrading From Previous Versions
Quick Start Guide
Tutorials
Administrator Guide
Changing the Location of Shared Files
Uninstalling
Licensing
How to Specify Repository Ports
Best Practices
Reference
ER/Studio MetaWizard Import/Export Bridges
Troubleshooting
Glossary
Supported Database Platforms
Table Of Contents
User Guide
Overview
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Using ER/Studio Data Architect
Working with ERStudio Repository
Automating ER/Studio Data Architect
Team Server & Repository
Installation
Administration
ETL/Data Lineage
ETL Import
Related Files
ER/Studio Data Architect Read Me
ER/Studio Viewer Read Me
ER/Studio Data Architect Quick Start Guide
ER/Studio Team Server and Repository Installation and Upgrade Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Main_Page&oldid=7976
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Manipulating_Relationship_Lines,Manipulating Relationship Lines,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Changing the Style of Relationship Lines
2
Create an N Bend
3
Straightening an N Bend
4
Change the Disposition of Relationship Lines
5
See Also
Relationship lines represent relationships between entities or between attributes. You can customize the appearance of any relationship line in any model, even when using auto layout. For example, if you use an Orthogonal layout, where all relationships bend at a 90 degree angle, you can change any individual bend to an N bend or straighten the relationship line.
You can also set the bend attributes of any relationship in a model. There are two kinds of bends in ER/Studio Data Architect, N bends and Orthogonal bends. N Bends are relationship lines that bend at any angle while Orthogonal bends only bend at a 90 degree angle. Both Hierarchical and Orthogonal auto layouts use only Orthogonal relationship lines. All other auto layouts use straight relationship lines. You can also create straight relationship lines that are vertical or horizontal.
When you use the auto layouts, ER/Studio Data Architect organizes the data model objects according to the specifications of that particular layout. Each layout has different specifications for the way relationships bend and how relationships dock or intersect with entities and attributes. You can move the docking positions of relationship lines on parent or child entities.
You can also change the color of all or individual relationships in the data model. You can specify a default relationship color on the Options Editor - Application tab. Use the Colors and Fonts Editor to change all or an individual relationship in your model.
You can overwrite relationship defaults after applying an automatic layout by changing relationship lines in a diagram or by changing the line disposition in a diagram.
You can use the Options Editor, Diagram and Object Display Options Editor, and the Format Menu to change relationship disposition and colors. Use the Options Editor - Application tab to make global changes to all your data models. Use the View Menu to make changes to the current data model and the Format Menu to make changes to the selected objects. Changes made in the Format Menu will override changes made first in the Options Editor.
This section is comprised of the following topics:
Changing the Style of Relationship Lines
Create an N Bend
Straightening an N Bend
Change the Disposition of Relationship Lines
Changing the Style of Relationship Lines
To make your diagram easier to read, you may want to change the style of relationship lines from elbowed to straight or vice-versa.
When changing from elbowed to straight relationship lines, ER/Studio Data Architect repositions the docking points to as close as possible to their original positions.
To change the style of relationship lines in all new data models, choose
Tools > Options > Display
and in the
Model Display
area, select the
Line Drawing Mode
you want, either
Elbowed Lines
or
Straight Lines
. Relationships in all new data models you create will now default to the Line Drawing Mode selected.
To change the style of all relationship lines in the current data model, choose
View > Diagram and Object Display Options > Relationship
and in the
Display Preferences
area, select the
Relationship Style
you want,
Elbowed
or
Straight
.
The relationships in the current data model are redrawn to conform with the Relationship Style selected.
To change the style of a selected relationship line, right-click the relationship line, click Layout Relationships, and then click Elbowed or Straight. Alternatively, after selecting the relationship line, on the
Format > Layout Relationships
list, click
Elbowed
or
Straight
.
The selected relationship is redrawn to conform with the relationship style selected.
To straighten a relationship line, right-click the relationship line and then click
Straighten Relationship Line
.
Alternatively, you can straighten a horizontal relationship by selecting the relationship line and then pressing CTRL+H. Pressing CTRL+L straightens a vertical relationship.
Changes are cascading, meaning that changes made in the Format menu will override changes made in the Options Editor.
Create an N Bend
To make your diagram easier to read, you may want to create N bends, which are like elbows, on one or more relationship lines.
If you are using an automatic layout, ER/Studio Data Architect lets you create N bends only in the following layouts: Circular Layout, Symmetric Layout, and Tree Layout.
Click the relationship line that you want to bend.
Move the cursor over the line at the point on the relationship where you want to create the bend.
The pointer should change to
Click and drag to position the bend.
To create more than one bend point on the relationship, repeat steps 2 and 3.
Straightening an N Bend
Once you have created an N Bend, you can use the following methods to straighten the line.
To remove a bend, click the relationship line you want to straighten and then choose
Format > Layout Relationship > Straight
To reset the line to its default position, click the relationship line you want to straighten and then choose
Format > Line Disposition > Reset to Default Docking Side(s)
.
To straighten a line between two entities that have overlapping edges, as shown in the following illustration, right-click the line and then click
Straighten Relationship Line
.
Change the Disposition of Relationship Lines
To make your diagram easier to read, you may want to change the positioning or disposition of the relationship lines.
Click the relationship line and then choose
Format > Line Disposition
.
You can select all the relationship lines in the data model by selecting one and pressing CRTL+SHIFT+A.
From the list select
Center
,
Vertical
,
Horizontal
or
Reset to Natural Docking Side(s)
.
You can reset the disposition of a relationship line to the natural docking side by right-clicking the relationship line and then from the list, selecting
Reset to Default Docking Position
.
The selected relationship is redrawn to conform with the relationship line disposition selected.
See Also
Overview
Creating and Editing Relationships
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Manipulating_Relationship_Lines&oldid=5200
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Menus,Menus,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
ONLY APPLIES TO VERSION 18.4 AND EARLIER
You can access the entire ER/Studio Data Architect feature set from the application menus. You can also access selected features from shortcut menus. ER/Studio Data Architect application menus are across the top of the user interface and shortcut menus are available when you right-click an object or diagram. All menus are context-sensitive and change depending on the content of the Data Model Window.
Functionality available in application menus or shortcut menus is also available on
Toolbars
.
The following discusses the menus available:
Application Menus
Accessing Shortcut Menus
Application Menus
ER/Studio Data Architect application menus provide access to all functionality. The menus are context-sensitive and change depending on the content of the Data Model Window. The application menu differs for logical and physical models.
Some of the actions you may find on application menus are:
File
Create a New Model
Import a File
Setting Diagram Properties
Import a Data Dictionary
Export Image
Export File
Edit
Find Entity/View
Comments
Universal Mapping
.
This option is just available if you are connected to the repository.
View
Diagrams and Objects Display Options
Cursor Popup Help Options
Insert
Relationships
Subtype Cluster
Text Blocks
Model
Data Lineage
Validate Model
Compare and Merge Utility
Submodel Synch Utility
Model Options
Model Properties
Format
Colors & Fonts
Line Disposition
Layout
Changing Data Model Layout
Layout Properties
Tools
Basic Macro Editor
Generate Reports
ODBC Setup
Repository
Add Diagram
Change Diagram Filename
Delete a Diagram
Rollback Diagram
Create Enterprise Data Dictionary
Diagram Data Version Upgrade
Security Center
Repository Properties
Macro Shortcuts
Add/Remove Macro Shortcuts
Help
Automation Interface Reference
Web Favorites
Launch License Manager
Accessing Shortcut Menus
ER/Studio Data Architect shortcut menus offer an easy method of accessing object functionality. Shortcut menus offer the same functionality you can access from the
Toolbars
or
Menus
and may vary depending on the characteristics of the diagram that it is currently open.
New Data Model
.
Go to table button takes you directly to the table you choose.
Check Model
.
XML Schema Generation
.
Database Capacity Planning
.
Reports
.
Universal Naming Utility
.
New SQL Procedure
.
New User
.
Synonym
.
To access the shortcut menu of an specific item, right-click the item.
See Also
Overview
Toolbars
Data Model Window
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Menus&oldid=7172
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/MongoDB_Advanced_Login_Options,MongoDB Advanced Login Options,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Reverse Engineering an Existing Database
Contents
1
Authentication
1.1
SCRAM
1.2
Kerberos (GSSAPI)
1.3
x.509 Certificate (SSL)
1.4
LDAP (Plain)
1.5
MongoDB-CR
2
Connection Options
2.1
Use SSL
2.2
Timeout
2.3
Read Preference
2.4
Replica Set Name
2.5
Additional Hosts
3
See Also
On page one of the
reverse engineer wizard
, if you select the Database Type of
MongoDB
, an
Advanced Options
button appears. Clicking it brings up the following options.
Authentication
SCRAM
Default.
Select this option to authenticate with Salted Challenge Response Authentication Mechanism (SCRAM). MongoDB uses SCRAM to verify the user's credentials against the user's name, password and authentication database.
Kerberos (GSSAPI)
Select this option to authenticate with Kerberos authentication. Users can specify the user name and password, and optionally provide a GSSAPI service name.
x.509 Certificate (SSL)
This option allows users to authenticate via x.509 certificate. A user name, PEM key file and optional PEM key password can be provided.
Authenticating via x.509 certificate requires an SSL connection.
LDAP (Plain)
Select this option to authenticate using LDAP.
MongoDB-CR
Not available for MongoDB 4.0 and later.
Select this option to use regular MongoDB authentication. Users can specify a user name and password to authenticate against a database on the server. The authentication database is 'admin' by default when using this authentication type, but can be changed to another database by unchecking the
Use Default
checkbox next to the Authentication DB control. If no user name is provided, then a connection is attempted without authentication.
Connection Options
Use SSL
Users may choose encrypt the connection to MongoDB with SSL by checking the Use SSL option. Users may also provide a path to a CA file to authenticate the client.
Timeout
The user may provide a timeout value to increase or decrease the amount of time the process waits for a response from the MongoDB server.
Read Preference
When connecting to a replica set, users may set the read preference to one of the options available in the drop-down. This setting will governs how read operations are routed to members of the replica set.
Replica Set Name
When connecting to a replica set, users must provide a replica set name.
Additional Hosts
When connecting to a replica set, user may provide host names in addition to the primary host specified on Page 1 of the wizard.
See Also
MongoDB Support
Reverse Engineering an Existing Database
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=MongoDB_Advanced_Login_Options&oldid=6929
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/MongoDB_JSON_Generation,MongoDB JSON Generation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Generating a Script File or Database
Contents
1
Page 1: Select Target for Output
1.1
Generate Script File
1.2
Generate Objects with a Database Connection
1.3
Wizard Quick Launch
2
Page 2: Object and Generation Options
2.1
Object Selection and Generation Options
2.1.1
Collections tab
2.1.2
JSON Preview File
3
Page 3: Summary
3.1
Wizard Quick Launch Options
4
See Also
The DDL Generation Wizard lets you generate JSON code to build a MongoDB database.
Use the expanded
Generation Options
in the DDL Generation Wizard to support output and input JSON Instance and Schema files.
To generate a script file or database
On the Data Model Explorer, right-click on a physical model, and then select
Generate Database
.
Follow the steps in the DDL Generation Wizard to complete the process.
Page 1: Select Target for Output
Generate Script File
Generate a Single, Ordered Script File
. If selected, it writes a single JSON file with specification of all objects.
Database Creation Script File
. This control allows you to provide the filename and path for the generated JSON file.
Generate Objects To Multiple Files
. If selected, it writes a separate JSON file for each selected object. Objects are ordered in subdirectories for each selected object class.
Base Directory
.  This control allows you to specify the directory that is to contain the generated script files.
Generate Objects with a Database Connection
This option is not available during JSON file creation.
Wizard Quick Launch
See how you can
load DDL Generation Wizard settings
from a file created on a previous session.
Page 2: Object and Generation Options
Object Selection and Generation Options
The Generation Options are on the tabs where you select the objects in the data model for which you would like to build the JSON file. Below you can see the explanation of some specific objects.
Collections tab
Under the Collection tab you can select which collections from your model that you want to add to your JSON file.
Use the
Generation Options
to select how you want your JSON output to appear.
Output as JSON Instance
must be selected to use the
JSON Instance Options
. Likewise,
Output as JSON Schema
must be selected to use the
JSON Schema Options
.
Quote field names
selects whether you want to add quotation marks around field names.
Only quote field names containing...
means that only field names containing a period are enclosed in quotation marks.
Quote all field names
means that all field names in the generated JSON will be contained in quotation marks.
Output as plain JSON
means to remove all MongoDB-specific constructs when generating a database for a MongoDB model. This option removes MongoDb constructs such as ObjectId() and instead a generic JSON is generated.
JSON Schema Version
Draft 07
generates a valid Draft-07 file as per
JSON Schema Draft-07 Release Notes
.
Draft 2020-12
generates a valid JSON schema file as per
JSON Schema Specifications
.
Add objects to $def
All Nested Objects
adds all nested objects under the $def keyword.
Only reused Nested Objects
adds reused nested objects under the $def keyword. A reused nested object is one that is used in other parent objects.
Manage Reusable Definitions
Address relative to Root
signifies that every object added to the $defs section is referenced by its name relative to the $defs object using $ref. For example, ""$ref"":""#/$defs/nestedObjectName""
Address relative to Base URI
signifies that every object added to the $defs section is given an $id comprised of the Relative URI extension plus the object name. This is referenced by parent fields using $ref.
Roll up Nested Objects
adds every object to the parent field, similar to the roll-up view.
Note:
In the JSON tab of the Object Editor, you can choose an option under
Customize
that generates the JSON as
JSON Instance
(default) or
JSON Schema
. The options mimic those in the Generation Wizard and follow all rules of the Customize feature. For more information about this feature, see
Customizing the JSON Tab
.
Tips:
If you right-click anywhere on the object tree within the wizard, you can select or deselect all objects using the short-cut menu. You can also display or hide object owner names for those objects with owners.
To view the DDL generated by the currently selected settings, click the
JSON Preview
button on the wizard at anytime. You can print or save the script directly from the
JSON Preview
dialog.
JSON Preview File
Page 3: Summary
In this page you can check if you have selected all the objects you want to generate on the DDL and the options to do it.
Wizard Quick Launch Options
See how you can
save the DDL Generation Wizard settings
to a file. You can also
rename
or
delete
one you have already created.
See Also
MongoDB Support
Connecting to Database Sources and Targets
Saving and Using Quick Launch Settings
Exporting an Image of the Data Model
Reverse Engineering an Existing Database
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=MongoDB_JSON_Generation&oldid=7069
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/MongoDB_Support,MongoDB Support,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Supported Database Platforms
MongoDB is a different type of database, it does not have tables like a relational database, but rather 'collections' which each collection holds a set of documents. Each document (which can be thought of as a 'row' in a relational table) is usually serialized as JSON data. Data Architect will reverse engineer this JSON data and produce a schema of the data it finds. It will also look at existing relationships between collections and add these to the schema. For the hierarchical structures in these JSON documents, Data Architect will render these as rolled-up structures inside the Collections for ease of viewing. It will also generate a logical data model based on the objects it finds within the JSON.
ER/Studio Data Architect supports MongoDB authentication of username and password. No authentication is also supported.
Contents
1
Generating a Physical Data Model for MongoDB
1.1
Convert if Not Contained
2
The Rolled Up View
3
Forward Engineering
4
Reverse Engineering
5
Connecting to MongoDB
6
Document sampling
7
Creating Collections
8
Nested Objects
9
Switching Object Classes
10
ID Fields
11
See Also
Generating a Physical Data Model for MongoDB
The Generate Database wizard differs for each target platform but for MongoDB models there will be the following options:
For MongoDB on Page 2 of the wizard
Propagated Foreign Key properties can be removed from generated objects or made as native fields which may be useful later to connect objects together elsewhere via code.
There is an option to select how Collections will be created from entities:
Convert All Entities - all logical entities become Collections
Convert Entities with PKs - all logical entities with primary keys become Collections
Leave All as Nested Objects - all logical entities become Nested Objects
Convert if Not Contained - takes a rules-based approach as detailed below using the containment properties set in the logical
Convert if Not Contained
The generator wizard will follow the following steps:
For each entity in the logical model create an object. Primary key attributes will become standard fields.
Logical relationship lines will generate either a referencing relationship or a containment relationship.
For each generated object the wizard will review whether the object has a containing relationship from any other object. If it does it will become a Nested Object. If not it will become a top level Collection.
All Collections are given a surrogate primary key ""_id""
For referencing relationships primary keys are propagated
The Rolled Up View
The object view is useful to understand the reuse of objects and edit the cardinality to Nested Objects. You can also select a rendering of the model that is easier to visualize the hierarchical nature of the model.
On the Diagram tab of the ribbon bar select Diagram/Display Options
On the Object tab select the checkbox 'Roll Up Contained Objects'
Forward Engineering
For guidance on how to forward engineering MongoDB, please see
Generating a Script File or Database
.
The Generate Database wizard will produce sample JSON output for each
Collection
Reverse Engineering
For a walkthrough of reverse engineering MongoDB, please see
Reverse Engineer MongoDB Walkthrough
.
Connecting to MongoDB
Ensure that you have network access to your MongoDB server. The default port is 27017 and should be open for incoming connections on the MongoDB server firewall.
The default MongoDB setup on some installations use the
BindIP section
of the config file to bind the listening port to 127.0.0.1. Unless your ER/Studio Data Architect installation is on the same server, this will need to include the interface that you are connecting to.
The following image shows the default setting. The list is comma separated and so the server network interface would be added to this in the form of:
bind_ip = 127.0.0.1,10.150.100.90
Where 10.150.100.90 is the network address of the MongoDB server.
You can test the connection by using telnet to connect to the port. Verifying that the port is accepting connections by using the following command in a terminal\command window., replacing the 10.150.100.90 with your server's address. The telnet window will go blank if the connection is available.
telnet 10.150.100.90 27017
To connect with a reverse engineer wizard
From the file menu, click
File > New
Select
Reverse-engineer an existing database
, and then click
Login
.
In the Reverse Engineer wizard, specify the
Connection Type
.
Specify the
Database Type
.
Add the connection details to the
Datasource
box.
If required, add authentication details by opening the
advanced options button
.
Note:
MongoDB-CR is deprecated in MongoDB 4.0 and later.
Note:
Note that it is possible to complete the reverse engineer wizard on a MongoDB datasource without having permission to do so. However as you do not have permission, nothing is imported.
Document sampling
Because MongoDB documents can be in any type of format, the documents need to be queried before the DB can be reverse engineered. The
Document Sample Size
option on Page 2 of the Reverse Engineer wizard allows you to specify how many documents are used for sampling. The default is 100. Should any documents that have a different format not be sampled, the reverse engineer will fail.
Creating Collections
When the reverse engineer takes place, a 'union' of documents create the collection. The wizard will scan through multiple instances of documents and merge the fields it finds into the collection.
Reverse Engineering - Aggregation of document fields
Document 1
Document 2
Collection - author
Field 1
""_id"": 2
""_id"": 3
_id (PK) - NumberDouble
Field 2
""awards""
""awards""
awards - Array(Object)
Field 3
""name""
name - Object
Field 4
""title""
""title""
title - String
Nested Objects
Where objects are nested within objects, the wizard creates separate objects that are created with a containment relationship. For example the following JSON object has nested objects within the ""name"" object:
""name"": {
""first"": ""John"",
""last"": ""Smith""
},
Tip:
Separate object creation is useful for improved modeling. For example, nested objects such as
address
can be shared between different objects rather than duplicated. This also allows modifications to be made to all address fields without having to change each nested item individually.
Switching Object Classes
Use the
Switch Object Class
option in the
Insert
ribbon to switch MongoDB objects between Collection or Nested Object.
Once you select the object you want to switch, click
Switch Object Class
in the Insert ribbon, as shown in the following image.
You also can make this switch by using the right-click option on the diagram or the Explorer tree.
ID Fields
MongoDB automatically creates an
_id
field
(ObjectID)
which you will see added to every collection after a reverse engineer. The exception is objects that are created from
nested objects
as they are not assigned an _id by MongoDB.
Because of the design of a MongoDB database everything is optional in the related editors, except for the _id field.
See Also
Reverse Engineering an Existing Database
Containment Relationships
Collection Editor
MongoDB Advanced Login Options
Tutorials: Working with Hierarchical Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=MongoDB_Support&oldid=7127
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Moving_Objects,Moving Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
ER/Studio Data Architect lets you move data model objects to and from the Data Model Explorer and Data Model Window. ER/Studio Data Architect provides easy visual maintenance of your entity-relationship models, by letting you move, copy and paste, drag and drop, resize, and align all diagram objects. You can move individual or groups of diagram objects anywhere in your data model even if your model is in a specific diagram auto layout.
You can also move entire submodels to other models in the Data Model Explorer. ER/Studio Data Architect also lets you move objects between logical and physical models.
Using ER/Studio Data Architect you can also resize any diagram object. When you add entities, tables, or views to your diagram, ER/Studio Data Architect automatically determines the proper dimensions of the object to fit the text that it displays. You can manually resize these diagram objects to control the presentation of your data models. If you need to hide attributes in an entity or view, you can resize the entity or view to be smaller than the width of the longest attribute, therefore hiding text.
This section covers moving objects in the Data Model Window, in the Data Model Explorer, and from the Data Model Explorer to the Data Model Window. It is comprised of the following topics:
Moving Objects in the Data Model Window
Moving Data Model Objects in the Data Model Explorer
Contents
1
Moving Objects in the Data Model Window
2
Moving Data Model Objects
3
Moving Relationship Docking Points
4
Moving Data Model Objects in the Data Model Explorer
5
Moving Objects to Different Nodes
6
Moving Submodels
7
See Also
Moving Objects in the Data Model Window
To make your data model more readable, you can move entities, tables, and the relationship lines that join these objects. You can move individual or groups of objects anywhere in your data model even if you have chosen a specific auto layout for the model.
Clicking an Auto-Layout option repositions the objects according to the rules of the Auto-Layout organization selected. For more information, see
Changing Data Model Layout
.
Moving Data Model Objects
Moving Relationship Docking Points
Moving Data Model Objects
On the
Diagram
ribbon, click the
Selection
tool.
In the
Data Model Window
, select and then drag the object to the desired location.
Select multiple entities or tables by dragging the selection tool across them or pressing and holding CTRL while you click each object. Once the objects are selected, the cursor changes to
The relationship lines joining the objects automatically adjust as the objects are moved.
Moving Relationship Docking Points
On the
Diagram
ribbon, click the
Selection
tool.
In the
Data Model Window
, click the relationship line you want to change.
Move the cursor over the docking point of the relationship until the cursor icon changes to
Click and drag the relationship docking point to the desired location on the same entity or table.
You cannot change the relationship between entities or tables by moving the relationship line. To change entity or table relationships, see
Working with Relationships
.
Moving Data Model Objects in the Data Model Explorer
Moving Objects to Different Nodes
Moving Submodels
Moving Objects to Different Nodes
You can move objects, such as entities and attributes between the main logical model and its submodels within the Data Model Explorer.
On the
Diagram
ribbon, click the
Selection
tool.
In the
Data Model Explorer
, select the objects you want to move.
Drag to the objects to a new target node and then release the left mouse button.
If the move is permitted, your cursor will change to
Moving Submodels
To assist you in analyzing your data model, you can move submodels from one model to another. You can also move submodels to nest them within other submodels.
On the
Diagram
ribbon, click the
Selection
tool.
In the
Data Model Explorer
, click the submodel you want to move and then drag it to another model or submodel.
When the submodel selection is over an item it can be moved under, the cursor changes to
Release the mouse button.
See Also
Copying Objects
Resizing Objects
Changing Data Model Layout
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Moving_Objects&oldid=7273
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Multi-threading_in_the_Repository,Multi-threading in the Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
As of ER/Studio Data Architect version 9.0, the Repository takes advantages of new multi-threading functionality that improves Repository performance over the previous sequential method used to handle transactions between the Repository server and the ER/Studio Data Architect client. Mutli-threading also improves Repository performance with ER/Studio Business Architect in that you can log in or do some security operations concurrently like you can with ER/Studio Data Architect.
Multi-threading allows the server to process multiple transaction concurrently. As long as a given transaction does not conflict with any currently processing transaction, the server opens a new thread for the new transaction and processes it immediately. For example, transactions necessary for User A to log in can be processed at the same time as User B is adding a diagram, and User A will be logged in just as quickly as if User B was not in the middle of adding a diagram.
However, not all transactions can be run concurrently. This means that in some cases, an operation must wait for a transaction initiated by a different user to complete. In addition, some transactions listed on the following table as being able to run concurrently might be blocked by the Repository database's own concurrency mechanisms if the same table is being accessed at the same time by different transactions.
The following describes some important rules that affect multi-threading on the Repository:
If a Check In transaction is being processed on a given Diagram or Data Dictionary, all other operations on that Diagram or Data Dictionary must wait until the Check In completes.
If an Add or Check In transaction is being processed, all other Add or Check In transactions must wait until the initial transaction completes. This same rule applies to Set Named Release, Branch and Branch/Merge Check In operations.
Most other common tasks, including Log Ins, Log Outs, Gets, Check Outs and Security Center operations are processed concurrently by the server, but may be affected by database level-locking mechanisms.
The following describes concurrency restrictions:
Multiple, concurrent '
Get
access on the same object (such as user, role, diagram, and dictionary) are allowed.
Only one
Write
access on a particular object allowed at one time (for example, a delete table and a modify table will not run concurrently on the same table).
Writes and Gets on a particular object will also be serialized (for example, a Get Diagram and a Check In Diagram will not run concurrently on the same diagram).
The following table describes which transactions can run simultaneously.
ER/Studio Data Architect Operation
is the operation that invokes the Server Transaction.
Server Transaction
is the request that is seen by the Repository Server.
The
Concurrency
columns show which Server transactions can run simultaneously with the process in the respective Server Transaction column.
ER/Studio Data ArchitectOperation
Repository ServerTransaction
Concurrency
Get Latest Diagram(Dictionary)
Add Diagram(Dictionary)
Check In Diagram(Dictionary)
Security,Project Operations
Undo/Redo/Check OutDiagram (Dictionary)
Add Diagram
Add Diagram
√
√
√
Add Dictionary
√
√
√
Bind Dictionary to Diagram
√
√
√
√
√
Modify Project
√
√
√
√
√
Add Enterprise Data Dictionary
Add Dictionary
√
√
√
Bind Dictionary to Diagram
√
√
√
√
√
Bind Enterprise Data Dictionary
Bind Dictionary to Diagram
√
√
√
√
√
Branch
Branch
√
√
√
Branch/Merge Dialog
Get Branch Tree Info
√
√
√
√
√
Branch/Merge operation
Merge Check in Diagram
√
√
Merge Check In Dictionary
√
√
Merge Get Latest Diagram
√
√
√
√
√
Merge Get Latest Dictionary
√
√
√
√
√
Change Diagram File Name
Change Diagram File Name
√
√
√
Change Own Password
Change Own Password
√
√
√
√
√
Check In Data Dictionary
Check In Dictionary Objects
√
√
Get Latest Diagram
√
√
√
√
√
Get Latest Dictionary
√
√
√
√
√
Check In Diagram
Check In Diagram
√
√
Get Latest Diagram
√
√
√
√
√
Get Latest Dictionary
√
√
√
√
√
Check In Diagram Objects
Check In Diagram Objects
√
√
Check Out Diagram
Check Out Diagram
√
√
√
Check Out Diagram Objects
Check Out Diagram Objects
√
√
√
Check Out Dictionary
Check Out Dictionary
√
√
√
Delete Diagram
Delete Diagram
√
√
√
Delete Dictionary
Delete Dictionary
√
√
√
√
Delete Named Release
Delete Named Release
√
√
√
√
√
Enterprise Dictionary Bindings Dialog
Get All Dictionaries
√
√
√
√
√
Get Dictionary Binding Info
√
√
√
√
√
Get All Dictionary/Diagram Bindings
√
√
√
√
√
Get from Repository (Diagram)
Get Latest Diagram
√
√
√
√
√
Get Latest Dictionary
√
√
√
√
√
Get from Repository (Submodel)
Get Latest Dictionary
√
√
√
√
√
Get Latest Submodel
√
√
√
√
√
Get from Repository Dialog
Get Structural Info
√
√
√
√
√
Get Submodel Info
√
√
√
√
√
Get Latest Version
Get Latest Diagram
√
√
√
√
√
Get Latest Dictionary
√
√
√
√
√
Get Named Release
Get Dictionary Named Release
√
√
√
√
√
Get Name Release
√
√
√
√
√
Get Named Release Dialog
Get All Named Releases
√
√
√
√
√
Log In
Get My Security Info
√
√
√
√
√
Get All Projects
√
√
√
√
√
Log In
√
√
√
√
√
Log Out
Log Out
√
√
√
√
√
Project Center
Add Project
√
√
√
√
√
Delete Project
√
√
√
√
√
Get All Projects
√
√
√
√
√
Get Project Info
√
√
√
√
√
Modify Project
√
√
√
√
√
Redo Check Out Diagram
Redo Check Out Diagram
√
√
√
Redo Check Out Dictionary Objects
Redo Check Out Dictionary Objects
√
√
√
Redo Check out Objects
Redo Check out Objects
√
√
√
Security Center
Add Role
√
√
√
√
√
Add User
√
√
√
√
√
Delete Role
√
√
√
√
√
Delete User
√
√
√
√
√
Force Check In
√
√
√
√
√
Force Log Out
√
√
√
√
√
Get All Diagrams for Role
√
√
√
√
√
Get All Object Level Security
√
√
√
√
√
Get All Object Privileges
√
√
√
√
√
Get All Privileges
√
√
√
√
√
Get All Roles
√
√
√
√
√
Get All User Level Security
√
√
√
√
√
Get All Users
√
√
√
√
√
Get Repository Security Info
√
√
√
√
√
Get Role Info
√
√
√
√
√
Get User Checked Out Info
√
√
√
√
√
Get User Info
√
√
√
√
√
Get User On Machine Info
√
√
√
√
√
Get User Security Info
√
√
√
√
√
Get User Status
√
√
√
√
√
Modify Role
√
√
√
√
√
Modify Security Info
√
√
√
√
√
Security Center...
Modify User
√
√
√
√
√
Modify User Security Rights
√
√
√
√
√
Set Named Release
Set Dictionary Named Release
√
√
√
Set Named Release
√
√
√
Synchronize Comments
Synchronize Data
√
√
√
√(no concur-rent Syncs)
Undo Check Out Diagram
Undo Check Out Diagram
√
√
√
Undo Check Out Dictionary
Undo Check Out Dictionary
√
√
√
View Object History
Get History
√
√
√
√
√
See Also
Synchronizing Comments
Logging In and Out of the Repository and ER/Studio TS
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Multi-threading_in_the_Repository&oldid=5206
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Name_Handling,Automatic Naming Translation,"From ER/Studio Data Architect
(Redirected from
Name Handling
)
Jump to:
navigation
,
search
Go Up to
Customizing Standard Model Features for New Models
To automatically use a Naming Standards Template to set a physical name from a logical and vice versa as names are modified in the Entity/Table and Attribute/Column Editors.
To enable this feature, go to
Tools > Options > Name Handling
tab in the group labeled
In-Editor Naming Standards
:
Enable automatic naming translation.
Checking this option enables this feature.
Use entity/table NST for child translation.
Checking this option enables the use of the NST (naming standards template) bound to the parent entity or table, if there is none bound to the attribute or column currently being edited.
To use this feature there must be a bound NST on the object
OR
there is a bound NST on the parent entity/table and the second option above is checked.
Also required: The
freeze name
property is not checked.
For attributes/columns, this only applies to the individual object. The freeze name property of the parent entity/table is ignored.
You are editing a logical name in the logical model or a physical name in the physical model.
If the translation is enabled, then as the user types the name, the translated name appears in the other edit control. For example, if the user is editing an attribute in the logical model, then as the user enters the attribute name, the column name field is updated with a translated name. Or, if a user is editing the table name of a table in a physical model, then the entity name is set with the translated name.
Note:
Name handling settings shown in
Model Options
are ignored when a name can be translated according to the prerequisites above. Otherwise, they are followed.
See Also
Enforcing Naming Standards Using Naming Standards Templates
Creating and Editing Columns
Creating and Editing Tables
Customizing Standard Model Features for New Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Automatic_Naming_Translation&oldid=3539
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Normalization,Normalization,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Logical Design Concepts
Normalization helps eliminate redundancy and streamline your logical design. A normalized database design is well-organized, even elegant. It is very important to complete the normalization process before transforming the logical design to a physical design; doing so allows a more efficient implementation of the physical design on an actual database.
Normalization is the process of separating data into multiple, related tables. A normalized database design is characterized by multiple entities with relatively few attributes in each; an unnormalized design is characterized by few entities with relatively many attributes in each. Normalizing the logical design helps eliminate certain types of redundancy and incompleteness in the model.
Part of the normalization procedure entails moving certain sets of repeating data from one entity to its own entity, then creating a relationship between the two. For example, consider the development of a data model for a university to store information about alumni. One entity can hold information about alumni, like their names, degrees they have earned, and the year they graduated. If some alumni have earned more than one degree from the university, then degree information becomes a set of repeating data. In the normalization process, the degree information is removed from the entity and placed in a separate entity. Next, a relationship is created between the first entity and the new entity so that information in each entity is associated with information in the other.
While working with logical data models, a data modeler should understand the rules (or forms) of normalization to produce a good data model.
The following defines the normalization forms:
Eliminate Repeating Groups (1NF)
: A separate table exists for each set of related attributes and each table has a primary key.
Eliminate Redundant Data (2NF)
: Attributes depending on only part of a multi-valued key is removed it to a separate table.
Eliminate Columns Not Dependent On Key (3NF)
: Attributes not contributing to a description of the key, are removed to a separate table.
BCNF. Boyce-Codd Normal Form (BCNF)
: Non-trivial dependencies between candidate key attributes are separated out into distinct tables.
Isolate Independent Multiple Relationships (4NF)
: No table contains two or more 1:n or n:m relationships that are not directly related.
Isolate Semantically Related Multiple Relationships (5NF)
: There may be practical constraints on information that justify separating logically related many-to-many relationships.
Isolate Semantically Related Multiple Relationships (ONF)
: A model limited to only simple (elemental) facts, as expressed in Object Role Model notation.
Domain-Key Normal Form (DKNF)
: A model free from all modification anomalies.
All normal forms are additive, so if a model is in 3rd normal form, it is also in 2nd and 1st normal form.
See Also
Logical Design Documentation
Object Name Rules
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Normalization&oldid=5207
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Object_Model_Hierarchy_Diagram,Object Model Hierarchy Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automation Objects Programmer's Guide
The conceptual diagram below shows the hierarchical relationships among major objects. When writing macros you'll generally instantiate objects in the order shown. Collection objects, such as Lines and Entities or Indexes have been omitted for simplicity.
See Also
Why Use Automation Objects?
Sample Macros Installed with ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Object_Model_Hierarchy_Diagram&oldid=5208
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Object_Name_Rules,Object Name Rules,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Logical Design Concepts
Naming entities and attributes deserves serious attention. Long after you implement a system, the names you give to entities and attributes persist. You should not sacrifice clarity for brevity. Names should be descriptive yet general enough to represent all members. Several naming rules should be followed in order to ensure that your design is as clear as possible. Consider the following naming rules:
Singular Form
: Entity and attribute names should be singular (for example, Customer, not Customers), even though they can have many members.
Name Length
: The IDEF1X methodology permits name lengths of up to 65 characters, which is more than adequate for naming objects properly. However, most databases support maximum table and column name lengths of only 18 or 30 characters. While you can enter longer names, the Validate Logical or Physical Models function will check length violations before DDL generation.
Case
: When naming your objects, you have the choice of using upper, lower or mixed case. Perhaps the easiest format for people to read and understand is mixed case, capitalizing the first letter of every word (for example, CustomerAddress).
See Also
Normalization
Logical Design Documentation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Object_Name_Rules&oldid=5209
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Organizing_Columns_for_Netezza,Organizing Columns for Netezza,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
On the Organization tab of the Table Editor for the Netezza 6.0 (and later versions) platform, you can select up to four columns of a table on which to base the organization of the table. Tables with columns specified in the ORGANIZE ON clause are called Clustered Base Tables (CBT). Organizing the table records in this way causes Netezza to save the selected table records in the same or nearby extents. This can enhance query performance and disk I/O.
CBTs are most often used for large fact or event tables with many millions or billions of rows. Scanning records of such large tables requires full disk scans to gather the relevant records. Organizing tables to correspond with your queries can take advantage of zone maps to improve performance.
Available Columns
: Displays all the columns available to add to the organization key. Select the column you want to add to the organizing keys and move it to the Selected Columns box. Use the left and right arrows to move columns to and from the Selected Columns box. You can select a maximum of four columns to use in the organizing key.
Selected Columns
: Displays the columns that make up the organizing key.
Up
/
Down
buttons: Let you reorder the columns in the organizing key. The column order can affect the access speed. The most frequently accessed columns should be at the top of the Selected Columns list.
See Also
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Organizing_Columns_for_Netezza&oldid=5211
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Overriding_Color_and_Font_Settings_for_a_Specific_Object,Overriding Color and Font Settings for a Specific Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Change Color and Font Settings for an Entity, Table, Attribute, Column or View
2
Change Entity/Table Background and Outline Colors
3
Change the Background and Outline Colors of Views in an Open Data Model
4
Changing the Color of Relationships
5
See Also
To make your model more attractive and easier to read, you can change the background, outline, and font colors along with the font type entities/tables, attributes/columns, views, and relationships in your data model. Use specific colors and/or fonts to help you organize your data model.
Set the default background color of the model in the Main Model Display area of the Logical or Physical tabs of the Options editor, choose
Tools > Options
.
This section is comprised of the following topics:
Change Color and Font Settings for an Entity, Table, Attribute, Column or View
Change Entity/Table Background and Outline Colors
Change the Background and Outline Colors of Views in an Open Data Model
Changing the Color of Relationships
Change Color and Font Settings for an Entity, Table, Attribute, Column or View
Use the
Color and Fonts
editor to do the following:
Change the font, font style, size, and effects (strikeout and underline) for one or more selected components of an entity or table, such as: entity name, entity attributes, primary keys, role names, alternate keys, and inversion entries.
Change the font, font style, size, and effects (strikeout and underline) for selected components of a view column.
Apply font and color settings to attribute categories such as: non-inherited primary keys, inherited primary keys, non-inherited non-keys, inherited non-keys, primary key index, unique indexes, non-unique indexes, attachments, triggers, and data security.
Change the background and outline color of entities, tables and views.
In the
Data Model Window
, right-click the object you want to change or the object containing the object you want to change.
For entities, tables, columns, and attributes
, choose
Entity Color and Font Settings > Entity/Attributes Colors and Fonts
.
For views and view columns
, choose
View Color and Font Settings > View/View Columns Colors and Fonts
.
In the
Colors and Fonts
editor make the changes desired.
You can apply the same changes to multiple attributes or columns by pressing and holding CTRL while clicking the objects.
To apply color and font setting changes to all occurrences of the selected object in the model, select
Apply to all submodels
; otherwise, the changes will affect only the occurrence of the entity selected.
Use the preview area to preview your changes and then click
OK
to implement the changes.
Change Entity/Table Background and Outline Colors
In the
Data Model Window
, right-click the entity/table you want to change.
Choose
Entity Color and Font Settings > Entity Background/Outline Color
.
In the
Entity Color
editor make the changes desired.
To apply color changes to all occurrences of the selected entity in the model, select
Apply to all submodels
; otherwise, the changes will affect only the occurrence of the entity selected.
Change the Background and Outline Colors of Views in an Open Data Model
In the
Data Model Explorer
, expand the
Views
node of a logical or physical mode, and then right-click the view you want to change.
Choose
View Color and Font Settings > Colors & Fonts > Colors
.
To set the background color of all views in the model
, from the list, select
View Background
and then click
Set Color
.
To set the foreground color of all views in the model (the dotted line around the view box)
, from the list, select
View Foreground
and then click
Set Color
.
To choose one of the Basic colors
or one of the existing
Custom Colors
, select a color box and then click
OK
.
To choose a color not already displayed in this dialog, click
Define Custom Colors
, define the new color, click
Add to Custom Colors
. (This adds a new color option to the available
Custom Colors
.) Then you can select the new color box and click
OK
.
To apply your changes and exit the
Colors & Fonts
editor, click
OK
again.
Notes
When exporting the model, you can also export the view background by selecting Export model and object background color in
Model > Options > Display
.
You can specify background and foreground colors for an individual view by right-clicking the view in the Data Model Window and then selecting View Background/Outline Color. This setting can be overridden by selecting Same background color for all views in
Tools > Options > View
. If Same background color for all views is enabled, the View Background/Outline Color option will be unavailable in the View Color and Font Settings short-cut menu.
You can specify that all views in the data model share the same background and foreground (outline) colors by choosing Tools > Options > View and then in the View area, selecting Same background color for all views. This setting will override any setting made for individual views in
Tools > Options > View
.
Changing the Color of Relationships
In the
Data Model Window
, right-click the relationship for which you want to change the color.
Choose
Relationship Color > Edit Settings
.
You can change the color of all or individual relationships in your diagram. You can specify a default relationship color on the Options Editor - Application tab. Even if you set a default color for your relationships, you can still use the Colors and Fonts Editor to change all or individual relationships in your diagram.
See Also
Changing the Model Background
Customizing the Display of Diagrams and Objects
Customizing Standard Model Features for New Models
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Overriding_Color_and_Font_Settings_for_a_Specific_Object&oldid=5212
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Overview,Overview,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
Contents
1
ER/Studio Family Products
2
Application Design
3
See Also
ER/Studio Data Architect is an industry-leading data modeling tool for designing and understanding databases, helping companies discover, document, and re-use data assets. With round-trip database support, you can reverse-engineer, analyze, and optimize existing databases. Productivity gains and organizational standards enforcement can be achieved with ER/Studio Data Architect's strong collaboration capabilities.
ER/Studio Data Architect offers:
Model-driven design environment
Complete database life cycle support
Enterprise model management
Data lineage documentation
Enterprise communication capabilities
Data warehouse and integration support
Quality database designs
This overview provides a basic introduction to ER/Studio Data Architect, the products in the ER/Studio Data Architect family, and IDERA applications that can further enable data architects.
ER/Studio Family Products
There are several products in the ER/Studio family:
ER/Studio Data Architect
: Provides a complete environment for analyzing, designing, creating, and maintaining database applications, including logical and physical models for many common database platforms.
ER/Studio Team Server Core
:
(Installed with the repository)
The ER/Studio Team Server Core enables easy distribution of models and metadata across the enterprise. ER/Studio Team Server Core lets you make use of data source definitions stored centrally, as well as letting you search, browse, and report on the information contained in the Team Server.
Repository
:
(Installed with Team Server)
Productivity gains and enforcement of organizational standards can be achieved with strong collaboration capabilities offered by the model Repository, a version-control application. ER/Studio Data Architect and Business Architect users connect to the Repository to get a data model revision, check in changes, compare and merge local copies of the data model to a version in the Repository, and run various usage reports.
MetaWizard
: Integrates metadata across modeling tools, business intelligence, ETL platforms and industry-standard exchange formats (XMI, XML and XSD). This tool enables ER/Studio Data Architect to integrate with more than seventy other applications by sharing metadata through an import-export capability.
In addition to the products above, IDERA also offers the following complementary applications:
Business Architect
: A business modeling tool for creating a graphical representation of your business from the core concepts that describe the business, to the processes that detail how your business operates. The product allows you to easily model your business processes and how those processes use data. The product's Conceptual Modeling provides an intuitive way to outline subject areas and concepts that can then drive the creation of detailed data models.
ER/Studio Viewer
: (Viewer) ER/Studio Viewer provides an interactive environment for accessing ER/Studio Data Architect data models, offering the same sophisticated navigational features of ER/Studio Data Architect to members of the modeling team that want advanced viewing, navigation and printing functionality but do not require the ability to edit the models.
Application Design
The following diagram shows the functional relationship among ER/Studio components and with the software components of a typical development system.
See Also
ER/Studio Team Server Wiki
Customizing Standard Model Features for New Models
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Overview&oldid=7280
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Overview_Window,Overview Window,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
The Overview window lets you navigate large Data Models. The Overview window provides a thumbnail view of the entire model. You can open and close the Overview window as needed by pressing F9 or clicking Overview Window on the Tools ribbon. When you zoom in or out, the Overview window places a border around the portion of the model displayed in the
Data Model Window
.
See Also
Overview
Zoom Window
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Overview_Window&oldid=7275
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Performing_Complex_Actions_Using_Methods,Performing Complex Actions Using Methods,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automation Objects Programmer's Guide
Methods perform actions more complex than the simple setting or reading of a property. For example,
OpenFile()
is a DiagramManager method that in turn invokes a number of other operations: it must navigate the directory/file system, allocate resources for file handling, keep track of the file handle and attributes and so on.
Dim MyDiagram As Diagram
Dim strFile As String
strFile = ""
C:\Users\<user>\AppData\Roaming\IDERA\ERStudio\Model\MyModel.dm1
""
Set MyDiagram = DiagramManager.OpenFile(strFile)
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Performing_Complex_Actions_Using_Methods&oldid=5217
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Physical_Storage_Considerations,Physical Storage Considerations,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Logical Model
Planning the storage of tables and indexes is best done during the physical design stage in order to improve performance and to streamline data administration tasks. When planning physical storage, carefully consider both the placement and size of tables and indexes.
The performance of almost all database applications is I/O bound. To improve I/O throughput, you should physically separate tables that are frequently joined together. You should also separate tables from their indexes. The objective is to have the database read or write data in parallel as much as possible.
Two key concerns of every database administrator are free space management and data fragmentation. If you do not properly plan for the volume and growth of your tables and indexes, these two administrative issues could severely impact system availability and performance. Therefore, when designing your physical model, you should consider the initial extent size and logical partition size.
As a starting point, you should estimate the size of each table and its indexes based on a projected row count. For databases that let you specify initial extent sizes, such as Oracle, you should set the initial extent size to the estimated size in order to avoid data fragmentation as the table grows. By keeping tables within a single extent, you can decrease data access times and avoid reorganizing tables.
Once you have determined the placement and sizes of the tables and indexes in your database, you can estimate the total size requirements of the database. This should help you avoid running out of free space for your database.
The following sections describe how you can optimally store and partition tables and indexes through the options available in the table and index editors for the specific database platforms that support these options.
Defining Table Storage
Distributing Columns for IBM DB2 for LUW 9.x (and later versions)
Distributing  Columns for GreenPlum
Distributing Columns for Netezza
Organizing Columns for Netezza
Partitioning a Table
Defining Index Storage
Partitioning a Table Index
See Also
Creating and Editing StoGroups
Creating and Editing Tablespaces
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Physical_Storage_Considerations&oldid=7756
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Planning_for_and_Predicting_Database_Growth,Planning for and Predicting Database Growth,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
Contents
1
Planning for Table and Index Storage
2
Predicting Table Growth
3
Predicting Database Growth
4
Reporting Database Growth Analysis
5
See Also
In order to ensure optimal database performance, it is important that you assess your storage needs and plan accordingly. This section will help you to do this and is comprised of the following topics:
Planning for Table and Index Storage
Predicting Table Growth
Predicting Database Growth
Reporting Database Growth Analysis
Planning for Table and Index Storage
Planning the storage of tables and indexes is best done during the physical design stage in order to improve performance and to streamline data administration tasks. When planning physical storage, carefully consider both the placement and size of tables and indexes. The performance of almost all database applications is I/O bound. To improve I/O throughput, physically separate tables that are frequently joined together. Also, separate tables from their indexes. The objective is to have the database read or write data in parallel as much as possible.
Two key concerns of every database administrator are free space management and data fragmentation. If you do not properly plan for the volume and growth of your tables and indexes, these two administrative issues could severely impact system availability and performance. Therefore, when designing the physical model, consider the initial extent size and logical partition size.
As a starting point, estimate the size of each table and its indexes based on a projected row count. The Capacity Planning tool helps project the size of the databases given certain growth parameters. For databases that let you specify initial extent sizes, such as Oracle, set the initial extent size to the estimated size in order to avoid data fragmentation as the table grows. By keeping tables within a single extent, data access times decreases and table reorganization can be determined.
Once you have determined the placement and sizes of the tables and indexes in your database, estimate the total size requirements of the database in order to avoid running out of free space for the database.
Predicting Table Growth
Capacity planning metrics can be recorded for each table so that proper sizing can be done before the table is implemented in a database.
The
Capacity Planning
tab of the
Table Editor
helps predict change using metrics such as table row count, table growth rate, growth type, growth period and table maximum size.
In the
Data Model Explorer
, double-click a table in the physical model.
Click the
Capacity Planning
tab and then complete it.
Tip:
Change the column
Avg. Width
and
Percent Null
values to more accurately predict the table growth.
You can later see and edit the growth predictions you made in the
Table Editor
in the
Capacity Planning Options
window.
Predicting Database Growth
Using the
Capacity Planning
utility, you can forecast storage requirements of newly implemented or existing database systems so budgeting or engineering can be accounted for well in advance.
In the
Data Model Explorer,
select and then right-click a physical model.
Click
Capacity Planning
and then complete the options.
The following describe options that require additional explanation:
Growth Parameters
tab: Specifies overhead elements that contribute to database growth. The amount of overhead required depends on the DBMS platform and the storage options you have selected for the database, such as the minimum percentage of a data block to reserve as free space, and options for logging, auditing, and data recovery. The values provided here are reflected in the Projected Size column of the Growth Analysis tab.
Row Overhead
: Tailors the formulae to account for any overhead used by the chosen DBMS platforms of the physical model to store each record. This number represents the number of bytes of overhead the DBMS may use to store records. This should be set to 0 initially, but you can specify any number of bytes to add on to the row size.
Table Overhead
: Accounts for overhead to store data for a table. This is a multiplier applied to table size. A value of 1.2 corresponds to 20% overhead. The default value of 1 indicates no overhead.
Index Overhead
: Accounts for overhead to store indexes. The number of bytes is added to the indexed column sizes. For example, in Oracle the index overhead is 6 bytes, so 6 is added to the sum of the indexed column sizes.
Blob Overhead
: Accounts for overhead to store BLOB columns. Similar to Table Overhead, this is a multiplier applied to BLOB storage. A value of 1.2 corresponds to 20% overhead. 1 indicates no overhead.
Blob BlockSize
: Enter an estimate of the average size of BLOB columns. This will be used as the average size of each BLOB column.
Note:
Changes you make for a table on the
Sizing Options
tab like
Starting Amount
, or the
Data Growth
are automatically reflected in the
Sizing Estimates'
.
Changes made in the
Sizing Options
tab and the
Growth Parameters
tab are reflected on the
Growth Analysis
tab.
Reporting Database Growth Analysis
From the Capacity Planning Utility you can export the metrics produced in formats such as RTF, HTML, or CSV, so, for example, you can draft your own reports for the growth patterns of a physical model.
In the
Data Model Explorer
, select and then right-click a physical model.
Click
Capacity Planning
and then complete the
Sizing Options
and
Growth Parameters
of the Capacity Planning utility.
Click the
Growth Analysis
tab and select the
Report Type
and
Report Options
desired.
A preview of the report contents appears in the Output area.
See Also
Physical Storage Considerations
Defining Index Storage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Planning_for_and_Predicting_Database_Growth&oldid=5219
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Pop-up_Windows,Pop-up Windows,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
Pop-up windows can display brief definitions or the DDL of each object in your Data Model. When you hover the mouse pointer over any object briefly,
ER/Studio Data Architect
displays a pop-up window. The popup in the following example displays the definition of each attribute in the entity
Employee
.
To display the the definition of each attribute as in the screenshot above, choose
View > Cursor Popup Help Options > Entity Help
and then select
Attribute Definition
.
See Also
Overview
Introduction
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Pop-up_Windows&oldid=5220
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Printing_the_Data_Model,Printing the Data Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
From ER/Studio Data Architect, you can print your data models in monochrome or color to distribute to your reviewers. You can use the Print dialog box to set specific print parameters such as, printing specific sections of your diagram, diagram appearance, page range, zoom level, and border specifications. The Print dialog also has navigational tools that let you navigate your diagram to select the print area. You can save your print settings to reuse at a later time.
Before printing your model, display the page boundaries in the Data Model Window so you can optimally place your objects for better viewing and printing. Choose
Tools > Options > Display > Page Boundaries
.
Print the data model
In the
Data Model Explorer
, select the physical or logical model, or the submodel that you want to print.
Choose
File > Print
.
Choose the options desired in the
Print
dialog and then click
OK
.
To enable reviewers who do not have access to ER/Studio Data Architect to view your models, in addition to printing the model you can also create an XML Schema, save the model and distribute it with ER/Studio Data Architect Viewer, create RTF and HTML reports about the model, export the model to another format to be opened in a different application, or create an image of the model.
See Also
Generating RTF and HTML Model Reports
Exporting the Data Model
Exporting an Image of the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Printing_the_Data_Model&oldid=5221
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Promoting_Data_Integrity_Through_Rules,Promoting Data Integrity Through Rules,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Rules promote data integrity by validating the data supplied to an attribute or table column. For example, you could define a rule, NotLessThanZero, which specifies that data values for an attribute or column be zero or greater. Once bound to a table column, the rule would reject any transactions that supply a negative value to the table column. Rules are independent database objects that behave like check constraints, but can be re-used throughout your data model.
Rules, like Defaults in the Data Dictionary let you manage and reuse commonly used rules. Rules can be bound to other dictionary objects such as datatype or UDTs as well as attributes/columns. Rules can be created directly in the domain or under the Rules node.
Example
If you have a generic constraint that will apply to many fields, you can create a domain that will allow you to specify the constraint in that domain. You can use a place-holder for the column in the table. Use @var to substitute the column name. The column name replaces @var when a rule in the data dictionary is bound to a column.
For example, a rule was created in the
Pubs.dm1
sample model, with the following syntax:
UPPER(@var) in ('Y', 'N')
When that rule is bound to column au_id as follows:
the rules translates to:
UPPER(au_id) in ('Y', 'N')
as shown in the Check Constraint Value area in the following screenshot:
Create and Edit Data Dictionary Rules
On the
Data Model Explorer
, click the
Data Dictionary
tab.
On the
Data Dictionary
tab, right-click the
Rules
node and then select
New Rule
.
Complete the
Add/Edit Dictionary Rule
Editor as required and then click
OK
to implement the changes.
Once created, you can edit the rule by double-clicking it to launch the editor.
The following describe options that require additional explanation:
Rule Value
tab
Specifies the rule. You must specify the rule value in the same syntax as the database platform in which you intend to use the rule.
Attachment Bindings
tab
Bind an external piece of information, or attachment to the rule. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the default before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this rule. You can override this setting using the Rule/Constraint tab of the object class editor.
See Also
Determining Which Objects are Bound by Data Dictionary Objects
Changing Data Dictionary Object Bindings and Values
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Promoting_Data_Integrity_Through_Rules&oldid=5222
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Quick_Access_Toolbar,Quick Access Toolbar,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
ER/Studio Data Architect has a Quick Access Toolbar (QAT) which provides access to your favourite functions. You can find it in the top left hand corner of the application. You can easily add new functions.
Adding functions to the QAT
You can quickly add functions to the QAT by right clicking on them and selecting Add
You can also click the dropdown on the QAT itself and customize it.
And select More Commands
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Quick_Access_Toolbar&oldid=7181
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Quick_Start_Guide,Introduction,"From ER/Studio Data Architect
(Redirected from
Quick Start Guide
)
Jump to:
navigation
,
search
Go Up to
Main Page
ER/Studio Data Architect
is a visual modeling application used for platform-independent logical data architecture analysis and design, in addition to platform-specific physical database design and construction. The powerful, multi-level design environment addresses the everyday needs of database administrators, developers, and data architects who build and maintain large, complex database applications and strive to consolidate, report, and re-use metadata across the enterprise.
The progressive interface and simplicity of
ER/Studio Data Architect
has been designed to effectively address the ease-of-use issues which have plagued data modeling and CASE tools for the past decade and more. The application equips you to create, understand, and manage the life-cycle of mission-critical database designs and business metadata within the enterprise.
ER/Studio Data Architect
is rich and customizable, offering strong logical design capabilities like:
The ability to spawn many physical designs from a corporate logical design.
Bi-directional model comparison and information synchronization.
Visual-Basic for Applications API for product customization.
Powerful DDL reverse engineering and generation.
Metadata import and export capabilities.
Data lineage documentation.
Sophisticated XML, HTML, and RTF-based documentation and reporting facilities.
Application Interface
The application interface is divided into several tabbed windows that let you navigate and customize your workspace. The application includes context-sensitive toolbars, menus, intuitive icons, keyboard commands, and other resources to help you work efficiently. ER/Studio Data Architect user interface has a standard Windows look and feel.
For a detailed description of the internal data structure of the ER/Studio Data Architect application and the Repository, you can look at Metadata models (DM1 files), usually found in:
C:\ProgramData\IDERA\ERStudioDA_x.x\Sample Models
For information on enhanced UI features, please see the corresponding numbers below or mouseover the image:
Interface Features
ER/Studio Data Architect
has an enhanced user interface that is similar to Microsoft Windows with intuitive icons.
You can dock frequently-used design icons on a separate toolbar that's always available.
The name of the active model, with or without the full path to the file, can be displayed on the title bar of the main application window. This is an option you can set in
Tools > Options > Application > Application Defaults
.
ER/Studio Data Architect displays the active model in bold type, so that you can easily see which model or submodel you are working on.
The
Data Model
tab of the Data Model Explorer displays indexes, relationships, and attributes as separate nodes.
The
Data Model
tab of the Data Model Explorer displays schema objects like packages, procedures, functions, materialized views, auxiliary tables, and triggers as separate nodes.
The
Overview Window
lets you navigate large Data Models.
The
Zoom Window
helps you focus on the details of a specific area of a large, reduced diagram.
The Data Model Explorer is comprised of five tabs that offer easy access to important functionality and also includes an Explorer tree that lets you efficiently navigate the objects of your data models. The ER/Studio Data Architect interface to the Data Model is divided into two main areas. On the left is the Data Model Explorer and on the right is the Data Model Window. This convention is carried out on other tabs of the user interface, such as the Repository and Data Lineage tabs, where you’ll find an explorer on the left and a graphical representation on the right. The Data Model Window also provides a complete workspace for creating physical and logical data models and smaller, movable windows to help you navigate large data models.
See Also
Tutorial: Installing ER/Studio Data Architect
Upgrading ER/Studio Data Architect
Licensing ER/Studio Data Architect
What's New
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Introduction&oldid=6040
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Redoing_a_Data_Dictionary_Redo_Check_Out,Redoing a Data Dictionary Redo Check Out,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
The Redo Check Out operation transfers the latest version of the Diagram or objects from the Repository to your machine. Because you have the diagram or objects checked out, you can view and modify them.
On the
Data Model Explorer
, select the
Data Dictionary
tab and then click the target data dictionary.
Choose
Repository > Data Dictionary > Check Out Data Dictionary
.
Note:
Any changes made to the Diagram before doing the
Redo Check Out
operation are discarded.
See Also
Undoing a Data Dictionary Check Out
Checking in the Data Dictionary
Checking out the Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Redoing_a_Data_Dictionary_Redo_Check_Out&oldid=5223
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Reference,Reference,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Troubleshooting
Glossary
Supported Database Platforms
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Reference&oldid=5224
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Related_Files,Related Files,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
The Related Files page contains a list of pdf offerings for ER/Studio users.
Available files include:
ER/Studio Data Architect Read Me
ER/Studio Viewer Read Me
ER/Studio Data Architect Quick Start Guide
ER/Studio Team Server and Repository Installation and Upgrade Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Related_Files&oldid=7977
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Relating_Source_and_Target_Models,Relating Source and Target Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
Data movement properties describe how source and target models are related outside of the Data Lineage tab. You can relate a source model to one or more models in the same diagram or to models imported from external systems. The rules defined here are used at the table/entity level on the Data Lineage tab of the entity and table editors.
On the Data Model Explorer, right-click the top-level node for the particular model and select
Data Movement Properties
.
Select the
Source
or
Targets
tab.
Select the level of mapping you intend to add or edit.
Click
Add
and select from among the models listed.
Select the
Synch registered data...
option if you want changes to the current model that extend to other models in the.dm1 file to be automatically updated.
Once complete, you can double-click any table to edit table-level and column-level movement rules.
See Also
Data Lineage Workflow
Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Relating_Source_and_Target_Models&oldid=5225
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Relating_Source_and_Target_Tables_and_Columns,Relating Source and Target Tables and Columns,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Data Lineage Workflow
Data movement rules describe how source and target tables and entities are related. You can relate source data to one or more tables and entities in the same model, the active diagram, or to tables imported from legacy systems. The rules defined here are used at the table level on the Data Lineage tab of the entity and table editors.
Create and edit data movement rules
On the
Data Lineage
tab, right-click
Data Movement Rules
and choose
New Data Movement Rule
.
Complete the
Data Movement Rule
editor as required and then click
OK
to exit the editor.
Once created, you can edit the Data Movement rule by double-clicking it to launch the Data Movement Rule editor.
The following describe options that require additional explanation:
Rule Information
tab
Rule Name
: Enter a name that indicates the operation and objects acted on, depending on the specifics of your binding definition.
Rule Type
: Select a generic movement rule type that best describes the data movement.
Rule Text
: Document your data movement plan here, perhaps adding instructions or contingency plans.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this rule. You can override this setting using the Data Lineage tab of the entity or table editor. For more information, see
Creating and Editing Entities
.
See Also
Data Lineage Workflow
Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Relating_Source_and_Target_Tables_and_Columns&oldid=5226
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Relating_models_to_ER/Studio_TS_Data_Sources,Relating models to ER/Studio TS Data Sources,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
If you are connected to
Team Server
and the current model's parent diagram is in the Repository, this can be related to a Team Server data source. By creating this relationship you will be able to see and document the scope or impact of a particular change.
Note:
For information on Team Server data sources, see
Logging In and Out of the Repository and ER/Studio TS
.
To relate a model to a ER/Studio TS data source
Right-click a model and select
Data Source Mappings
. The
Model Data Sources
dialog opens.
Select an item from the left-hand list of available data sources and then click the
>>>>
button to relate the data source to the current model. A
Choose owner and database
dialog opens.
Select a
Database Type
and
Datasource
, provide a
User Name
and
Password
, and click
Connect
to connect to the target data source.
For each of the
Catalog
and
Owner
controls, click the associated browse button to open a dialog that lets you select catalogs and owners and click
OK
when ready.
Click
OK
.
See Also
Securing Repository Objects
Checking Out Repository Items
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Relating_models_to_ER/Studio_TS_Data_Sources&oldid=5227
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Release_9.6.1_features,Release 9.6.1 features,"From ER/Studio Data Architect
Jump to:
navigation
,
search
ER/Studio Data Architect 9.6.1
Published October 21, 2013
Contents
1
Release 9.6.1 features summary:
2
Release 9.6 features summary:
3
Firebird DBMS Now Supported
4
Increased Memory Availability
5
IDERA Connect
6
New Platform Version Support
7
New InterBase Object Type Support
8
SQL Server Sequence Support
9
Oracle Named NOT NULL Constraints
10
Related MetaWizard Release
11
See Also
Release 9.6.1 features summary:
In addition to many bug fixes, 9.6.1 offers the following new features.
Firebird DBMS Now Supported
Increased Memory Availability
Release 9.6 features summary:
IDERA Connect
New Platform Version Support
New InterBase Object Type Support
SQL Server Sequence Support
Oracle Named NOT NULL Constraints
Firebird DBMS Now Supported
ER/Studio Data Architect now officially supports Firebird 1.5, 2.1 and 2.5.
Increased Memory Availability
ER/Studio Data Architect is now able to use up to 4GB of memory on 64 bit machines and up to 3GB of memory on 32 bit Windows.
On 32-bit versions of Windows, the system must be able to recognize the /LARGEADDRESSAWARE setting applied to ERSTUDIO. This link provides information of how to do this in different Windows systems:
http://msdn.microsoft.com/en-us/library/windows/hardware/ff556232%28v=vs.85%29.aspx
. There is no need to change anything on Windows x64.
IDERA Connect
IDERA Connect is a new product that provides functionality previously provided by ER/Studio Portal.
In addition, a Connect server stores data source definitions that can be used by ER/Studio Data Architect. This lets you centralize data source management as well as administer any data governance policies regarding datasource definitions.
ER/Studio Data Architect functionality requiring database connectivity now lets you select an IDERA Connect connection, identify the data source, and provide credentials.
Specific features that accommodate IDERA Connect data sources include:
Reverse engineering
Generating databases
Compare/Merge utility
Where Used
tab of the Table Editor
In addition, you can relate models to Connect data sources. You can also initiate creation of a new data source on IDERA Connect from ER/Studio Data Architect.
New Platform Version Support
As of this release, ER/Studio Data Architect functionality is available for the following platform versions:
TeraData 14
IBM DB2 for Linux, Unix, and Windows Version 10
Netezza 7
InterBase XE and XE3
New InterBase Object Type Support
The following object types are now supported for InterBase 2009, XE, and XE3:
Generators
Triggers
Procedures
SQL Server Sequence Support
Sequences, introduced in SQL Server 2012, are now supported by ER/Studio Data Architect. Functionality available for Oracle and DB2 Sequences is now provided for SQL Server 2012 modeling.
Oracle Named NOT NULL Constraints
In previous releases, ER/Studio Data Architect treated named NOT NULL constraints as simple check constraints. ER/Studio Data Architect now supports named NOT NULL constraints directly in the user interface, reverse and forward engineering, and throughout the product.
Related MetaWizard Release
For information on the ER/Studio MetaWizard release, see
metaintegration.net
.
See Also
Release Notes
What's New
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Release_9.6.1_features&oldid=5228
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Renaming_an_Object,Renaming an Object,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Resizing Objects
On the Data Model Explorer, right-click the object that you want to rename.
From the shortcut menu, click
Modify Name
.
Enter the new name and press
Enter
.
To rename an attribute, double-click the object or its parent in the Data Model Window to bring up the entity or table editor. In the editor, you can click the attribute and then click
Edit
.
See Also
Deleting an Object
Editing an Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Renaming_an_Object&oldid=5231
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Repo_Error_Information_Window,Repo Error Information Window,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Troubleshooting
A socket error can occur if there is a problem with the user’s computer or server while making the connection.
Socket errors manifest when something keeps the socket from connecting. The socket error can either come from the user’s computer or from the server.
Common Causes
Client Side
The most common cause of a socket error on the client side is a firewall blocking the socket or having the network connection drop/disconnect.
Server Side
Common reasons for socket errors on server side are that the server is down, disconnected, or overloaded with connection requests. In this instance, it may be useful to contact the server administrator.
Until the connection or server problem is corrected, the socket error will continue to appear.
See Also
Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Repo_Error_Information_Window&oldid=6302
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Repository,Repository,"From ER/Studio Data Architect
Jump to:
navigation
,
search
The Repository information has moved to
Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Repository&oldid=5233
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Repository_Administration,Repository Administration,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Repository
This section is for the person who installed ER/Studio Data Architect and who is now configuring ER/Studio DA or administering ER/Studio Repository databases. It contains the following topics:
Connecting to the Repository
Establishing Security for the Repository
Creating and Managing Roles
Creating and Managing Users
Creating and Managing Groups
Making Backup Copies
Diagram Data Version Upgrade
See Also
Repository Server Administration
Upgrading From Previous Versions
Establishing Security for the Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Repository_Administration&oldid=5234
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Repository_Properties,Repository Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Specifying Repository and ER/Studio TS Options
To view only Repository Properties
Log in to the Repository.
Choose
Repository > Repository Properties
.
On the Server tab, view the server settings, and then use the User tab to view the login name of the current user.
See Also
Setting Repository and ER/Studio TS Options
Logging In and Out of the Repository and ER/Studio TS
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Repository_Properties&oldid=7912
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Repository_Status_Icons,Repository Status Icons,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
The icons below show check-out status of diagrams and objects contained in Repository. For any one object, check-outs are allowed by multiple users simultaneously. The Local column illustrates the status of an object that appears on your PC only, whereas the Remote column illustrates how the same document status appears to other Repository users:
Model Objects
Display Objects
Local Status
Remote Status
Checked In
Checked In
Checked In
Checked Out
Checked In
Exclusively Checked Out
Checked Out
Checked In
Checked Out
Checked Out
Exclusively Checked Out
Checked In
Delayed Check Out
Checked In
Delayed Check Out
Checked Out
Delayed Check Out
Exclusively Checked Out
Named Release
Named Release
See Also
Checking Out Repository Items
Working with Named Releases of Repository Diagrams
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Repository_Status_Icons&oldid=5893
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Resizing_Objects,Resizing Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
When you add entities, tables or views to your data model, ER/Studio Data Architect automatically determines the optimal dimensions of the object to fit the text and display the text of the object. However, you can resize data model objects such as entities, shapes, tables, text blocks, and views to control the presentation of your data models. For example, if you need to hide attributes in an entity or view, you can resize the entity or view to be smaller than the width of the longest attribute, therefore hiding text.
You cannot resize the Title Block of a data model.
Manually Resize Data Model Objects
Automatically Resize Data Model Objects to Fit Text
Manually Resize Data Model Objects
You can manually resize entities, shapes, tables, text blocks, and views to control the presentation of your data models.
In the
Data Model Window
, select the object you want to resize.
Place the cursor over one of the handles, and then click and drag to resize the object.
Automatically Resize Data Model Objects to Fit Text
ER/Studio Data Architect can automatically resize entities, tables, and views to display the entire object name and displayed contents.
In the Data Model Window, select the object you want to resize.
On the Diagram ribbon, click Resize.
The object is resized to accommodate the full width of the text.
If you want to adjust the object size manually, grab a sizing handle and reposition the object boundaries.
You can also resize the selected object to fit the text by pressing
CTRL+R
or by right-clicking the object and then selecting Resize.
See Also
Copying Objects
Moving Objects
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Resizing_Objects&oldid=7274
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Resolving_Name_Duplication_in_Parent_and_Child_Entities_(Unification),Resolving Name Duplication in Parent and Child Entities (Unification),"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Relationships
Contents
1
Attribute Name Editing Options
2
Examples of Duplicate Name Resolutions
2.1
Replace Native Attribute with Propagating Attribute
2.2
Rolename Propagating Attribute
2.3
Change Native Attribute Name to Allow Propagating Attribute Name
2.4
Unify Native Attribute with Propagating Attribute
3
See Also
The
Duplicate Attribute Editor
appears when you create or rename primary key attributes or relationships and it duplicates existing attributes or columns in child tables or entities. For example, if you have two entities called Parent and Child where Parent has a primary key called
KeyName
and Child also has an attribute called
KeyName
, when you create a relationship from Parent to Child, then the
Duplicate Attribute Editor
shows and you must decide how to handle the propagated attributes.
Note:
If you want that the
Duplicate Attribute Editor
launches when the child entity has a
foreign key
with the same name as the parent entity, select
Prompt to Resolve FK Columns
on the
Application
tab of the
Options editor
. To open
Options editor
choose
Tools > Options
.
The following will help you understand how to use the
Duplicate Attribute Editor
:
Attribute Name Editing Options
Examples of Duplicate Name Resolutions
Attribute Name Editing Options
Once the
Duplicate Attribute Editor
appear on the
Propagating Attributes to Resolve
box select the propagating attribute that you want to resolve then select the way you want to propagate and the choose the action you want to be performed:
Replace Native Attribute with propagating Attribute
: This option replaces the attribute in the child with the propagated foreign key attribute. If the relationship is deleted from the main model,
ER/Studio Data Architect
removes the propagated attribute and original native attribute from the child entity.
Rolename propagating Attribute
: This option allows you to rename the foreign key so that the native attribute in the child entity can still exist with its original name. After propagation, both attributes will exist in the child entity.
Change Native Attribute Name to allow propagating Attribute Name
: This option allows you to rename the original native attribute in the child entity so that the attribute name from the parent entity can be used for the foreign key. After propagation, both attributes will exist in the child entity.
Unify Native Attribute with propagating Attribute
: This option unifies the propagating foreign with the native attribute in the child table. If the relationship is later deleted,
ER/Studio Data Architect
leaves the native child attribute.
Examples of Duplicate Name Resolutions
The following examples illustrate how duplicate names are resolved depending on the options chosen in the
Duplicate Attribute Editor
.
Replace Native Attribute with Propagating Attribute
Rolename Propagating Attribute
Change Native Attribute Name to Allow Propagating Attribute Name
Unify Native Attribute with Propagating Attribute
Replace Native Attribute with Propagating Attribute
If selected,
ER/Studio Data Architect
replaces the attribute in the child with the propagated foreign key attribute. If the relationship is deleted from the main model,
ER/Studio Data Architect
removes the propagated attribute and original native attribute from the child entity.
Rolename Propagating Attribute
If selected, you can rename the foreign key so that the native attribute in the child entity can still exist with its original name. After propagation, both attributes will exist in the child entity.
To resolve the naming conflict, in the Duplication Attribute Editor you can specify the rolename
idrolename
for the foreign key.
Change Native Attribute Name to Allow Propagating Attribute Name
If selected, you can rename the original native attribute in the child entity so that the attribute name from the parent entity can be used for the foreign key.
To resolve the foreign key, the new child name is specified as id_change_native.
Unify Native Attribute with Propagating Attribute
If selected,
ER/Studio Data Architect
unifies the propagating foreign with the native attribute in the child table.
ER/Studio Data Architect
keeps id in the child entity if you delete the relationship.
Note:
If you want to being able to change the role name of foreign attribute or columns to the same name as other attributes or columns in the same Entity or Table go to
Tools > Options
. Then check
Allow Unification when Editing Names
on the
Name Handling
tab.
See Also
Creating and Editing Relationships
Creating Subtype Cluster Relationships
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Resolving_Name_Duplication_in_Parent_and_Child_Entities_(Unification)&oldid=5238
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Retrieving_a_Repository_Diagram,_Model,_Submodel_or_Named_Release","Retrieving a Repository Diagram, Submodel or Named Release","From ER/Studio Data Architect
(Redirected from
Retrieving a Repository Diagram, Model, Submodel or Named Release
)
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Retrieving repository objects downloads copies of selected diagrams, submodels, or named releases from the Repository onto the user's local machine. The data model, submodel or named release is copied from the Repository to your local system. If a local version of the object exists, the Get from Repository operation refreshes the local copy with the version from the Repository.
Note:
Permissions assigned to your user account in the Repository Security Center determine what type of access you have to Repository objects. For more information, see
Establishing Security for the Repository
.
Log in to the Repository.
Choose
Repository > Diagrams > Get from Repository
.
In the
Get From Repository
dialog, there are two ways to find a diagram.
Browse to and then select the object.
In the
Show diagrams that begin with
: field, enter the first few letters of the diagram name. As you type the list of diagrams updates to display just the diagrams that match the letter or letters entered.
Tip:
Holding
ctrl
-expand expands all descendant nodes (except diagrams that haven't had their child data retrieved from the Repo) and clicking to expand normally will only expand the immediate children. There is also a
memory
feature that observes what was previously expanded or collapsed the last time the Get from Repository dialog was used.
If you plan to make changes to the diagram, you may select
Check Out Immediately
to immediately mark the objects in the file as editable.
Tip:
You can prevent other users from making changed to the object by selecting Check Out Exclusively. Otherwise, when you check in your changes you can resolve any differences between your version and the version in the Repository if another user checked in changes to the same object. For more information, see
Checking In Objects
.
Click
OK
.
The dm1 file will be placed in the Active Files directory as specified in
Repository > Options > General
.
Additional Information
If a model with the same name already exists in the Models directory, as specified in
Tools > Options > Directories > Models
, then you will be alerted that proceeding with the Get from Repository operation will result in the local copy being overwritten with the version from the Repository. You can then choose to cancel the Get operation without affecting the contents of the local version.
You can view a Named Release, but, in general, you may not modify it. A special Repository operation, Rollback Diagram, lets you Check In a Named Release as the latest version of a Diagram; once the Roll Back operation is completed, you can Check Out the Diagram (or a portion of it) to modify it.
See Also
Securing Repository Objects
Repository Status Icons
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Retrieving_a_Repository_Diagram,_Submodel_or_Named_Release&oldid=5239
"""
"https://docwiki.embarcadero.com/ERStudioDA/203/en/Retrieving_a_Repository_Diagram,_Submodel_or_Named_Release","Retrieving a Repository Diagram, Submodel or Named Release","From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Retrieving repository objects downloads copies of selected diagrams, submodels, or named releases from the Repository onto the user's local machine. The data model, submodel or named release is copied from the Repository to your local system. If a local version of the object exists, the Get from Repository operation refreshes the local copy with the version from the Repository.
Note:
Permissions assigned to your user account in the Repository Security Center determine what type of access you have to Repository objects. For more information, see
Establishing Security for the Repository
.
Log in to the Repository.
Choose
Repository > Diagrams > Get from Repository
.
In the
Get From Repository
dialog, there are two ways to find a diagram.
Browse to and then select the object.
In the
Show diagrams that begin with
: field, enter the first few letters of the diagram name. As you type the list of diagrams updates to display just the diagrams that match the letter or letters entered.
Tip:
Holding
ctrl
-expand expands all descendant nodes (except diagrams that haven't had their child data retrieved from the Repo) and clicking to expand normally will only expand the immediate children. There is also a
memory
feature that observes what was previously expanded or collapsed the last time the Get from Repository dialog was used.
If you plan to make changes to the diagram, you may select
Check Out Immediately
to immediately mark the objects in the file as editable.
Tip:
You can prevent other users from making changed to the object by selecting Check Out Exclusively. Otherwise, when you check in your changes you can resolve any differences between your version and the version in the Repository if another user checked in changes to the same object. For more information, see
Checking In Objects
.
Click
OK
.
The dm1 file will be placed in the Active Files directory as specified in
Repository > Options > General
.
Additional Information
If a model with the same name already exists in the Models directory, as specified in
Tools > Options > Directories > Models
, then you will be alerted that proceeding with the Get from Repository operation will result in the local copy being overwritten with the version from the Repository. You can then choose to cancel the Get operation without affecting the contents of the local version.
You can view a Named Release, but, in general, you may not modify it. A special Repository operation, Rollback Diagram, lets you Check In a Named Release as the latest version of a Diagram; once the Roll Back operation is completed, you can Check Out the Diagram (or a portion of it) to modify it.
See Also
Securing Repository Objects
Repository Status Icons
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Retrieving_a_Repository_Diagram,_Submodel_or_Named_Release&oldid=5239
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Retrieving_an_Enterprise_Data_Dictionary,Retrieving an Enterprise Data Dictionary,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
To retrieve an enterprise data dictionary, you must either open a repository diagram and bind the enterprise data dictionary to it or open a Repository diagram that already has the data dictionary bound to it.
To bind an enterprise data dictionary to a repository diagram
, see
Associating a Data Dictionary with a Diagram
.
To determine which repository diagrams have the enterprise data dictionary bound
, see
Associating the Enterprise Data Dictionary with Repository Diagrams
.
See Also
Determining Where an Enterprise Data Dictionary is Used
Associating a Data Dictionary with a Diagram
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Retrieving_an_Enterprise_Data_Dictionary&oldid=5240
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Reusing_Procedural_Logic,Reusing Procedural Logic,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with the Data Dictionary
Contents
1
Create and Edit Reusable Triggers
2
Create and Edit Reusable Procedures
3
Create and Edit Libraries
4
Library Example
5
Call to Library Example
6
See Also
The Data Dictionary supports the following types of procedural logic and enables you to organize them by database platform:
Reusable Triggers
: A special type of stored procedure that automatically executes when data modification operations such as INSERT, UPDATE, or DELETE occur. Because triggers are customizable and fire automatically, they are often used to maintain referential integrity in a database.
Reusable Procedures
: Templated procedures written in BASIC code. These procedures can be applied to any table, since they use the table's context in the code.
Libraries
: Lets you compartmentalize blocks of code used to generate SQL for Reusable Triggers and Reusable Procedures. This lets you reuse blocks of code. Reusable triggers or procedure code can call library functions.
The editor that launches when creating new procedural logic is the Sax Basic editor, which is compatible with Microsoft Visual Basic.
Topics covered in this section are:
Create and Edit Reusable Triggers
Create and Edit Reusable Procedures
Create and Edit Libraries
Create and Edit Reusable Triggers
Select a table.
The SQL in the procedure will be validated in context of the table selected and the database platform. If no table is selected, the SQL cannot be properly validated.
In the
Data Dictionary
, expand the
Reusable Procedural Logic
node and then expand the
Reusable Triggers
node.
Right-click the node for the appropriate database platform and then click
New Trigger
.
Define the trigger as required and then click
OK
to complete the editor.
Tip:
Once created, you can edit the trigger by double-clicking its object on the Data Dictionary tab to launch the editor.
The following describe options that require additional explanation:
In order for code to be generated for procedural logic such as triggers and procedures, the results of the logic must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
BASIC
tab
Includes a text editor as well as all the editing and formatting tools that are available on the ER/Studio Data Architect Macro Editor. You can enter trigger code or you can use the Import button to import it. You can use Visual BASIC and/or AI to create the code for the reusable trigger.
DBMS
: If you change the DBMS from the one you clicked when you opened the editor, you can use the Copy Dictionary Object functionality to move the Trigger to the correct DBMS node.
Select Libraries
: Click to select a previously defined library to add to the trigger code. When using library functions, the library file needs to be selected by selecting this option.
Create and Edit Reusable Procedures
Select a table.
The SQL in the procedure will be validated in context of the table selected and the database platform. If no table is selected, the SQL cannot be properly validated.
In the
Data Dictionary
, expand the
Reusable Procedural Logic
folder and then expand the
Reusable Procedures
folder.
Right-click the folder for the appropriate database platform and then click
New Procedure
.
Define the reusable procedure as required and then click
OK
to complete the editor.
Tip:
* Once created, you can edit the procedure by double-clicking its object on the Data Dictionary tab to launch the editor.
The following describe options that require additional explanation:
In order for code to be generated for procedural logic such as triggers and procedures, the results of the logic must be stored in a variable called
resultstring
. For example, in the
Northwind.dm1
sample model, the Data Dictionary lists a reusable trigger, SYSUPDATE, for the Oracle platform. The code for this trigger includes the following statement, which is required for code to be generated for the trigger:
resultstring = trigBody
BASIC
tab
Includes a text editor as well as all the editing and formatting tools that are available on the ER/Studio Data Architect Macro Editor. You can enter procedure code or you can use the Import button to import it. You can use Visual BASIC and/or AI to create the code for the reusable procedure.
DBMS
: If you change the DBMS from the one you clicked when you opened the editor, you can use the Copy Dictionary Object functionality to move the procedure to the correct DBMS node.
Select Libraries
: Click to select a previously defined library to add to the procedure code.
Create and Edit Libraries
In the
Data Dictionary
, right-click the
Libraries
folder and then click
New Library
.
Define the library as required and then click
OK
to complete the editor.
The following describe options that require additional explanation:
BASIC
tab
Includes a text editor as well as all the editing and formatting tools that are available on the ER/Studio Data Architect Macro Editor. You can enter library code or you can use the Import button to import it. You can use Visual BASIC and/or AI to create the code for the library.
Library Example
'This function generates the header for a templated insert
'procedure. Input is entity name that is used to generate
'procedure name. Platform is Oracle.
Function insertprocheader (ent As Entity) As String
Dim result As String
Dim attr As AttributeObj
'add create statement for the procedure with naming convention
result = ""CREATE OR REPLACE PROCEDURE P"" & ent.TableName & ""INSERT"" & vbCrLf
result = result & ""("" & vbCrLf
'add parameter list for insert statement
'loop in actual sequence order
For i = 1 To ent.Attributes.Count
For Each attr In ent.Attributes
If attr.SequenceNumber = i Then
'make parameter line for column
result = result & ""V"" & attr.ColumnName & vbTab & vbTab & vbTab
result = result & ""IN ""
result = result & attr.Datatype & "","" & vbCrLf
End If
Next attr
Next i
'trim last comma of the parameter list
result = Left(result, Len(result) - 3)
'add last closed parantheses
result = result & "")"" & vbCrLf
result = result & ""AS"" & vbCrLf & ""BEGIN"" & vbCrLf
'return header
insertprocheader = result
End Function
Call to Library Example
This sub main routine demonstrates how to call a library function.
Note:
The library needs to be added to the reusable trigger or stored procedure.
Sub Main
Dim procstring As String
procstring = insertprocheader(CurrEntity)
'call other library functions for body of procedure
'call other library functions for end of procedure
'check procedure text with a message box
'disable when generating DDL
MsgBox(procstring)
'output procedure string variable to DDL wizard
resultstring = procstring
End Sub
See Also
Reusing Attribute Definitions Using Domains
Importing a Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Reusing_Procedural_Logic&oldid=5242
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Reverse_Engineer_MongoDB_Walkthrough,Reverse Engineer MongoDB Walkthrough,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
MongoDB Support
Use the steps in this topic to reverse engineer your MongoDB database.
Install
ER/Studio Data Architect.
Choose
File > New
, and then select
Reverse-engineer an existing database
.
Click
Login
.
On the following window, choose the type of connection you would like. For MongoDB select
Native Connection
, and then choose
MongoDB
.
Type your MongoDB URI or click
Advanced Options
to manually enter connection and authentication information. In our example we are using the server IP address (10.150.40.240) and the default admin account which we entered the username and password in the
Advanced Options
section.
Click
Next
to connect to the MongoDB server.
Now you have authenticated and connected to the MongoDB server, you can select, or type in the name of the database you would like to reverse engineer.
To choose from a list, click the [...] button to the right of the
Database List
. In our example we are using the
library
database.
Click
Next
.
Select the tables or collections you would like to reverse engineer, and then click
Next
..
On Page 4 you can choose the desired layout. You can change this again at a later time from within the model explorer, using the
layout
menu.
There is also an option to Handle Repeated Elements. For denormalized objects that are repeated across multiple parents, you can choose to combine them into one object. Here if nested objects have the same name the wizard will combine all the fields into the same object.
Page 5 allows you to set the type of physical model, any external naming standards, and a summary of the selected objects.
Click
Finish
to complete the wizard.
The wizard will generate a physical model rendered in
Rolled-up'
mode
All the
Nested Objects
are rolled-up into the Collections. To see the Nested Objects as separate symbols on the diagram, select Diagram/Display Options
ER/Studio Data Architect separates the logical data model from the physical representation for a specific DBMS. After the reverse engineering, the logical model is shown. Click on the Physical model node in the tree to see the Physical model of the reverse engineered.
Collections are indicated by square corners. All collections have an
_id
field. Nested objects are indicated by rounded corners.
Containment relationship lines show how nested objects are used by collections. The diamond endpoint connects to the parent object and the other end connects to the nested object. Containment relationships can contain one or many which are signified by a
1
or
*
at the end of the relationship.
Add Collections to your model by selecting the
Add Collection
tool and dropping them in.
Add nested objects to your model by selecting the
Add Nested Object
tool and dropping them in. If you have a collection or other nested object selected before using the nested object tool, then a containment relationship is automatically created from that selected object.
You can double-click on any object to edit, add, modify, or remove fields.
Open the Collection Editor by double-clicking an object.
From here, you are able to set field names and datatypes, as well as other informational data, such as a definition.
You can also mark fields as Arrays by checking the
Array
option in the field editor.
Tip:
Go to diagram and object display options and check the Datatype option under Table to show the data types of your fields in the model.
See Also
MongoDB Support
Reverse Engineering an Existing Database
Tutorials: Documenting an Existing Database
Containment Relationships
MongoDB JSON Generation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Reverse_Engineer_MongoDB_Walkthrough&oldid=7119
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Rolling_Back_a_Diagram_to_a_Previous_Version,Rolling Back a Diagram to a Previous Version,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
Use the Rollback function to replace the most current version in the repository to a previous Named Release of the entire diagram. The Rollback Diagram operation is particularly useful when you want to return to a previous version of your diagram because a later version has changes you no longer need or want to use.
Log in to the Repository and get a Named Release.
Review the Diagram to ensure you want to rollback to a previous release.
Choose
Repository > Diagrams > Rollback Diagram
.
Notes
When the rollback operation is completed, you can check out the diagram (or a portion of it) to modify it.
We recommend that you review the diagram to be sure that you want to rollback to this version.
See Also
Branching and Merging Diagrams
Viewing the Checkin History of a Repository Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Rolling_Back_a_Diagram_to_a_Previous_Version&oldid=5245
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Running_ER/Studio_Data_Architect_Macros_from_Windows,Running ER/Studio Data Architect Macros from Windows,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
You can run ER/Studio Data Architect macros from the Windows command shell (similar to the old DOS command line console). You can do it with a batch file or from the Windows Desktop.
Access ER/Studio Data Architect from Command Line
To execute from the command line or as part of a batch file (*.bat file) command, use the
-m
option and specify the macro you want to run:
Start /wait /min ""erstudio"" erstudio.exe -m MyMacro.bas
Access ER/Studio Data Architect from Windows
Choose
Start > Run
.
Type
cmd
and press
Enter
.
Enter
ERStudio.exe
-m MyMacros.bas.
Notes
You can use the ER/Studio Data Architect command-line to access macros written in ERStudio's WinWrap Basic Macro editor. Run the command from the directory where ERStudio.exe is located. The default location is:
C:\Program Files\IDERA\ERStudio Data Architect 18.x
You must specify the macros directory in
Options Editor > Directories Tab
. The default location is
C:\ProgramData\IDERA\ERStudioDA_x.x\Macros
.
Macros may not be located in a subdirectory. Macros with long names or spaces need to be enclosed in quotes.
You must include the
.bas
extension in the command line syntax.
Any errors that occur during the execution of the macro are written to an error file (
.err
) in the macros directory in
Options Editor - Directories
tab. The file name includes the date of the error. ER/Studio Data Architect lists each error with a timestamp in the file.
You can use dialogs in macros executed from the command line, but you must write the macro code to handle the opening of diagrams. Macros that work on the active diagram may not work.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Running_ER/Studio_Data_Architect_Macros_from_Windows&oldid=7950
""
Category
:
Data Templates"
https://docwiki.embarcadero.com/ERStudioDA/203/en/Running_ER_Studio_Data_Architect_Macros_from_Windows,Running ER/Studio Data Architect Macros from Windows,"From ER/Studio Data Architect
(Redirected from
Running ER Studio Data Architect Macros from Windows
)
Jump to:
navigation
,
search
Go Up to
Automating ER/Studio Data Architect
You can run ER/Studio Data Architect macros from the Windows command shell (similar to the old DOS command line console). You can do it with a batch file or from the Windows Desktop.
Access ER/Studio Data Architect from Command Line
To execute from the command line or as part of a batch file (*.bat file) command, use the
-m
option and specify the macro you want to run:
Start /wait /min ""erstudio"" erstudio.exe -m MyMacro.bas
Access ER/Studio Data Architect from Windows
Choose
Start > Run
.
Type
cmd
and press
Enter
.
Enter
ERStudio.exe
-m MyMacros.bas.
Notes
You can use the ER/Studio Data Architect command-line to access macros written in ERStudio's WinWrap Basic Macro editor. Run the command from the directory where ERStudio.exe is located. The default location is:
C:\Program Files\IDERA\ERStudio Data Architect 18.x
You must specify the macros directory in
Options Editor > Directories Tab
. The default location is
C:\ProgramData\IDERA\ERStudioDA_x.x\Macros
.
Macros may not be located in a subdirectory. Macros with long names or spaces need to be enclosed in quotes.
You must include the
.bas
extension in the command line syntax.
Any errors that occur during the execution of the macro are written to an error file (
.err
) in the macros directory in
Options Editor - Directories
tab. The file name includes the date of the error. ER/Studio Data Architect lists each error with a timestamp in the file.
You can use dialogs in macros executed from the command line, but you must write the macro code to handle the opening of diagrams. Macros that work on the active diagram may not work.
See Also
Why Use Automation Objects?
Using the SAX Basic Macro Editor
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Running_ER/Studio_Data_Architect_Macros_from_Windows&oldid=7950
""
Category
:
Data Templates"
https://docwiki.embarcadero.com/ERStudioDA/203/en/Saving_and_Using_Quick_Launch_Settings,Saving and Using Quick Launch Settings,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Using ER/Studio Data Architect
Contents
1
Save Quick Launch Settings to a File
2
Use Quick Launch Settings from a File
3
Rename Quick Launch Settings File
4
Delete Quick Launch Settings
5
See Also
To improve efficiency when performing repetitive tasks, Quick Launch lets you save settings and selections for select ER/Studio Data Architect wizards and utilities for later reuse. You can save settings in separate files for each of the following wizards and utilities:
Compare and Merge
DDL Generation
Model Validation
Naming Standards
Reports, Reverse Engineering
Reverse Engineering
Submodel Synchronization
XML Schema Generation
This section is comprised of the following topics:
Save Quick Launch Settings to a File
Use Quick Launch Settings from a File
Rename Quick Launch Settings File
Delete Quick Launch Settings
Save Quick Launch Settings to a File
On the last page of the wizard or utility, clear
Use file-based Quick Launch settings
, and then click
Save As
.
Type a name for the quick launch settings file, and then click
OK
.
Use Quick Launch Settings from a File
Select
Use file-based Quick Launch settings
, and then click
Load File
.
Navigate to and then double-click the desired Quick Launch settings file. The Quick Launch file extensions are:
CMO for Compare and Merge
DDO for DDL Generation
MVO for Model Validation
NSO for Naming Standards
RPO for ER/Studio Data Architect Report
RVO for Reverse Engineering
SSO for Submodel Synchronization
XQO for XML Schema Generation
By default, these files are stored in the XML subdirectory of the ER/Studio Data Architect application data directory; the default directory is
C:\Users\<user>\AppData\Roaming\IDERA\ERStudio\XML
. You can change it in
Tools > Options > Directories > Quick Launch
.
Select
Settings and Objects
if you want to use the saved selection or select
Settings Only
to use the default selections.
Click
Go
.
Rename Quick Launch Settings File
On the last page of the wizard or utility, clear
Use file-based Quick Launch settings
.
Select a quick launch setting file from the list.
Click
Rename
.
Type a new name for the quick launch settings file, and then click
OK
.
Delete Quick Launch Settings
On the last page of the wizard or utility, clear
Use file-based Quick Launch settings
.
Select a quick launch setting file from the list, and then click
Delete
.
See Also
Automating ER/Studio Data Architect
Administrator Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Saving_and_Using_Quick_Launch_Settings&oldid=5964
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Searching_for_and_Changing_Object_or_Object_Attribute_Names,Searching for and Changing Object or Object Attribute Names,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
Using the
Universal Naming Utility
you can globally search, and replace if desired, names, strings, and attachment value overrides for bound attachments for both your logical and physical models. You define your search, then confine the search to specific objects within your models, or confine the search to specific models only. You can also narrow the search to include only specified objects or object properties or to include only certain models. The results can include model objects such as attachment bindings and table storage parameters.
On the
Search Results
tab of the
Universal Naming Utility
(UNU) you can double-click on an object and open the editor for that object. In this process, you are asked to save any changes you made in the UNU; the UNU closes; the object is located and selected in Data Model Data Dictionary, or Data Lineage tree; and the object editor opens with the object selected.
Choose
Tools > Universal Naming Utility
.
Complete the
String Specifications
.
You can limit the scope of the search or search and replace using the
Object Scope
and
Model Scope
tabs.
Search or Replace:
To search for a string, click
Search
.
To replace a string, click
Replace
. Examine the
Search Results
and then click
Apply
to implement the changes.
Note:
Changes are not implemented until you click Apply.
To create a report of the search results in RTF or HTML format, click
Report
.
To create a submodel of selected results, select objects in the results window and then click
Create Submodel
.
Tip:
RTF-formatted reports are ideal for print distribution, while HTML-formatted reports are better-suited for browser viewing.
The following describe options that require additional explanation.
Search Results
tab:
Whole Word
: Searches for whole words in the search string. For example, if your search string is the word ""data,"" check the Whole Word check box if you do not want results such as the word ""database.""
Object Scope
tab: Lets you narrow your search to specific objects and to specific string usages within the selected objects.
Model Scope
tab: Lets you restrict the search to specific models within the diagram.
See Also
Creating and Editing Submodels
Resizing Objects
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Searching_for_and_Changing_Object_or_Object_Attribute_Names&oldid=5250
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Securing_Repository_Objects,Securing Repository Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
In the Repository Security Center, the user or administrator with Update Security Info privileges can restrict access to the data model at the Project, Diagram, Model, Submodel, and Data Dictionary levels.
In order to impose security on Repository objects, Repository Users and Roles must be created. For more information, see
Establishing Security for the Repository
.
Choose
Repository > Security > Security Center
.
In the
Repository Object
area, navigate to and then click to select the object you want to secure.
To give a user access to the selected object
, from
Available Users
, click and drag a user onto an
Available Role
. The user inherits the privileges of the role under which the user appears in the Available Role area.
To revoke a user's access privileges
, from
Available Roles
, click and drag a user onto an
Available Role
.
NOTE: The No Access role is available only at the Diagram and Project level.
Repeat
Step 1
and
Step 2
as required and then click
OK
to exit the security center.
Inform users that they must log out of the Repository and then log in again for them to receive Repository object security updates.
See Also
Retrieving a Repository Diagram, Submodel or Named Release
Repository Status Icons
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Securing_Repository_Objects&oldid=5251
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Setting_Data_Model_Properties,Setting Data Model Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
Contents
1
Security Information tab
2
Attachment Bindings tab
3
PreSQL & PostSQL tab
4
Name Handling tab
5
See Also
The Model Properties Editor lets you modify the Security, Attachment, PreSQL and PostSQL properties for the model. It also displays the name handling options that were applied when the physical model was generated. The editor varies slightly between the logical and physical models.
Right-click the model or data flow and then click
Model Properties
.
Tip:
You can also fo to
Model > Model Properties.
For Logical Models, make your changes on the
Security Information
and
Attachment Bindings
tabs and then click
OK
.
For Data Flows, make your changes on the
Security Information
and
Attachment Bindings
tabs and then click
OK
.
For Physical Models make your changes on the
Security Information
,
Attachment Bindings
,
PreSQL & PostSQL
tabs and then click
OK
.
The following describe options that require additional explanation:
Security Information tab
Attachment Bindings tab
PreSQL & PostSQL tab
Name Handling tab
Security Information tab
Displays the current security information as defined in the Data Dictionary. You can add or edit security reporting information in by double-clicking the field you want to change. To set the model-wide default value for a property, go to the Data Dictionary tab and expand the Data Security Information Node. For more information, see
Enforcing Security Using Data Security Types and Properties
.
Attachment Bindings tab
Bind an external piece of information, or attachment to the model. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the data model before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
PreSQL & PostSQL tab
Enter SQL to be applied before or after the CREATE OBJECT statement. If you select Generate, the PreSQL and PostSQL scripts entered here are included in the script when you generate the physical database.
Name Handling tab
The Name Handling tab is read-only and displays the name handling options that were selected in the General Options on page 3 of the Generate Physical Model Wizard when the physical data model was generated. If a naming standards template was used when generating the model, the General options in the Generate Physical Model Wizard are not available, and the settings displayed here should be disregarded.
See Also
Setting Diagram Properties
Setting the Relationship Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Setting_Data_Model_Properties&oldid=5252
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Setting_Default_Diagram_Colors_and_Fonts,Setting Default Diagram Colors and Fonts,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
You can create color schemes and change fonts to help manage your workspace. The Colors and Fonts Editor lets you customize the data model display by customizing the background and foreground colors of the model, entities, and database objects and by customizing the font for individual components of the data model or standardizing on a specific font for all displayed text.
Choose
Format > Colors & Fonts
.
Make the changes as required and then click
OK
to implement the changes.
Notes
Override the default colors and fonts for specific objects or for instances of a specific object. For more information, see
Overriding Color and Font Settings for a Specific Object
.
Set the default background color of the model in the Main Model Display area of the Logical or Physical tabs of the Options editor, choose
Tools > Options
.
Use the
Inherit from parent entity foreground
checkbox to set whether you want the outline of an entity to be the same color as its parent entities. If you select a relationship and change its color, the manual change overrides the color inherited from the parent. Changes made in a child entity do not affect the color of the parent. This option is enabled only for the following object types when selected from the drop-down list available in the Colors & Fonts dialog:
Relationship object type
. Relationship color is the same as the parent entity foreground (border.)
Inherited Primary Keys object type
. Primary font color is the same as parent entity foreground (border).
Inherited Non-Keys
. Foreign key color is the same as parent entity foreground (border).
See Also
Changing the Model Background
Overriding Color and Font Settings for a Specific Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Setting_Default_Diagram_Colors_and_Fonts&oldid=5253
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Setting_Diagram_Properties,Setting Diagram Properties,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
In the Diagram Properties dialog you can document basic information about your data model. Data entered on this dialog is used when generating reports about the model and is also used to populate the Title Block.
On the Model ribbon, click Diagram Properties
Make your changes to the
Information
,
Description
, and
Attachment Bindings
tabs, and then click
OK
.
The following describe options that require additional explanation:
Attachment Bindings tab
Bind an external piece of information, or attachment to the domain. You can also remove an attachment from an object, override an attachment binding's default value, or change the position of a bound attachment. To override the value of the attachment you have moved to the Selected Attachments grid, double-click the Value field of the target attachment. ER/Studio Data Architect opens the Value Override Editor or a list depending on the attachment datatype. Attachments are created in the Attachments folder of the Data Dictionary and must be applied to the diagram before they will display on this tab. For more information, see
Attaching External Documents to the Data Model
.
See Also
Attaching External Documents to the Data Model
Setting Data Model Properties
Setting the Relationship Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Setting_Diagram_Properties&oldid=7266
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Setting_Repository_and_ER/Studio_TS_Options,Setting Repository and ER/Studio TS Options,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Specifying Repository and ER/Studio TS Options
The Repository Options window allows you to manage your Repository settings, properties regarding your check-out policy, and desired functionality with regard to Team Server.
To manage your Repository Options
Log in to the Repository.
Choose
Repository > Options
.
Specify your changes on the Repository Options tabs, and then click
OK
to exit the editor.
The following subtopics help you complete the
Repository Options
:
General tab
Check Out Policy tab
Team Server tab
General tab
The
General
tab allows you to specify all of the settings for the Repository server.
The following options and fields are available on the
General
tab:
Server Machine
. Displays the host name of the ER/Studio Repository. Click
Select
to list all previously-used Repositories, or click
Refresh
to update the Repository list with the host names of all Repositories found on the network.
Refresh
. Click this button to refresh the list of Repository servers available to you on your network.
Active File Directory
. This path is the directory to where files checked out or retrieved from the Repository are saved.
Active File Directory
should be a directory on the local machine as opposed to a shared directory on the network. Note that a shared network directory can result in Repository operation errors.
Keep the Active File Directory on a local machine. A shared network directory can result in Repository operation errors.
Hide Repository Status Icons
. This option toggles whether you want to prevent Repository Status icons, such as the lock, from appearing in the Data Model and Data Lineage explorers, and Data Model and Data Lineage windows. This option is useful when you want to print the Diagram without the icons displayed.
Show Repository Status Dialog
. This option toggles whether you want to display the Repository Status dialog box, which shows timing information for each step taken during a Repository operation.
View SQL Alerts
. This option toggles whether you want to view SQL Alerts. If selected, the Repository Merge operation displays an alert during check-in to warn the user when multiple users have modified data used by a view. When the SQL alert is displayed, ERDA displays an option to not show such messages. If you want to re-enable these messages, select
View SQL Alerts
.
Enable Repo Events Polling
. Repository Events Polling returns information about Repository operations so that the Diagram or Objects status is updated with the most current information available. If you enable Repo Events Polling, you can then determine the time interval at which the polling occurs. This option is enabled by default.
Repo Events Polling Interval
. The number of seconds between polls to synchronize the status of local diagrams and objects with the Repository.
Hide General Information
. For performance reasons, you may want to select this option which prevents the Repository status information from displaying in the General Information area of the Get From Repository dialog.
Display Synchronize Comments Warning
. When selected, this option prompts the user to save any changes to the file before synchronizing the comments with the Repository. When not selected, the system automatically saves the file before synchronization.
Diagram Name Display Format
. This option determines how the diagram name displays in Repository dialogs such as Get from Repository. If you choose
Diagram Name (Filename.dm1)
, the diagram name displayed might be Demo1 (Model.dm1) where Demo1 is the name field of the Diagram Properties dialog, which is accessed by clicking
File > Diagram Properties.
Check Out Policy tab
The
Check Out Policy
tab allows you to change the properties for the check-out policy. For example, you can specify that you want a prompt when the user tries to edit a Repository item that is not checked out.
The following options and fields are available on the
Check Out Policy
tab:
ER Objects
. This area determines how to store the core data, such as names and definitions of the model objects.
Layout Objects
. This area determines how to store the entity object's display or graphic information, such as the size, color, and placement of Objects.
Immediate
. An immediate Check Out policy requires an established server connection and a user login. When you attempt to edit an object that is not checked out, you are prompted to check out the object or to open the object in an editor in a view or read-only model.
Delayed
. If
Delayed
and
Confirmation Required
are selected, when you attempt to edit an object that is not checked out, you are prompted to check out the object. If you select
Yes
in the Confirmation dialog or if
Confirmation Required
is not selected, ER/Studio Data Architect marks the object with an open red lock (indicating that check out is local) instead of an open green lock, which indicates that the object is checked out from the Repository and is marked as checked out for all Repository users to see. The Repository is not informed of the objects checked out status and the actual check out does not occur until you run the command
Repository > Diagrams > Run Delayed Check Out
, at which time, you may need to resolve any conflicts with changes checked in by other users.
Team Server tab
The following options and fields are available on the
Team Server
tab:
URL
: This field lets you specify connection details to the ER/Studio Team Server server which allows you to specify the name of the server on which ER/Studio TS is running, such as datojt090, or the URL for the ER/Studio TS login, such as http://datojt090:8080.
Note:
If you want to use
Glossary Integration
, you must have your Team Server details entered here.
Automatic Business Term Links
. These options manage how Terms are highlighted and managed for ease of use.
Manual Business Term Relationships
. Allows you to select whether you want to show Business Term Relationships.
Save Table DDL with Physical Models for Team Server
and
Save View DDL with Physical Models for Team Server
. Select one or both of these options if you want the DDL information to appear when viewing the specific Entity types in Team Server.
Notes
When you add or check in files to the Repository, you should do so to the Active File Directory.
Consider your installation configuration when configuring your Repository Server Settings.
The Repository database does not need to reside on the same machine as the Repository server, and when you are configuring your Repository server, the Repository database is not affected.
See Also
Repository Properties
Logging In and Out of the Repository and ER/Studio TS
Glossary Integration
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Setting_Repository_and_ER/Studio_TS_Options&oldid=7450
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Setting_the_Relationship_Notation,Setting the Relationship Notation,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Customizing the Data Model
ER/Studio Data Architect can represent the relationships in your data models in IDEF1X notation or in one of three varieties of IE notation.
IDEF1X
: Data modeling technique used by many branches of the United States Federal Government.
IE (James Martin)
: Information Engineering (IE) as developed by Martin and later revised by Finkelstein.
IE (Crow's Feet)
: Uses IE notation and represents relationships with connecting lines between entities, and symbols at the ends of those lines to represent the cardinality of the relationship. This is the notation used in Oracle texts and in other applications such as Visio. Foreign keys are displayed in entity boxes.
Filtered IE (Hide Foreign Keys)
: Uses standard IE notation, but foreign keys are not displayed in entity boxes.
Note:
To change the notation setting, go
Tools > Options
from the
ER/Studio Data Architect
Main menu, and then click the
Logical
or
Physical
tab where you can choose the notation type.
Contents
1
IDEF1X versus IE Relationship Notation
2
Changing the Relationship Notation for all Diagram Models
3
Changing the Relationship Notation for a Selected Model
4
See Also
IDEF1X versus IE Relationship Notation
IDEF1X is based on the relational data model designed by E. F. Codd and on the entity-relationship model designed by Peter Chen, but IDEF1X models differ from the models on which IDEF1X is based. A model created using Peter Chen's or E.F.Codd's designs will appear different compared to a model created using ER/Studio Data Architect and the IDEF1X notation, and vice versa.
IDEF1X makes it easier to visualize primary and foreign keys. IDEF1X also offers the power (and danger) of using identifying relationships to cascade primary keys through a chain of entities.
IDEF1X Notation
IE (James Martin) Notation
IE (Crow's Feet) Notation
Filtered ID (Hide Foreign Keys) Notation
Changing the Relationship Notation for all Diagram Models
Choose
View > Diagram and Object Display Options
.
Click the
Relationship
tab.
In
Display Preferences
, choose the desired notation and then click
OK
.
Changing the Relationship Notation for a Selected Model
Right-click the target model and then select
Model Options
.
In the
Notation
area, choose the desired notation and then click
OK
.
Note:
When changing the Relationship Notation on  a model, you will not see a change in the way the model is structured, only the connectors will change. The difference in the notations is that for optional relationships, IE (Crows Feet ) uses dashed relationship lines, whereas the Martin notation still uses solid lines.
See Also
Manipulating Relationship Lines
Creating Entity Relational or Dimensional Models
Changing the Model Notation
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Setting_the_Relationship_Notation&oldid=5624
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Skewed_Tables,Skewed Tables,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
On the
Skewed By
tab of the Table Editor for the Hive platform, you can select the columns of a table on which to Skew by. When at least one of the available columns has been added to the selection, the
ON
clause box becomes available.
Skewed By can be used to improve performance for tables where one or more columns have skewed values. By specifying the values that appear very often (heavy skew) Hive will split those out into separate files.
The following options are:
Available Columns
: Displays all the columns available to add to the
Skewed By
. Select the column you want to add to the organizing keys and move it to the Selected Columns box. Use the left and right arrows to move columns to and from the Selected Columns box.
Selected Columns
: Displays the columns that make up the cluster.
Up
/
Down
buttons: Let you reorder the columns in the bucket. The column order can affect the access speed. The most frequently accessed columns should be at the top of the Selected Columns list.
ON
clause box: This is where you can enter your skew values.
See Also
Bucketing
Creating and Editing Columns
Creating and Editing Attributes and Columns
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Skewed_Tables&oldid=5257
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Sorting_Tables_for_Redshift,Sorting Tables for Redshift,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
The Sort tab of the Table Editor for the Amazon Redshift platform allows you to create the SORTSTYLE and SORTKEY clauses for a table.
The Sort Keys section allows you to choose columns to be used as sort keys. Once a sort key is added, the
Sort Style
dropdown is enabled and provides the choice of whether it is a COMPOUND sort key or INTERLEAVED.
See Also
Distributing Columns for Amazon Redshift
Creating and Editing Entities and Tables
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Sorting_Tables_for_Redshift&oldid=5538
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Specifying_Repository_and_ER/Studio_TS_Options,Specifying Repository and ER/Studio TS Options,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
Using configurable Repository settings, you can specify and modify server particulars, Repository display settings, and check out policy. There are two dialogs that control Repository behavior,
Setting Repository and ER/Studio TS Options
and
Repository Properties
. The ER/Studio Team Server settings are also defined in the
Repository Options
dialog.
See Also
Setting Repository and ER/Studio TS Options
Repository Properties
ER/Studio TS wiki
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Specifying_Repository_and_ER/Studio_TS_Options&oldid=5499
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Specifying_the_Location_of_Shared_Data,Specifying the Location of Shared Data,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Configuring and Customizing
Choose
Tools > Options
, and then click the
Directories
tab.
In the
File Path
dialog, browse to an existing directory you want to store your shared files.
Note:
ER/Studio Data Architect will create a directory that does not exist but not a directory path. If your path has multiple levels it will need to be previously created.
In the
Options
dialog, click
OK
. When closing the dialog ER/Studio Data Architect creates and/or searches in the changed directory.
If you are moving any of the following directories, you will need to copy the contents of the
DataTypeMapping, Macros
or
Sample Models
directories to the new location.
To effect the changes, please restart ER/Studio Data Architect.
See Also
Changing the Diagram File Name
Administrator Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Specifying_the_Location_of_Shared_Data&oldid=5259
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Status_Bar,Status Bar,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
ER/Studio Data Architect provides statistics pertaining to your logical and physical model in the status bar at the bottom of the application. The table below describes the statistics available on the Status bar:
Diagram Mode
Statistic
Definition
Logical
Views
Total number of views in the current model or submodel
Entities
Total number of entities in the current model or submodel
Attributes
Total number of attributes in the current model or submodel
Relationships
Total number of relationships established in the current model or submodel
Physical
Tables
Total number of tables in the current model or submodel
Views
Total number of views in the current model or submodel
Columns
Total number of columns in the current model or submodel
Foreign Keys
Total number of foreign keys in the current model or submodel
See Also
Overview
Menus
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Status_Bar&oldid=5260
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Submissions_Policy,Submissions Policy,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Intellectual Property infringement, including copyright or trademark infringement, is not acceptable. All contributors' shall only submit work that is their own original work or a derivative work of the Documentation wiki materials. In the event they wish to contribute work that is either a third party's or a derivative work of a third party they must first contact
ER/Studio Technical Support
for the work to be vetted. For example you may have created a derivative work based on materials licensed under a Creative Commons license. We would need to review the underlying work and the specific Creative Commons license to determine the acceptability of including such work on the Documentation wiki.
Any materials which are found or believed to be an infringement of a third party's rights will have the body text removed, and said page may be protected from further edits until the matter has been resolved. The legal owners of any image or other file used on this site may request the removal of said materials at any time.
All contributors are hereby informed that their submissions may be edited, moved, or deleted by others. This wiki's policy is to protect such pages from editing only in cases of vandalism or if a prior version was found or believed to be infringing. If you do not wish your work to be altered, please do not submit it.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Submissions_Policy&oldid=4797
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Subpartition_Editor,Subpartition Editor,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Partitioning a Table
In the Subpartition Editor, select the
Subpartition Type
. Options include:
Hash
. Hash partitioning distributes data based on the result of running the partitioning key through a hashing algorithm.
List
. List partitioning maps rows to partitions based on discrete values.
Range
. Range partitioning distributes data based on a given range, as in time intervals.
On the Columns tab, move the appropriate columns from the
Available Columns
list to the
Selected Columns
list to work with those columns.
Name
Description
Hash
Use Hash partitioning to evenly distribute data.
Specify the default number of subpartitions.
Tablespace
.
Selected Tablespaces
.
List
Use List partitioning to control how rows map to each partition based on discrete values.
Range
Use Range partitioning to periodically load new data and purge old data.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Subpartition_Editor&oldid=6626
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Supported_Database_Platforms,Supported Database Platforms,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
ER/Studio Data Architect supports the following database platforms:
Database
Version
Amazon Redshift
Databricks
Embarcadero InterBase
XE, XE3, 2007, 2009
Firebird
1.5, 2.x
Google BigQuery
Greenplum
4.2
Hadoop Hive
0.12, 0.13
Hitachi HiRDB
IBM Db2 Common Server
IBM Db2 for iSeries
V4R5, V5R2
IBM Db2 for LUW
5.x - 10.x
IBM Db2 for z/OS
5.x - 11.x
IBM Informix Dynamic Server
9.x
IBM Informix OnLine and SE
IBM Netezza
4.6, 5.0, 6.0, 7.0
JSON Instance and Schema Files
Microsoft Access
2.0, 95, 97, 2000, 2013
Microsoft Azure SQL Database
Microsoft Azure Synapse Analytics
Microsoft SQL Server
6.5, 7, 2000, 2005, 2008, 2012, 2014, 2016, 2017, 2019
Microsoft Visual FoxPro
2, 3, 5
MongoDB
2.6, 3.0, 3.2, 3.4, 3.6, 4.x
MySQL
3.x, 4.x, 5.x, 8.0
Oracle
7.x, 8.x, 9i, 10g, 11g, 12c, 18c, 19c
ODBC / ANSI SQL
PostgreSQL
8.x, 9.x, 10.x, 11.x, 12.x
SAP Adaptive Server Anywhere (ASA)
5, 6, 7, 8, 9, 10
SAP Adaptive Server Enterprise (ASE)
11.9.2, 12.x, 15.0
SAP IQ
12.x, 15.x, 16.x
Snowflake
Teradata
V2R4, V2R5, V2R6, 12, 13.0, 14.x, 15.10
Database Connectivity
The following table describes the necessary client software needed to successfully connect to a target database.
When selecting client software, make sure the DBMS version matches the client software version. In cases where the client libraries are backward compatible, the latest client version is recommended. Please refer to the DBMS vendor for specific client software and the database versions for which it is supported.
Database
Required Client Libraries
Vendor
Google BigQuery
BigQuery ODBC
Magnitude Simba
Hitachi HiRDB
Hitachi ODBC
Hitachi
IBM DB/2 OS/390 / IBM DB2 LUW
IBM DB2 Connect
IBM
IBM AS/400
IBM Client Access for AS/400
IBM
Informix OnLine and SE
Informix-Cli and ODBC
Informix Software, Inc. and Intersolv, Inc.
InterBase
ODBC
IDERA, Inc.
Microsoft Access
Access ODBC
Microsoft
Microsoft SQL Server
SQL Server Client Tools
Microsoft
Microsoft Azure SQL DB
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Azure Synapse
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Visual FoxPro
FoxPro ODBC
Microsoft
MySQL
MySQL ODBC
MySQL
Netezza
ODBC
Netezza Corporation
Teradata
Teradata ODBC
Teradata
Oracle
SQL*Net or Net8 with configuration files (hosts, tnsnames.ora)
Oracle
PostgreSQL
PostgreSQL ODBC
Postgre
Sybase ASA
Sybase ASA ODBC
Sybase
Sybase ASE
Sybase Open Client
Sybase
Sybase Adaptive Server IQ
Sybase ASA ODBC
Sybase
Sybase Watcom SQL Anywhere
SQL Anywhere ODBC
Sybase
For information on connecting to databases in ER/Studio Data Architect, see
Connecting to Database Sources and Targets
.
See Also
Changing the Database Platform of a Model
Connecting to Database Sources and Targets
System Requirements
Databricks Support
JSON Support
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Supported_Database_Platforms&oldid=7830
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Supported_Platforms,Supported Database Platforms,"From ER/Studio Data Architect
(Redirected from
Supported Platforms
)
Jump to:
navigation
,
search
Go Up to
Main Page
ER/Studio Data Architect supports the following database platforms:
Database
Version
Amazon Redshift
Databricks
Embarcadero InterBase
XE, XE3, 2007, 2009
Firebird
1.5, 2.x
Google BigQuery
Greenplum
4.2
Hadoop Hive
0.12, 0.13
Hitachi HiRDB
IBM Db2 Common Server
IBM Db2 for iSeries
V4R5, V5R2
IBM Db2 for LUW
5.x - 10.x
IBM Db2 for z/OS
5.x - 11.x
IBM Informix Dynamic Server
9.x
IBM Informix OnLine and SE
IBM Netezza
4.6, 5.0, 6.0, 7.0
JSON Instance and Schema Files
Microsoft Access
2.0, 95, 97, 2000, 2013
Microsoft Azure SQL Database
Microsoft Azure Synapse Analytics
Microsoft SQL Server
6.5, 7, 2000, 2005, 2008, 2012, 2014, 2016, 2017, 2019
Microsoft Visual FoxPro
2, 3, 5
MongoDB
2.6, 3.0, 3.2, 3.4, 3.6, 4.x
MySQL
3.x, 4.x, 5.x, 8.0
Oracle
7.x, 8.x, 9i, 10g, 11g, 12c, 18c, 19c
ODBC / ANSI SQL
PostgreSQL
8.x, 9.x, 10.x, 11.x, 12.x
SAP Adaptive Server Anywhere (ASA)
5, 6, 7, 8, 9, 10
SAP Adaptive Server Enterprise (ASE)
11.9.2, 12.x, 15.0
SAP IQ
12.x, 15.x, 16.x
Snowflake
Teradata
V2R4, V2R5, V2R6, 12, 13.0, 14.x, 15.10
Database Connectivity
The following table describes the necessary client software needed to successfully connect to a target database.
When selecting client software, make sure the DBMS version matches the client software version. In cases where the client libraries are backward compatible, the latest client version is recommended. Please refer to the DBMS vendor for specific client software and the database versions for which it is supported.
Database
Required Client Libraries
Vendor
Google BigQuery
BigQuery ODBC
Magnitude Simba
Hitachi HiRDB
Hitachi ODBC
Hitachi
IBM DB/2 OS/390 / IBM DB2 LUW
IBM DB2 Connect
IBM
IBM AS/400
IBM Client Access for AS/400
IBM
Informix OnLine and SE
Informix-Cli and ODBC
Informix Software, Inc. and Intersolv, Inc.
InterBase
ODBC
IDERA, Inc.
Microsoft Access
Access ODBC
Microsoft
Microsoft SQL Server
SQL Server Client Tools
Microsoft
Microsoft Azure SQL DB
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Azure Synapse
Microsoft SQL Server Native Client 11
Microsoft ODBC 17
Microsoft
Microsoft Visual FoxPro
FoxPro ODBC
Microsoft
MySQL
MySQL ODBC
MySQL
Netezza
ODBC
Netezza Corporation
Teradata
Teradata ODBC
Teradata
Oracle
SQL*Net or Net8 with configuration files (hosts, tnsnames.ora)
Oracle
PostgreSQL
PostgreSQL ODBC
Postgre
Sybase ASA
Sybase ASA ODBC
Sybase
Sybase ASE
Sybase Open Client
Sybase
Sybase Adaptive Server IQ
Sybase ASA ODBC
Sybase
Sybase Watcom SQL Anywhere
SQL Anywhere ODBC
Sybase
For information on connecting to databases in ER/Studio Data Architect, see
Connecting to Database Sources and Targets
.
See Also
Changing the Database Platform of a Model
Connecting to Database Sources and Targets
System Requirements
Databricks Support
JSON Support
MongoDB Support
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Supported_Database_Platforms&oldid=7830
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Synchronizing_Comments,Synchronizing Comments,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with ERStudio Repository
You can add comments to any object in ER/Studio Data Architect that are saved with the document and uploaded to the Repository. When adding a comment you have the option to immediately update the Repository or if you like you can wait and update the Repository with all your new comments at once. Synchronizing comments also ensures your model is updated with any comments other users have made. You do not have to check out an object in order to append a comment to it.
Choose
Repository > Synchronize External Data
.
You can choose to be notified when comments are added by selecting Show Comment Notifications on the
Tools > Options > Comments tab
.
See Also
Adding Comments to Database Objects
Adding and Editing Object Comments
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Synchronizing_Comments&oldid=5262
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Synchronizing_Physical_and_Logical_Models,Synchronizing Physical and Logical Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
After normalizing or denormalizing the model you may want to synchronize it with the real-world database. Using the Submodel Synchronization Utility, you can see the differences found and decide which changes you want to change. For more information, see
Synchronizing Submodels
.
See Also
Synchronizing Submodels
Synchronizing Comments
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Synchronizing_Physical_and_Logical_Models&oldid=5263
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Synchronizing_Submodels,Synchronizing Submodels,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
Use the Submodel Synchronization Utility to synchronize object positioning, color and font settings, display level, members and hierarchies of submodels within the same file or across disparate files. You can synchronize submodels between logical and physical models by adding, removing, and updating submodel items or you can synchronize submodels of the local model with a local ER/Studio Data Architect file. Submodels in source and target models are matched by Submodel name.
You can synchronize submodels between logical and physical models by adding, removing, and updating submodel items.
The following are examples of when synchronizing submodels can be useful:
Example 1
Example 2
Example 3
Contents
1
Example 1
2
Example 2
3
Example 3
4
See Also
Example 1
You have existing logical and physical models in a
*.dm1
file, each with 20 to 30 submodels. The physical model represents the current development environment. You use the Add New Physical Model function to add a physical model of the test environment. The physical model of the test environment is close but does not exactly match the existing physical model that is the development benchmark environment. To match the test and development physical models, you can use the submodel synchronization utility to add or transfer submodels from the development model to the test model within the same or across disparate
*.dm1
files.
Example 2
You have a logical and physical model within the same
*.dm1
. For reporting purposes, the same submodels are used in the logical and the physical models. You make substantial changes to the logical model, adding and removing objects or adding new submodels for new projects. You can use the Submodel Synchronization Utility to synchronize or promote these changes to the physical model.
Example 3
Many people manage their submodels in the logical model and want to be able to move the structure to a physical or project model that was spun off from the Enterprise logical model. Members and display settings change often; this utility automates the process of synchronizing the submodels.
To synchronize two submodels where the target model does not have relationships, you must first use the Compare and Merge utility to bring across any relationships from the source to the target submodel and then use the Submodel Synchronize utility to synchronize the submodels.
See Also
Using the Submodel Synchronization Utility
Creating and Editing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Synchronizing_Submodels&oldid=5949
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Toolbars,Toolbars,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Application Interface
Note:
ER/Studio Data Architect 18.4 and earlier versions only.
Beginning with ERDA 18.5, this feature is provided as the Quick Access Toolbar. For more information about using this feature, see
Quick Access Toolbar
.
ER/Studio Data Architect toolbars are context-sensitive and change to reflect the element of the application you are using. Toolbar buttons offer quick access to common features of ER/Studio DA. All functionality accessible from toolbar buttons is also accessible from
Menus
and
Accessing Shortcut Menus
. Toolbars change depending on if you are working with logical or physical models.
ER/Studio Data Architect lets you move toolbars anywhere on the workspace. You can also dock toolbars anywhere on the perimeters of the workspace. You can also specify which toolbars you want displayed on the workspace.
Contents
1
Moving Toolbars
2
Undock a Toolbar
3
Dock a Toolbar
4
Displaying Toolbars
5
See Also
Moving Toolbars
You can dock and undock toolbars, moving them to any place with the application window.
Undock a Toolbar
On a docked toolbar, click and hold the toolbar handle
.
Drag the toolbar to a new location.
Dock a Toolbar
On an undocked toolbar, double-click the title bar of the toolbar.
Displaying Toolbars
Click
View
and then click to select or deselect the toolbars you want to display or hide.
See Also
Quick Access Toolbar
Overview
Menus
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Toolbars&oldid=7185
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Transforming_Model_Objects_from_Logical_to_Physical,Transforming Model Objects from Logical to Physical,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
Before considering physical design issues, it is important to understand how a physical design maps to its corresponding logical design. When ER/Studio Data Architect derives a physical design from a logical one, it transforms logical model objects into their physical model analogs. The table below details how different logical objects are transformed into physical objects. Understanding the transformation lets you better assess the impact of altering the physical design to differ from the logical design.
The table below describes logical model objects and their corresponding physical model objects:
Logical Model Object
Physical Model Object
Notes
Entity
Table
An entity translates directly into a table. In a dimensional model, tables are automatically assigned types (fact, dimension, snowflake, or undefined) based on an analysis of the schema.
Attribute
Column
An attribute translates directly into a table column.
View
View
Views translate directly between logical and physical models. However, some database platforms offer additional properties that can be applied to physical view definitions.
Relationship
Foreign Key
A relationship becomes a foreign key in the physical design. You can enforce referential integrity through foreign key constraints or through triggers.
Primary Key
Unique Index or Primary Key Constraint
You can enforce primary keys with unique indexes or primary key constraints, depending on the database platform.
Alternate Key
Unique Index or Unique Constraint
You can enforce alternate keys with unique indexes or unique constraints, depending on the database platform.
Inversion Entry Key
Non-unique Index
You can convert inversion entries into non-unique indexes.
Default
Default or Declared Default
Data Dictionary defaults are converted to default objects for Sybase and Microsoft SQL Server. Otherwise, they are converted to declared defaults, if supported by the selected database platform.
Rule
Rule, Check Constraint, Default Value
Data Dictionary rules are converted to rule objects for Sybase and Microsoft SQL Server. Otherwise, they are converted to check constraints, if supported by the selected database platform.
Relationship
Foreign Key
Definition
Comment
User Datatype
User Datatype or Base Datatype
Data Dictionary datatypes are converted to user datatypes for Sybase and Microsoft SQL Server. Otherwise, they are converted into their underlying base datatype definitions.
Domain
Column Definition
Domains are translated into the base column definition for each column that refers to a domain.
See Also
Developing the Logical Model
Physical Storage Considerations
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Transforming_Model_Objects_from_Logical_to_Physical&oldid=5266
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Troubleshooting,Troubleshooting,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Most problems can be solved by updating your current software. Before troubleshooting, it is advised that you ensure your system is fully up to date.
Repository Errors
In some cases it makes sense for users to keep a backup copy of a dm1 file. However, if users perform repository operations on more than one copy of the file at a time it could lead to check-in failures. The following options are some best practices for situations where it is necessary to keep a backup copy of a
.dm1
file:
Create a folder on your hard drive specifically for
.dm1
file backups. For example, add a folder named Backups under your Active Directory folder.
When making a backup copy, use Windows Explorer to move or copy the current file into the backup directory. If you plan on doing a ""clean"" get to retrieve the entire diagram from the repository, use move so that your local diagram is not in the Active Files directory.
If you need to merge changes from a backup into the current copy of the diagram, make sure no repository operations are done on the backup copy. Complete the merge and close the backup copy before beginning the check-in procedure.
See Also
Troubleshooting Database Connections for 32 bits Version
Troubleshooting Database Connections for 64 bits Version
Best Practices
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Troubleshooting&oldid=5965
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Troubleshooting_Database_Connections,Troubleshooting Database Connections for 32 bits Version,"From ER/Studio Data Architect
(Redirected from
Troubleshooting Database Connections
)
Jump to:
navigation
,
search
Go Up to
Connecting to Database Sources and Targets
Contents
1
IBM DB2 Connectivity Checklist
2
Informix Connectivity Checklist
3
Interbase Connectivity Checklist
4
Microsoft Access Connectivity Checklist
5
Microsoft SQL Server Connectivity Checklist
6
Oracle Connectivity Checklist
7
Sybase Connectivity Checklist
8
See Also
Use the following checklists to resolve any connectivity problems you can encounter. Once you have confirmed your setup, if you are unable to connect please contact IDERA's Technical Support.
This section contains the following topics:
IBM DB2 Connectivity Checklist
Informix Connectivity Checklist
Interbase Connectivity Checklist
Microsoft Access Connectivity Checklist
Microsoft SQL Server Connectivity Checklist
Oracle Connectivity Checklist
Sybase Connectivity Checklist
IBM DB2 Connectivity Checklist
You can connect to your server through your specific client utility.
Install the IBM DB2 Client Connection Software on your local machine.
Install locally the IBM DB2 client utilities. They are included on the IBM DB2 CD.
Configure an ODBC data source entry for each IBM DB2 database that you want to access from ER/Studio Data Architect.
ER/Studio Data Architect
uses ODBC with IBM DB2 for connectivity purposes only. It does not use ODBC catalog calls;
ER/Studio Data Architect
has complete knowledge of the DB2 system catalog.
You need to have SYSADMIN, SYSCTRL, SYSMAINT or DBADM database privileges (not OS privileges) on your local machine. Only DBADM privileges can be granted on databases using the GRANT statement.
The other privileges can be assigned only through the database manager configuration.
Unlike other database platforms, local IBM DB2 data source registration requires IBM DB2 server approval.
Configure your servers in the IBM DB2 Client Configuration Assistant.
Test the connectivity in the IBM DB2 Client Configuration Assistant. You need to be able to connect to your server through your specific client utility.
The
SQLLIB\BIN
subdirectory is in the Windows Path variable.
You need to have read access to SYSIBM.SYSDATABASE and SYSIBM.SYSTABLES for DB2 z/OS SYSCAT.SCHEMATA for DB2 UDB QSYS2.SYSTABLES for AS400. You need to be able to query these tables.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Informix Connectivity Checklist
You can connect to your server through your specific client utility.
Install 32-bit Informix ODBC driver locally.
Install  and configure 32-bit Informix SetNet locally.
Configure a data source in the ODBC Administrator using the Informix ODBC driver and point it to the correct SetNet information.
Interbase Connectivity Checklist
You can connect to your server through your specific client utility.
Install a 32-bit InterBase ODBC driver locally.
Configure a data source in the ODBC Administrator using the InterBase ODBC driver and point it to a valid InterBase database.
Microsoft Access Connectivity Checklist
Install 32-bit Microsoft Access ODBC driver locally.
Configure a data source in the ODBC Data Source Administrator using the Microsoft Access ODBC driver and point it to your database.
Log into your database using the Admin login ID.
Repair the database in the ODBC setup if it is in a compacted mode.
Make sure the database file is in standard archive mode and is not locked or in read-only mode.
Microsoft SQL Server Connectivity Checklist
You can connect to your server through your specific client utility.
Install Microsoft SQL Server client utilities locally. They are included on the Microsoft SQL Server CD.
Configure your server in one of the Microsoft SQL Server configuration tools, either SQL Server Client Configuration Utility or Client Network Utility.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Oracle Connectivity Checklist
You can connect to your server through your specific client utility.
Configure your server in one of the Oracle configuration tools: SQL*Net Easy Config, Net Easy Config or Net Configuration Assistant.
If you are using Net Easy Config or Net Configuration Assistant, ping the server.
Check the Windows Path variable. One of the following subdirectories is in it: ORANT\BIN, ORAWIN95\BIN, ORAWIN\BIN, ORA81\BIN.
Check the Oracle client configuration tool points to the correct TNSNAMES file: TNSNAMES.ora.
If you are using DBArtisan, you can see a list of servers from your TNSNAMES file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Sybase Connectivity Checklist
You can connect to your server through your specific client utility.
Install 32-bit Sybase client utilities locally.
For Sybase ASE 15.5, go to from cmd to the path C:\Sybase\OCS-15_0\scripts and run command: ""copylibs.bat create"" before setting up the connection to the server in the Open Client Directory Service Editor(dsedit.exe).
Check that the Sybase network library LIBSYBDB.dll is installed locally.
Configure your servers in one of the Sybase configuration tools: SQLEDIT or DSEDIT.
Check that you can ping the server from either SQLEDIT.exe and SYBPING.exe or DSEDIT.exe.
Check the Windows Path variable. The following subdirectories are in it: SYBASE\BIN and SYBASE\DLL.
Check that the Sybase client configuration tool points to the correct SQL.ini file.
If you are using DBArtisan, you can see a list of servers from your SQL.ini file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
See Also
Troubleshooting
Configuring ODBC Data Source and Target Connections
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Troubleshooting_Database_Connections_for_32_bits_Version&oldid=5268
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Troubleshooting_Database_Connections_for_32_bits_Version,Troubleshooting Database Connections for 32 bits Version,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Connecting to Database Sources and Targets
Contents
1
IBM DB2 Connectivity Checklist
2
Informix Connectivity Checklist
3
Interbase Connectivity Checklist
4
Microsoft Access Connectivity Checklist
5
Microsoft SQL Server Connectivity Checklist
6
Oracle Connectivity Checklist
7
Sybase Connectivity Checklist
8
See Also
Use the following checklists to resolve any connectivity problems you can encounter. Once you have confirmed your setup, if you are unable to connect please contact IDERA's Technical Support.
This section contains the following topics:
IBM DB2 Connectivity Checklist
Informix Connectivity Checklist
Interbase Connectivity Checklist
Microsoft Access Connectivity Checklist
Microsoft SQL Server Connectivity Checklist
Oracle Connectivity Checklist
Sybase Connectivity Checklist
IBM DB2 Connectivity Checklist
You can connect to your server through your specific client utility.
Install the IBM DB2 Client Connection Software on your local machine.
Install locally the IBM DB2 client utilities. They are included on the IBM DB2 CD.
Configure an ODBC data source entry for each IBM DB2 database that you want to access from ER/Studio Data Architect.
ER/Studio Data Architect
uses ODBC with IBM DB2 for connectivity purposes only. It does not use ODBC catalog calls;
ER/Studio Data Architect
has complete knowledge of the DB2 system catalog.
You need to have SYSADMIN, SYSCTRL, SYSMAINT or DBADM database privileges (not OS privileges) on your local machine. Only DBADM privileges can be granted on databases using the GRANT statement.
The other privileges can be assigned only through the database manager configuration.
Unlike other database platforms, local IBM DB2 data source registration requires IBM DB2 server approval.
Configure your servers in the IBM DB2 Client Configuration Assistant.
Test the connectivity in the IBM DB2 Client Configuration Assistant. You need to be able to connect to your server through your specific client utility.
The
SQLLIB\BIN
subdirectory is in the Windows Path variable.
You need to have read access to SYSIBM.SYSDATABASE and SYSIBM.SYSTABLES for DB2 z/OS SYSCAT.SCHEMATA for DB2 UDB QSYS2.SYSTABLES for AS400. You need to be able to query these tables.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Informix Connectivity Checklist
You can connect to your server through your specific client utility.
Install 32-bit Informix ODBC driver locally.
Install  and configure 32-bit Informix SetNet locally.
Configure a data source in the ODBC Administrator using the Informix ODBC driver and point it to the correct SetNet information.
Interbase Connectivity Checklist
You can connect to your server through your specific client utility.
Install a 32-bit InterBase ODBC driver locally.
Configure a data source in the ODBC Administrator using the InterBase ODBC driver and point it to a valid InterBase database.
Microsoft Access Connectivity Checklist
Install 32-bit Microsoft Access ODBC driver locally.
Configure a data source in the ODBC Data Source Administrator using the Microsoft Access ODBC driver and point it to your database.
Log into your database using the Admin login ID.
Repair the database in the ODBC setup if it is in a compacted mode.
Make sure the database file is in standard archive mode and is not locked or in read-only mode.
Microsoft SQL Server Connectivity Checklist
You can connect to your server through your specific client utility.
Install Microsoft SQL Server client utilities locally. They are included on the Microsoft SQL Server CD.
Configure your server in one of the Microsoft SQL Server configuration tools, either SQL Server Client Configuration Utility or Client Network Utility.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Oracle Connectivity Checklist
You can connect to your server through your specific client utility.
Configure your server in one of the Oracle configuration tools: SQL*Net Easy Config, Net Easy Config or Net Configuration Assistant.
If you are using Net Easy Config or Net Configuration Assistant, ping the server.
Check the Windows Path variable. One of the following subdirectories is in it: ORANT\BIN, ORAWIN95\BIN, ORAWIN\BIN, ORA81\BIN.
Check the Oracle client configuration tool points to the correct TNSNAMES file: TNSNAMES.ora.
If you are using DBArtisan, you can see a list of servers from your TNSNAMES file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Sybase Connectivity Checklist
You can connect to your server through your specific client utility.
Install 32-bit Sybase client utilities locally.
For Sybase ASE 15.5, go to from cmd to the path C:\Sybase\OCS-15_0\scripts and run command: ""copylibs.bat create"" before setting up the connection to the server in the Open Client Directory Service Editor(dsedit.exe).
Check that the Sybase network library LIBSYBDB.dll is installed locally.
Configure your servers in one of the Sybase configuration tools: SQLEDIT or DSEDIT.
Check that you can ping the server from either SQLEDIT.exe and SYBPING.exe or DSEDIT.exe.
Check the Windows Path variable. The following subdirectories are in it: SYBASE\BIN and SYBASE\DLL.
Check that the Sybase client configuration tool points to the correct SQL.ini file.
If you are using DBArtisan, you can see a list of servers from your SQL.ini file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
See Also
Troubleshooting
Configuring ODBC Data Source and Target Connections
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Troubleshooting_Database_Connections_for_32_bits_Version&oldid=5268
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Troubleshooting_Database_Connections_for_64_bits_Version,Troubleshooting Database Connections for 64 bits Version,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Connecting to Database Sources and Targets
Contents
1
IBM DB2 Connectivity Checklist
2
Informix Connectivity Checklist
3
Interbase Connectivity Checklist
4
Microsoft Access Connectivity Checklist
5
Microsoft SQL Server Connectivity Checklist
6
Oracle Connectivity Checklist
7
Sybase Connectivity Checklist
8
See Also
Use the following checklists to resolve any connectivity problems you can encounter. After you have confirmed your setup, if you are unable to connect please contact IDERA's Technical Support.
This section contains the following topics:
IBM DB2 Connectivity Checklist
Informix Connectivity Checklist
Interbase Connectivity Checklist
Microsoft Access Connectivity Checklist
Microsoft SQL Server Connectivity Checklist
Oracle Connectivity Checklist
Sybase Connectivity Checklist
IBM DB2 Connectivity Checklist
Install the IBM DB2 Client Connection Software on your local machine.
Install locally the IBM DB2 client utilities. They are included on the IBM DB2 CD.
Configure an ODBC data source entry for each IBM DB2 database that you want to access from ER/Studio Data Architect.
ER/Studio Data Architect uses ODBC with IBM DB2 for connectivity purposes only. It does not use ODBC catalog calls; ER/Studio Data Architect has complete knowledge of the DB2 system catalog.
You need to have SYSADMIN, SYSCTRL, SYSMAINT or DBADM database privileges (not OS privileges) on your local machine. Only DBADM privileges can be granted on databases using the GRANT statement.
The other privileges can be assigned only through the database manager configuration.
Unlike other database platforms, local IBM DB2 data source registration requires IBM DB2 server approval.
Configure your servers in the IBM DB2 Client Configuration Assistant.
Test the connectivity in the IBM DB2 Client Configuration Assistant. You need to be able to connect to your server through your specific client utility.
The
SQLLIB\BIN
subdirectory is in the Windows Path variable.
You need to have read access to SYSIBM.SYSDATABASE and SYSIBM.SYSTABLES for DB2 z/OS SYSCAT.SCHEMATA for DB2 UDB QSYS2.SYSTABLES for AS400. You need to be able to query these tables.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Informix Connectivity Checklist
You can connect to your server through your specific client utility.
Install a 64-bit Informix ODBC driver locally.
Install and configure a 64-bit Informix SetNet locally.
Configure a data source in the ODBC Administrator using the Informix ODBC driver and point it to the correct SetNet information.
Interbase Connectivity Checklist
You can connect to your server through your specific client utility.
Install a 64-bit InterBase ODBC driver locally.
Configure a data source in the ODBC Administrator using the InterBase ODBC driver and point it to a valid InterBase database.
Microsoft Access Connectivity Checklist
Install the 64-bit Microsoft Access ODBC driver locally. This driver is included on the Microsoft Access media or from Microsoft website.
Configure a data source in the ODBC Data Source Administrator using the Microsoft Access ODBC driver and point it to your database.
Log into your database using the Admin login ID.
Repair the database in the ODBC setup if it is in a compacted mode.
Make sure the database file is in standard archive mode and is not locked or in read-only mode.
Microsoft SQL Server Connectivity Checklist
You can connect to your server through your specific client utility.
Install Microsoft SQL Server client utilities locally. They are included on the Microsoft SQL Server CD.
Configure your server in one of the Microsoft SQL Server configuration tools, either SQL Server Client Configuration Utility or Client Network Utility.
If you are using DBArtisan, you can see a list of servers in the server list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Oracle Connectivity Checklist
You can connect to your server through your specific client utility.
Configure your server in one of the Oracle configuration tools: SQL*Net Easy Config, Net Easy Config or Net Configuration Assistant.
If you are using Net Easy Config or Net Configuration Assistant, ping the server.
Check the Windows Path variable. One of the following subdirectories is in it: ORANT\BIN, ORAWIN95\BIN, ORAWIN\BIN, ORA81\BIN.
Check the Oracle client configuration tool points to the correct TNSNAMES file: TNSNAMES.ora.
If you are using DBArtisan, you can see a list of servers from your TNSNAMES file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
Sybase Connectivity Checklist
You can connect to your server through your specific client utility.
Install 64-bit Sybase client utilities locally.
Check that the Sybase network library LIBSYBDB.dll is installed locally.
Configure your servers in one of the Sybase configuration tools: SQLEDIT or DSEDIT.
Check that you can ping the server from either SQLEDIT.exe and SYBPING.exe or DSEDIT.exe.
Check the Windows Path variable. The following subdirectories are in it: SYBASE\BIN and SYBASE\DLL.
Check that the Sybase client configuration tool points to the correct SQL.ini file.
If you are using DBArtisan, you can see a list of servers from your SQL.ini file in the Server drop-down list in the Datasource Registration Wizard or in the Discover Datasource dialog box.
See Also
Troubleshooting
Configuring ODBC Data Source and Target Connections
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Troubleshooting_Database_Connections_for_64_bits_Version&oldid=5269
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials,Tutorials,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
The tutorials are intended to help you get started using our data modeling and database design solution, ER/Studio Data Architect.
After completing these tutorials, you’ll have the foundation you need to explore the many features and benefits of ER/Studio Data Architect. You will have learned how to do the following:
Create a new data model.
Work with logical and physical diagrams.
Leverage productivity-focused features such as powerful reporting engines.
Use common tasks and commands to make you more productive.
The tutorials are divided into different sessions. Do them all at once or complete them individually as your time permits.
You can use these basic tutorials as a road map of product highlights, but also to help you find your own path in exploring
ER/Studio Data Architect
.
Choose a topic to work with:
Getting Started
Logical and Physical Modeling
Using Data Dictionary Domains to Populate New Entity
Establishing Relationships Between Entities
Creating and Working with Submodels
Working with Business Data Objects
Generating Physical Models from a Logical Model
Working with Hierarchical Models
Denormalizing the Physical Model
How an Entity Maps to the Physical Model
Documenting an Existing Database
Documenting Data Lineage
Creating a Data Flow
Creating a Data Movement Rule
Defining External Source and Target Systems
Creating a Data Lineage and Transformation Visualization
Diagram Navigation and Aesthetics
Data Source Mapping
Once you have started, you can click the Help icon to find many additional resources that complement and build on many of the activities shown in this brief guide. Or use the
online help
.
See Also
Tutorial: Getting Started
Upgrading ER/Studio Data Architect
Licensing ER/Studio Data Architect
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials&oldid=7092
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:Creating_a_Data_Lineage_and_Transformation_Visualization,Tutorials: Creating a Data Lineage and Transformation Visualization,"From ER/Studio Data Architect
(Redirected from
Tutorials:Creating a Data Lineage and Transformation Visualization
)
Jump to:
navigation
,
search
Go Up to
Introduction
To create the data source or transformation input tables, expand
Data Sources > Local Models > Logical > Entities
and then drag and drop the
Broker and Investment
tables onto the Data Lineage window.
To create the data target or transformation output tables, navigate to
Data Sources  > Local Models  > GIM_DW > Tables
and then drag and drop the
BROKER_DIM
table onto the Data Lineage window.
To obtain the Transformation Insertion tool, right-click an empty space in the
Data Lineage
window and then click
Insert Transformation
.
To insert the transformation, click in the
Data Lineage
window between the source and target data sources and then right-click to drop the
Transformation Insertion
tool.
Reposition and resize the transformation object to suit your needs.
Right-click an empty space of the
Data Lineage
window and then click
Insert Data Stream
.
Tip:
Transformation and Data Flow tools are also available on the toolbar. Hover the mouse over the tools to find the tool you need.
Click an input and then click the transformation object. Repeat as many times as necessary to link all the inputs to the transformation object.
Click the transformation object and then click an output.
To define which columns should be used in the transformation and any transformation rules, double-click the new transformation to open the
Transformation Editor
.
Complete the
Transformation Editor
as required and then click
OK
to exit the editor.
Tip:
If the Inputs and Outputs do not display in the diagram as they do in the illustration above, choose
View > Diagram and Object Display Options > Transformation
and then click
Inputs and Outputs Columns
.
You are done! Now you can more easily share your ideas with your colleagues!
Tip:
Once the Data Flow is created, you can double-click it to change its name, or double click a transformation or component to change its properties.
The following describes options in the Transformation Editor that require additional explanation, for more options that are not required for this tutorial, please read the
User Guide
:
Columns
tab
Inputs
: Click the ellipsis (...) button to choose the inputs to be transformed in this task.
Outputs
: Click the ellipsis (...) button to choose the outputs resulting from the transformation.
Note:
You can delete or edit an input or output column by double-clicking the transformation in the
Data Lineage
window, clicking the ellipsis in the
Transformation Editor
and then deselecting the column you want to remove.
Definition
tab
Business
: Describe the transformation for your audience.
Code
: Enter the code that will perform the transformation, such as a SELECT statement, or a VBBasic or Java Script function or procedure.
Data Movement Rules
tab
These are the rules from the Data Movement Rules node of the Data Lineage Explorer.
Attachments
tab
Bind an external piece of information or attachment to the transformation. You can also remove an attachment from an object, override the default value of an attachment, or change the position of a bound attachment. To override the value of the attachment you have moved to the
Selected Attachments
grid, double-click the
Value
field of the target attachment. ER/Studio Data Architect opens the
Value Override Editor
or a list, depending on the attachment datatype. Attachments are created in the
Attachments
folder of the
Data Dictionary
and must be applied to the default before they will display on this tab.
See Also
Tutorial: Diagram Navigation and Aesthetics
Documenting Data Extraction, Transformation, and Load
Introduction to Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Creating_a_Data_Lineage_and_Transformation_Visualization&oldid=5272
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Creating_a_Data_Flow,Tutorials: Creating a Data Flow,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
The Data Flow organizes and encapsulates one data transformation and the source tables and columns used in the transformation to produce the target data. Multi-tiered mappings are possible and there can be multiple transformations involving different columns between two tables as illustrated below.
Create a Data Lineage Data Flow
Choose
File > Open
and select the GIMDB.DM1 diagram in the Sample Models directory.
Click the
Data Lineage
tab at the bottom of the application window.
You are prompted to create a
Data Lineage Data Flow
.
Click
Yes
.
If this is not the first time you click the Data Lineage tab after opening a diagram, from the
Data Lineage Explorer,
right-click the
Data Flows
node and then click
Create Data Flow
.
If you would like to keep your version of
GIMDB.DM1
unchanged,
'save as'
a different filename before proceeding past the Undo/Redo warning dialog.
Enter a data lineage data flow name and then click
OK
.
Note:
The name that appears in the diagram title tab at the top of the application window is appended with
: data flow
name, when you click a task in the
Data Lineage
explorer, such as
GIMDB.DM1 - Data Flow Model View: Broker*
.
The Data Flow has been created.
See Also
Tutorial: Creating a Data Movement Rule
Data Lineage Workflow
Introduction to Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Creating_a_Data_Flow&oldid=5271
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Creating_a_Data_Lineage_and_Transformation_Visualization,Tutorials: Creating a Data Lineage and Transformation Visualization,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
To create the data source or transformation input tables, expand
Data Sources > Local Models > Logical > Entities
and then drag and drop the
Broker and Investment
tables onto the Data Lineage window.
To create the data target or transformation output tables, navigate to
Data Sources  > Local Models  > GIM_DW > Tables
and then drag and drop the
BROKER_DIM
table onto the Data Lineage window.
To obtain the Transformation Insertion tool, right-click an empty space in the
Data Lineage
window and then click
Insert Transformation
.
To insert the transformation, click in the
Data Lineage
window between the source and target data sources and then right-click to drop the
Transformation Insertion
tool.
Reposition and resize the transformation object to suit your needs.
Right-click an empty space of the
Data Lineage
window and then click
Insert Data Stream
.
Tip:
Transformation and Data Flow tools are also available on the toolbar. Hover the mouse over the tools to find the tool you need.
Click an input and then click the transformation object. Repeat as many times as necessary to link all the inputs to the transformation object.
Click the transformation object and then click an output.
To define which columns should be used in the transformation and any transformation rules, double-click the new transformation to open the
Transformation Editor
.
Complete the
Transformation Editor
as required and then click
OK
to exit the editor.
Tip:
If the Inputs and Outputs do not display in the diagram as they do in the illustration above, choose
View > Diagram and Object Display Options > Transformation
and then click
Inputs and Outputs Columns
.
You are done! Now you can more easily share your ideas with your colleagues!
Tip:
Once the Data Flow is created, you can double-click it to change its name, or double click a transformation or component to change its properties.
The following describes options in the Transformation Editor that require additional explanation, for more options that are not required for this tutorial, please read the
User Guide
:
Columns
tab
Inputs
: Click the ellipsis (...) button to choose the inputs to be transformed in this task.
Outputs
: Click the ellipsis (...) button to choose the outputs resulting from the transformation.
Note:
You can delete or edit an input or output column by double-clicking the transformation in the
Data Lineage
window, clicking the ellipsis in the
Transformation Editor
and then deselecting the column you want to remove.
Definition
tab
Business
: Describe the transformation for your audience.
Code
: Enter the code that will perform the transformation, such as a SELECT statement, or a VBBasic or Java Script function or procedure.
Data Movement Rules
tab
These are the rules from the Data Movement Rules node of the Data Lineage Explorer.
Attachments
tab
Bind an external piece of information or attachment to the transformation. You can also remove an attachment from an object, override the default value of an attachment, or change the position of a bound attachment. To override the value of the attachment you have moved to the
Selected Attachments
grid, double-click the
Value
field of the target attachment. ER/Studio Data Architect opens the
Value Override Editor
or a list, depending on the attachment datatype. Attachments are created in the
Attachments
folder of the
Data Dictionary
and must be applied to the default before they will display on this tab.
See Also
Tutorial: Diagram Navigation and Aesthetics
Documenting Data Extraction, Transformation, and Load
Introduction to Data Lineage
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Creating_a_Data_Lineage_and_Transformation_Visualization&oldid=5272
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Creating_a_Data_Movement_Rule,Tutorials: Creating a Data Movement Rule,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
Data Movement rules describe how source and target tables and entities are related. You can relate source data to one or more tables and entities in the same model, the active diagram, or to tables imported from external systems. The rules defined here are used at the table level on the Data Lineage tab of the entity and table editors.
Create a data movement rule
On the Data Lineage tab, right-click Data Movement Rules and choose New Data Movement Rule.
Complete the
Data Movement Rule
editor as required and then click
OK
to exit the editor.
Tip:
Once created, you can edit the Data Movement rule by double-clicking it to launch the
Data Movement Rule
editor.
The following describes options that require additional explanation:
Rule Information
tab
Rule Name
: Enter a name that indicates the operation and objects acted on, depending on the specifics of your binding definition.
Rule Type
: Select a generic movement rule type that best describes the data movement.
Rule Text
: Document your data movement plan here, perhaps adding instructions or contingency plans.
Binding Information
tab
Select the object classes and/or specific objects to which you want to bind this attachment. You can override this setting using the
Data Lineage
tab of the entity or table editor.
See Also
Tutorial: Defining External Source and Target Systems
Assigning Model Data Movement Properties
Data Lineage Workflow
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Creating_a_Data_Movement_Rule&oldid=5273
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Creating_and_Working_with_Submodels,Tutorials: Creating and Working with Submodels,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
Now that you have a general understanding of how to build logical models from the ground up in ER/Studio Data Architect, it is important to understand how to work with an important navigation feature of ER/Studio Data Architect, called Submodels. Submodels and nested submodels are designed to break down large, complicated views of a data model in order to focus on a specific area.
An important aspect of Submodels to understand is that any changes made in the submodel, other than layout, color, display settings, notation or similar items which can be unique to the submodel, will occur automatically in the Main Model view. In other words, change or add an attribute to an object in a Submodel and the change is automatically propagated to its Main Model counterpart.
Close the current sample model, and open a more mature model. Use this exercise to learn more about submodeling.
Choose
File > Open.
Select
Orders.dm1
and then click
Open
.
To preserve this sample model for future use, choose
File > Save As
and then save the
Orders.dm1
file with a new name.
In this exercise, we will be modifying this model.
Collapse the folders in the
Data Model
tab of the Data Model Explorer to look like the image below:
In the
Orders.DM1
sample model, there are no physical models. This model includes several submodel folders that help to describe the logical model:
Main Model
– This is the entire collection of all logical objects in the Orders.DM1 file. Note the absence of the magnifying glass on the folder icon which designates it as the main model.
Bill of Materials
through
Shopping Cart
– These are submodels, which are smaller collections of entities derived from the Main Model that help to describe specific areas of the Main Model free from other entities.
Alternate Key
through
Primary Key
– These are nested submodels, which can go ‘n’ levels deep and are literally submodels of submodels.
Feel free to explore. Click the plus sign (+) to expand these folders.
Let’s create a submodel with all the objects related to the
Orders.DM1
Address components.
To make a new submodel, navigate to Logical Main model and with the
CTRL
key depressed, click the objects in the Data Model Explorer, as seen in the image below.
Note:
Any objects selected in the Data Model Explorer will also be selected on the Data Model Window as well (also seen here). You can also select entities by lassoing them on the Data Model Window.
With the entities selected, choose
Model > Create Submodel
.
Below
Create Submodel
, enter
Address Components
as the name for the submodel.
Click
OK
.
ER/Studio Data Architect creates the
Address Components
submodel.
What do the results look like and how do I navigate to the submodel?
Once created, you will see the new submodel listed in the Data Model Explorer, denoted as a submodel by the magnifying glass over its folder, as in the case with Bill of Materials and the other submodels.
See Also
Tutorials: Working with Business Data Objects
Retrieving a Repository Diagram, Submodel or Named Release
Creating and Editing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Creating_and_Working_with_Submodels&oldid=6053
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Data_Source_Mapping,Tutorials: Data Source Mapping,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Tutorials
Steps for using the Data Source Mapping:
Create or open a diagram
Connect and Publish on Team Server
Log in to Team Server from ER/Studio Data Architect:
To log in to Team Server, choose
Repository > Team Server Log In
.
Complete the log in dialog and then click
OK
.
Right click on the physical model that you want to map and select
Data Source Mapping
option.
Relate the model with the data source
.
Edit any table on the physical model related and go to
Where use
tab. Or right click on the table and select
Where use
option.
The
Where Used
tab/dialog shows the data sources related. These are potential database instances that could be impacted if the table changes.
See Also
Data Model Explorer
Setting Repository and Team Server Options
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Data_Source_Mapping&oldid=6090
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Defining_External_Source_and_Target_Systems,Tutorials: Defining External Source and Target Systems,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
Data sources can originate from models in the active diagram (local models) or from external sources that are either imported into the active diagram or created on the Data Lineage tab. A data source can be imported from
*.dm1
files,
*.dt1
files, database or from SQL files, flat files, and other common application files. The following describes how to import metadata from an external source.
Note:
Source data imported through the Data Lineage tab only includes information such as table and column name, datatype, nillability, primary key, and column definitions. To obtain more details, reverse engineer the database or import it into ER/Studio Data Architect using the Metadata Wizard.
Import external source or target data
From the Data Lineage tab, expand the Data Sources node.
Right-click
Other Sources
and choose
Import New Source
.
Complete the
Import Source
wizard as required and then click
Finish
to import the source.
The new source will appear under the
Other Sources
node.
The following describes options that require additional explanation:
Page 1 - Please select where you would like to import the source metadata from
From a Repository based DM1 file
: Lets you obtain source from data models and Named Releases managed within the ER/Studio Repository. When you select this option, ER/Studio Data Architect opens the Repository Operation Status dialog box and the
Get From Repository
dialog box. This process connects to the current Repository Server defined in the Repository settings. The
Import Source
wizard automatically gets the diagram.
From an SQL file
ER/Studio Data Architect imports the SQL file.
From a live database:
If you select this option, a page appears where you can select the database and connection type. The connection type can be either ODBC or Native/Direct Connection. For information about connecting to databases, including troubleshooting information, see
Connecting to Database Sources and Targets
.
Comparison Quick Launch
: The Compare Quick Launch data is saved as an *.rvo file. For information on using the
Quick Launch
option in the wizard, see
Saving and Using Quick Launch Settings
.
Page 5 - Results
Current and Target Model Display Grid
: Between the Source and Target models is a Resolution column. The default merge decision is Merge the data into the new source file. You can click on any item in the
Resolution
column to enable the decision list. If you want to change the decision, click the list and then click the new resolution. When you change the default resolution of an object, the decisions of their dependent properties and objects are automatically updated. You can also click the category folders, like the
Tables Resolution
column to change all the decisions for all the underlying objects in that object category. And, you can use the
CTRL
key to select multiple items, and then right click to enable the decision list.
SQL Difference
: To enable the SQL Difference utility, select any difference that is a long text field, such as a Definition, Note, or DDL, and then click SQL Difference to view the differences between the SQL of the models. This utility only allows you to view the differences; difference resolutions are performed on the
Results
page of the
Compare and Merge Utility
.
Filter Report on Results:
Create a report of the source content and your chosen resolutions. You can choose to create an HTML or an RTF report.
Tip:
You can modify the default display using the options at the bottom of the page.
See Also
Tutorial: Creating a Data Lineage and Transformation Visualization
Importing a Model from External Metadata
Attaching External Documents to the Data Model
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Defining_External_Source_and_Target_Systems&oldid=6073
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Denormalizing_the_Physical_Model,Tutorials: Denormalizing the Physical Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
ER/Studio Data Architect comes equipped with denormalization wizards to help you optimize the physical design once the physical model is generated. The wizards help automate the process and keep the ties between the physical tables and the logical entities.
The active, denormalization wizards available depend on which tables are selected in the physical model when you select
Denormalization Mapping
. For example, if two tables that are related to each other are selected, the valid operations would be
Rollups
or
Rolldowns
.
When only one table is selected, the option to split the tables becomes available. The
Table Merge
option is available when two unrelated tables are selected.
Let’s walk through an example of a denormalization operation using the generated physical model in a previous session of this tutorial. We may want to reduce the overhead on the Custmr table by splitting it into two physical tables, Custmr_East and Custmr_West. Splitting the table can reduce the query time and provide opportunities to store the tables at different locations which could further reduce lookup time.
Before the operation, the Custmr table should look like:
Open the Orders1.dm1 model you modified and saved in the last session.
In the Data Model Explorer, right-click the
Custmr
table in the Physical Model.
Choose
Denormalization Mapping > Horizontal Splits
.
Notice that since only Custmr is selected, the only possible mappings are vertical and horizontal splits.
The
Horizontal Table Split Wizard
launches.
On Page 1, type
2
for the number of splits.
On Page 2, rename Custmr1 and 2 to
Custmr_East
and
Custmr_West
respectively.
On Page 3, click
Next
.
We will keep all the relationships.
On Page 4, type a name and definition for the denormalization operation, and then click
Finish
.
Finished! After the split the Custmr table will be two physical tables that look like this:
The two tables are identical except for the name.
You can selectively choose which attributes are included in the resultant tables by using a vertical split.
The denormalization mapping is stored with each of the tables.
You can use the denormalization information to undo the operation or see the history of what happened. ER/Studio Data Architect tracks the before and after states of these operations. This comes in handy in the next section where we discuss the
Where Used
analysis that can be performed between the logical and physical models.
See Also
Tutorial: Finding out How an Entity Maps to the Physical Model
Optimizing Query Performance on the Physical Model (Denormalizing the Physical Model)
Upgrading Diagrams with Denormalization Mappings
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Denormalizing_the_Physical_Model&oldid=6042
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Diagram_Navigation_and_Aesthetics,Tutorials: Diagram Navigation and Aesthetics,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
To assist with the creation of presentation-quality diagrams that are easy to navigate and are aesthetically pleasing, ER/Studio Data Architect offers progressive diagram Auto Layout and Navigation utilities that also help you to clean up complex diagrams. Modelers should spend time solving complex database or business data model problems, not forcing boxes and lines to look a certain way.
Navigating the Diagram
To demonstrate some of ER/Studio Data Architect’s layout and navigation utilities, we will import a sample SQL script provided with ER/Studio Data Architect.
Close any files you have open.
Choose
File > New
.
Select
Import Model From:
and then in the import list, choose
SQL File
, then click
Import
.
Note:
The ERX File choice enables you to import ERwin 3.5.2 ERX files. Selecting
From External Metadata
launches the MetaWizard to import from alternative sources.
The
Import Database SQL File
dialog appears:
To the right of
Select a Database SQL File
click the folder icon, click
Sample DDL (DB2 7.x for OS390).SQL
, and then click
Open
.
The full path to this file is
C:\Program Files\IDERA\ERStudio Data Architect 18.x\SQLCode
.
In the
Select the target database platform
list, click
IBM DB2 UDB for OS /390 9.x
.
Click
OK
.
Finished! Once the SQL Script is finished importing, the following items will assist you in leveraging a variety of Auto Layout and Navigation Features.
Layout and Alignment Toolbar
: Use any of the four Auto Layout styles to change the layout of the diagram with the click of a button. The auto layout styles are all entirely customizable styles. You can also customize the diagram layout via the Layout Properties pages that can be launched by clicking
Layout > Layout Properties
. In addition, you can have multiple layout styles in a model. Select some object and then choose the layout style. If you don’t have any objects selected when you click the layout button, the layout style chosen will be applied to the entire model.
Data Model Explorer
: Click on any object in the
Data Model
explorer and it will automatically be selected in the diagram and focused in both the
Zoom Window
and
Overview
window.
Overview Window
: Use this window as a thumbnail of your model to pan the entire model or zoom in and out. It can also pan and zoom the diagram if grabbed or sized. If the
Overview
window is not already visible, press
F9
to activate it.
Zoom Window
: Use this window as a magnifying glass to enlarge any diagram objects under your mouse cursor. You can also press
SHIFT+F8
to freeze the zoom window to keep a single object frozen while you continue to pan around the diagram. If the
Zoom
window is not already visible, press
F8
to activate it.
Diagram Aesthetics
One of the tremendous benefits of building data models is the wide range of audiences that can realize value from them. Part of this relies on what information is displayed in the diagram. Depending on the audience you may want to limit or expand what is displayed. For example, developers may benefit from looking at a model that displays data type, null option, and unique and non-unique index information, while business analysts may just need the entity name and the definition. ER/Studio Data Architect offers many display properties that can be customized exactly for this purpose.
Continuing with the previous section, we will use the DB2 model that was built to demonstrate some of the ways to customize the appearance of the model.
We will use the Diagram and Object Display Options dialog on the Diagram toolbar to further customize the view of the logical and physical models.
You can use the Colors & Fonts tool to customize the look and feel further of each model.
Setting the Logical Model Display
Select the
logical model
and then on the Diagram Toolbar, click the
Diagram and Object Display Options
tool.
In the
Diagram and Object Display Options
dialog, click the
Entity
tab, and then in the
Display Level
area, select
Entity
.
Click
OK
.
Note:
Only entity names are displayed for each entity. You may also want to re-layout the diagram since the entity sizes have changed.
Setting the Physical Model Display
Select the
physical model
and then choose
View > Diagram and Object Display Options
.
In the
Diagram And Object Display Options
dialog, click the
Table
tab.
In the
Display Level
area, select
Physical Attribute Ordering
.
In the
Available Options
area, select the specific properties you want to display.
Click
OK
.
The model should now display more details for the physical model, as seen below.
Note:
Since the sizes of the objects changed, you may want to change the model layout using one of the ER/Studio Data Architect advanced layout engines. You can also customize the default display properties for new models by choosing
Tools > Options
, and then selecting the desired options on the
Display
tab.
See Also
Tutorials: Data Source Mapping
Wiki Home
User Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Diagram_Navigation_and_Aesthetics&oldid=6670
""
Category
:
Data Templates"
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Documenting_Data_Lineage,Tutorials: Documenting Data Lineage,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
The Data Lineage feature of ER/Studio Data Architect enables you to document the movement of data from point A to point B (and any intermediate steps in between). This movement is sometimes referred to as Extraction, Transformation and Load (ETL). Points A and B can be anything from flat files, high-end databases such as Oracle and DB2, XML, Access databases, and Excel worksheets. This is sometimes referred to as source and target mapping. A model produced in ERStudio can represent any point along the way. Data Architects need the ability to specify the
source
or
target
of data down to the column-level. Along with the metadata that defines the source and target mapping are rules for how the data is manipulated along the way.
The next section will help you document the data lineage of your systems.
It is comprised of the following tasks which correspond to the general ETL workflow:
Creating a Data Flow
Creating a Data Movement Rule
Defining External Source and Target Systems
Creating a Data Lineage and Transformation Visualization
See Also
Tutorial: Creating a Data Flow
Data Lineage Workflow
Documenting Data Extraction, Transformation, and Load
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Documenting_Data_Lineage&oldid=5278
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Documenting_an_Existing_Database,Tutorials: Documenting an Existing Database,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
One of ER/Studio Data Architect’s most powerful applications is that of a documentation generator to communicate complex databases and associated metadata to the Enterprise. ER/Studio Data Architect is equipped with extensive report generation capabilities:
HTML Report Generation
: Instantaneous generation of an HTML-based Web site designed to provide simple navigability through data models and model metadata using standard browsers such as Google Chrome or Mozilla Firefox.
RTF Report Generation
: Instantaneous documentation generation compatible with applications like Microsoft Word.
In the exercise below, we will reverse-engineer an existing database and generate an HTML report for distribution and navigation to those who depend upon the information about the data model, but who may not be permitted to connect to the database for security or organizational reasons.
Prerequisite
This exercise assumes that you can connect to an existing database in order to document it. If you cannot connect to an existing database, you can still generate documentation from the installed sample models; skip steps 1 through step 8 below which relate to in reverse-engineering and begin at step 9 after opening a sample model included with ER/Studio Data Architect.
Click
'
File > New'
.
Select
Reverse-engineer an existing database
.
Click
Login
. You can reverse engineer the database from either an ODBC datasource or via Native RDBMS client connectivity. In this example, Native Connectivity to Microsoft SQL Server will be demonstrated.
Type the relevant connectivity information such as the data source name, and user name and password, and then click
Next
.
Walk through the
Reverse Engineer Wizard
selecting the objects, options, and layout preferences for the model.
Note:
A new feature using ER/Studio Team Server data sources is available in the Reverse Engineer Wizard. Please see
ER/Studio TS documentation
for more details.
Continue through the wizard to select layout styles and other preferences.
Click
Finish
and ER/Studio Data Architect reverse engineers your database!
Once reverse engineering of your database is complete, we will generate a complete HTML report of the database for others in your organization to review.
In the Data Model Explorer, select the
Physical Main Model
.
Choose
Tools > Generate Reports
.
On the first page of the wizard, for the report type, select
HTML
.
On page 2, click
Select All
in both areas of the
Diagram
tab.
Click
Select All
in both areas of the
Data Dictionary
and the
Procedures
tabs, and then click
Next
.
Note:
The tabs available on page 2 depend on what objects are supported by the database platform of the selected model. Some databases support more database objects than Microsoft SQL Server 2005, such as Oracle11g and IBM DB2 LUW 9.x for which there are also tabs on this page for procedures, functions, triggers, packages, and tablespaces. If the model was previously denormalized, a
Denormalization Mappings
tab would also appear.
On page 3, in the
Submodel Image Options
area, click
Select All
.
Tip:
In the
Logo and Link Options
, you can choose to replace the default logo in favor of your own corporate logo (and Hyperlink).
Because HTML formatting can be included in object definitions, you can also choose to preserve the formatting specified on the
Definitions
tab of the various object editors.
Click
Next
to advance to Page 4 of 4, and then click
Finish
.
ER/Studio Data Architect then begins the report publication process and launches the default browser so you can review the report.
Finished!
Start navigating the report via your browser. Navigation will perform exactly as it does when you are using ER/Studio Data Architect! Expand the tree to find Model Image and click on it.. You will see a read-only version of your data model. Use the Explorer to navigate to any metadata you want or select the entities and relationships in the model image to jump to their information.
Conclusion
In this session, you learned how to:
Connect to and reverse-engineer an existing database with ER/Studio Data Architect.
Document a database in seconds by using ER/Studio Data Architect’s automatic HTML documentation publication facility.
See Also
Tutorial: Documenting Data Lineage
Generating RTF and HTML Model Reports
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Documenting_an_Existing_Database&oldid=7491
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Establishing_Relationships_Between_Entities,Tutorials: Establishing Relationships Between Entities,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
On the Insert ribbon, click
Relationships > Non-Identifying, Mandatory Relationship
.
Tip:
You can change the model notation by choosing
Model > Model Options
, and then selecting another notation option in the Notation area.
To establish a relationship between Customer and Order, click the parent entity,
Customer
and then click the child entity,
Order
.
Note:
ER/Studio Data Architect supports sound design practices by automatically propagating the primary key, from parent to child entities. If there are candidate alternate keys that should also be propagated to the child, in the
Relationship Editor
you can choose all available parent entity keys in the Parent Key list. Deleting a relationship will remove a non-native propagated attribute. However, if you want to keep the child columns of the relationship or foreign constraint, when you delete the relationship you can check the Make Foreign Keys Native option. In this case, if the relationship between Customer and Order is deleted, the CustomerID will be left in the Order entity.
You can edit the relationship properties by right-clicking the relationship, and then selecting
Edit
. You can set a variety of information about the relationship in Properties, or you can forward and reverse phrases. To set phrases, click
Phrases
, and then set the forward and reverse relationship phrases.
Note:
ER/Studio Data Architect lays out the phrases as sentences to confirm the context of the relationship.
Create two relationships between Order and Address. Where you have multiple relationships between entities, the propagated foreign key is identical. When you create a second relationship between two entities, ER/Studio Data Architect opens a dialog to ask you to set role names which will generate unique foreign keys.
Set the Logical Rolename and Physical Name to
Shipping Address
.
See Also
Tutorial: Creating and Working with Submodels
Reusing Attribute Definitions Using Domains
Ensuring Consistent Domain Definitions Using User Datatypes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Establishing_Relationships_Between_Entities&oldid=6002
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Establishing_Relationships_between_Entities,Tutorials: Establishing Relationships Between Entities,"From ER/Studio Data Architect
(Redirected from
Tutorials: Establishing Relationships between Entities
)
Jump to:
navigation
,
search
Go Up to
Introduction
On the Insert ribbon, click
Relationships > Non-Identifying, Mandatory Relationship
.
Tip:
You can change the model notation by choosing
Model > Model Options
, and then selecting another notation option in the Notation area.
To establish a relationship between Customer and Order, click the parent entity,
Customer
and then click the child entity,
Order
.
Note:
ER/Studio Data Architect supports sound design practices by automatically propagating the primary key, from parent to child entities. If there are candidate alternate keys that should also be propagated to the child, in the
Relationship Editor
you can choose all available parent entity keys in the Parent Key list. Deleting a relationship will remove a non-native propagated attribute. However, if you want to keep the child columns of the relationship or foreign constraint, when you delete the relationship you can check the Make Foreign Keys Native option. In this case, if the relationship between Customer and Order is deleted, the CustomerID will be left in the Order entity.
You can edit the relationship properties by right-clicking the relationship, and then selecting
Edit
. You can set a variety of information about the relationship in Properties, or you can forward and reverse phrases. To set phrases, click
Phrases
, and then set the forward and reverse relationship phrases.
Note:
ER/Studio Data Architect lays out the phrases as sentences to confirm the context of the relationship.
Create two relationships between Order and Address. Where you have multiple relationships between entities, the propagated foreign key is identical. When you create a second relationship between two entities, ER/Studio Data Architect opens a dialog to ask you to set role names which will generate unique foreign keys.
Set the Logical Rolename and Physical Name to
Shipping Address
.
See Also
Tutorial: Creating and Working with Submodels
Reusing Attribute Definitions Using Domains
Ensuring Consistent Domain Definitions Using User Datatypes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Establishing_Relationships_Between_Entities&oldid=6002
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Finding_out_How_an_Entity_Maps_to_the_Physical_Model,Tutorials: Finding out How an Entity Maps to the Physical Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
Now that we have performed a denormalization operation, the logical entity, Customer, essentially has become two physical tables, Custmr_East and Custmr_West. The ties between the logical and physical models are not lost. ER/Studio Data Architect allows you to see what Customer in the logical model maps to in the DB2 physical model.
Let’s take a look at the Customer entity in the logical model.
In the Data Model Explorer, navigate back to the Customer entity in the Logical model.
To start the Entity Editor, double-click the
Customer
entity.
Click the
Where Used
tab.
Once the tree is expanded, you can see the lineage of what has happened to the object. Notice that
Custmr_East
and
Custmr_West
are listed as physical implementations of the
Customer
entity. The denormalization mapping object shows how the end result was achieved.
The
Where Used
tab also displays the submodel usage of a particular entity within the logical or physical model. This allows you to see which business areas the entity belongs to.
Note:
Where Used
information is also available for attributes and columns.
Conclusion
In this session, you have seen how incredibly quick and easy it is to:
Build a logical data model from scratch.
Create a new submodel view to understand how to model on specific parts of a larger Main Model.
Generate a physical model from a logical database in preparation for building a new database.
Denormalize objects in the physical model.
View the mappings between the logical and physical models using the Where Used tab.
See Also
Tutorial: Documenting an Existing Database
Developing the Logical Model
Developing the Physical Model
Synchronizing Physical and Logical Models
Generating a Script File or Database
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Finding_out_How_an_Entity_Maps_to_the_Physical_Model&oldid=5281
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Generating_Physical_Models_from_a_Logical_Model,Tutorials: Generating Physical Models from a Logical Model,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
ER/Studio Data Architect can generate as many physical models from a single logical model as desired. There are many ways to leverage multiple physical models in ER/Studio Data Architect to help the design process. Examples of how multiple physical models are used are:
Managing change in an existing application
: Maintain independent development, test, and production physical model diagrams that represent specific databases.
Migrating database applications
: Use ER/Studio Data Architect as an analysis and design hub for migrating database applications. Manage a physical model of the legacy source database application in addition to its new target physical model, which can be for an entirely new DBMS than originally maintained in the legacy database.
Let’s generate a new physical model from a logical model in order to build a database. We will use the
Orders.DM1
sample model.
Open your version of the Orders.DM1 sample model.
Tip:
Use the steps shown in the last session to do so.
Select the
Main Model
, and then click
Model > Generate Physical Model.
ER/Studio Data Architect invokes a step-by-step wizard to walk you through the process of generating a DBMS-specific physical model.
Name the new physical model,
DB2 Physical Model
, and then select
DB2 UDB for OS/390 11.x
as the target DBMS to generate.
Continue through the Generate Physical Model wizard, which prompts several questions about how you want your physical model to be generated.
Note:
The wizard prompts you to customize items such as individual object selection, index assignment, default storage parameters, resolution of many-to-many relationships that may be in the logical model, and naming conventions. In Step 3 of the wizard, you can add prefixes or suffixes to the object name. For example, it can be useful to add an indicator of the object type in the name. A DBMS-specific validation check is also provided in this wizard.
Tip:
The
Quick Launch
can store common settings so that an operation can be reused on this model or on any other models. You can reuse the settings on another model by choosing the
Use File-Based Quick Launch Settings
option when saving the Quick Launch information on the last page of the wizard.
To generate the new Physical Model, on the last page of the wizard, click
Finish
.
Now that a physical model has been generated from the logical model, feel free to navigate to specific objects via the Data Model Explorer, such as the CUSTMR table selected here. Double-click and view the physical details of the object such as DDL, Indexes, Partitions, and Storage.
See Also
Tutorial: Working with Hierarchical Models
Developing the Physical Model
Transforming Model Objects from Logical to Physical
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Generating_Physical_Models_from_a_Logical_Model&oldid=7734
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Getting_Started,Tutorials: Getting Started,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
Interface Features
ER/Studio Data Architect has an enhanced user interface that is similar to Microsoft Windows with intuitive icons.
The following image names and describes the functionality of some key elements of the ER/Studio Data Architect user interface.
For more information about enhanced UI features, please see the corresponding numbers below:
Sophisticated diagram auto-layout tools provide single-click clean-up of diagram objects.
Design elements and other often-used functions are dockable for quick access.
Data Model Explorer displays information about logical and physical models, submodels, and nested submodels.
Repository object status icons display real-time user access information.
The Overview Window lets you navigate large Data Models.
The Zoom Window helps you focus on the details of a specific area of a large, reduced diagram.
Starting to Data Model with ER/Studio Data Architect
On the
Windows Start > Programs
menu, choose
IDERA > ER/Studio Data Architect
.
Choose
File > New.
As you can see in the
Create a New Model
dialog, there are a number of ways to begin modeling with ER/Studio Data Architect:
Draw a new data model
. Build a new design from the ground up by drawing a new data model.
Reverse-engineer an existing database
. Build a data model from an existing database through live reverse engineering.
Import Model From
. Import designs from other modeling products such as erwin or SQL files.
Tip:
You can select an initial layout style for your model before the SQL import takes place.
For this example, use the default
Draw a new data model
, and then select
Relational
for the model type before clicking
OK
.
ER/Studio Data Architect now resembles the following image:
See Also
Tutorial: Logical and Physical Modeling
Application Interface
Upgrading ER/Studio Data Architect
Uninstalling ER/Studio Data Architect
Licensing ER/Studio Data Architect
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Getting_Started&oldid=7749
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Logical_and_Physical_Modeling,Tutorials: Logical and Physical Modeling,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
ER/Studio Data Architect supports both logical (non-DBMS or technology-specific) modeling and physical (DBMS-specific) modeling. ER/Studio Data Architect is designed to allow organizations the flexibility to analyze and design a business problem or application logically and generate as many different physical interpretations from the logical model as required.
Multiple physical models can be generated from the logical model for the same DBMS (for example, Oracle) or other DBMSs (such as Oracle, SQL Server and DB2). Generating logical and physical models will be discussed in detail in the following sessions.
Using Data Dictionary Domains to Populate New Entity
Establishing Relationships Between Entities
Creating and Working with Submodels
Working with Business Data Objects
Generating Physical Models from a Logical Model
Denormalizing the Physical Model
Finding out How an Entity Maps to the Physical Model
See Also
Tutorial: Using Data Dictionary Domains
Logical Design Concepts
Data Modeling Concepts
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Logical_and_Physical_Modeling&oldid=6664
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Using_Data_Dictionary_Domains_to_Populate_New_Entity,Tutorials: Using Data Dictionary Domains to Populate New Entity,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
As instructed in
Getting Started
, you have chosen to draw a new data model to begin a logical model from the ground up. Before we begin to add entities, we will populate ER/Studio Data Architect with some sample domains.
What is a Domain?
Domains are simply re-usable Attributes/Columns and are valuable tools in establishing standards. They allow data modelers to create a data element once (such as an ID field you require all of your entities to leverage as its primary key) which has the same data type, definition, rule, and constraint no matter where the data element is distributed and bound. Read more about Domains in
ER/Studio Data Architect User Guide
.
Choose
Tools > Import Data Dictionary.
Next to the
File Location
box, click the ellipsis and browse to the
Sample Models
folder, which is located at
C:\ProgramData\IDERA\ERStudioDA_x.x\Sample Models
.
Double-click the
Orders.dm1
sample model and then click
OK
.
This model contains a pre-populated, sample data dictionary.
Note:
Under
Resolve Imported Objects with Duplicate Names
, you can choose between a couple of options to determine how the dictionary objects are imported. This is important when importing into a diagram that already has dictionary objects in it.
Once opened, you will see that the ER/Studio Data Architect Model Explorer has automatically switched to the
Data Dictionary
tab to allow immediate drag-and-drop access to domains.
Now, to add an entity to the Data Model Window, click the
Entity
tool on the
Insert
ribbon, and then click in the Data Model Window to drop the entity.
Tip:
The cursor will change to an entity symbol once the
Entity
tool is clicked, so you can click to drop as many entities on the Data Model Window as you want.
Right-click to return your mouse to the selection cursor.
Right-click the entity and click
Edit Entity
to open the
Entity Editor
. In
Entity Name
, type
Customer
, replacing the default entity name, and then click
OK
.
In the Domains folder of the Data Dictionary tab, locate the
ID
domain in the
Numeric Domains
folder.
Click the
ID
domain (do not release your mouse), drag it onto the
Customer
entity, and then release it just below the entity’s name, which is the entity’s Primary Key field.
Tip:
You can edit or rename an entity and insert, edit or rename attributes by holding down the
Shift
key and then clicking the name or attribute. Pressing the
Tab
key cycles between the entity’s name, and primary key and non-primary key fields. After naming the field, press
Return
to insert a new field.
Tip:
If you need to zoom in on the entity to read the entity name and attributes, press
F8
to view the
Zoom Window
, then use the scroll bars of the
Zoom Window
to center the entity on the Data Model Window. Press
Shift
while rolling the mouse wheel forward to increase the view magnification. You can use the
Pan
tool to reposition the view to better see the entity.
Edit the entity again and in the Entity Editor, click
ID
, the name of the attribute we just created from the ID domain, and change its Attribute Name and Default Column Name properties to
CustomerID
, as seen in the illustration above. Then click
OK
.
Repeat the process in step 7 and step 8 to populate the Customer entity with the following domains:
Name
and
Phone
from the
Property Domains
folder
Address
,
City
,
State
,
Zip Code
from the
Address Domains
folder.
Drop another entity on the
Data Model Window
and call it
Order
.
Drag the ID domain onto the Order entity’s Primary Key field, change the Attribute and Column name to
OrderID
.
Right-click the Order entity and select
Comments
.
Enter some text in the
Comments
editor, click
Add
and then click
OK
. You can add comments to any database object in the same manner. This can be very useful when you want to provide feedback on a model to other users.
Save your data model. We will use it in the next session of this tutorial.
See Also
Tutorial: Establishing Relationships Between Entities
Ensuring Consistent Domain Definitions Using User Datatypes
Reusing Attribute Definitions Using Domains
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Using_Data_Dictionary_Domains_to_Populate_New_Entity&oldid=5998
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Working_with_Business_Data_Objects,Tutorials: Working with Business Data Objects,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
The logical model’s primary purpose is to communicate the content of existing data assets and requirements for new data assets with the consumers of data assets. The entity object does this as well, but has the job of an intermediary with the physical data model. We also have the Business Data Object (BDO). This object type allows us to group entities that cover a particular topic or business concept to make the logical model easier to understand. Use this exercise to learn more about Business Data Objects.
In the Logical model, look at the group of entities around the text ""Customer."" These entities all apply to the concept of Customer and can be grouped into a BDO.
Create a Business Data Object by accessing the Insert ribbon and clicking
Objects > Business Data Object
, and then clicking in the model area to place the BDO. Be sure to put the object near the Customer information for ease of grouping in the next step.
Rename the BDO to ""Customer,"" and then resize the BDO so that it covers the following entities:
Customer
Customer Phone
Phone Role
Customer Address
Select these entities inside the BDO, and then right click
Add to Business Data Object
.
Open the Business Data Object Editor by double-clicking the BDO. Notice that all the entities are included in the list.
Select the
Customer
entity, and then click
Set Anchor
. This states that the primary entity for the BDO ""Customer"" is the entity ""Customer.""
Optional
. Set a definition for the BDO as well as a physical name.
Optional
. Add attachments.
Tip:
You can simplify the diagram by double clicking the minus sign to hide the entity content. Whenever you move the BDO, the entities move with it. You also can see the BDO and its contents listed in the tree view on the left.
See Also
Tutorial: Generating Physical Models from a Logical Model
Retrieving a Repository Diagram, Submodel or Named Release
Creating and Editing Submodels
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Working_with_Business_Data_Objects&oldid=6050
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Tutorials:_Working_with_Hierarchical_Models,Tutorials: Working with Hierarchical Models,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Introduction
ER/Studio models information using Entity Relation Diagrams. You can convert these diagrams directly into relational models that represent relational databases. Data assets such as MongoDB, JSON, and Google BigQuery have hierarchical structures. These hierarchical structures also employ denormalization to improve performance with repeated substructures.
Data Architect converts relational logical models to denormalized hierarchical structures and vice versa using feature wizards including Generate Database, Reverse Engineer, Import from File, and Compare/Merge. To make this process repeatable, logical data models are enhanced to include additional information to help with this process.
Specifying Containment in the Logical Model
In the following logical data model diagram, notice that some lines display
Parent contains Child
or
Child contains Parent
. This allows you to specify how objects are embedded in any hierarchical physical models generated from it. This also drives both the Generate Physical Model and Compare/Merge wizards.
You can set two properties in the Relationship Editor to control this relationship.
Containing
. Select this option to contain one object within another as a Nested Object.
Parent is Container
. Select this object to denote the direction of containment.
Generating the Physical Model (MongoDB)
The Generate Database wizard differs for each target platform, but for MongoDB models, there are the options as shown in the following image.
You can remove propagated Foreign Key properties from generated objects or make them as native fields, which may be useful later to connect objects together elsewhere via code.
The
How should Collections be created from Logical Entities
option lets you choose how you want to create Collection. The following options are available:
Convert All Entities
. Use this option to make all logical entities into Collections.
Convert Entities with PKs
. Use this option to make all logical entities with primary keys into Collections.
Leave All as Nested Objects
. Use this option to make all logical entities into Nested Objects.
Convert if Not Contained
. Use this option to take a rules-based approach as detailed below.
Understanding the Convert if Not Contained option
If you select
Convert if Not Contained
, the generator wizard uses the following steps:
For each entity in the logical model, create an object. Primary key attributes become standard fields.
Logical relationship lines generate either a referencing relationship or a containment relationship.
For each generated object, the wizard reviews whether the object has a containing relationship from any other object. If it does, it becomes a Nested Object. If not, it becomes a top-level Collection.
All Collections are given a surrogate primary key ""_id"".
For referencing relationships, primary keys are propagated.
For the above logical model, we would generate the following model using this logic.
Notice the following traits in the above model:
Note the borders of the objects. Collections have square corners and Nested Objects have rounded corners.
We created four Collections:
book
,
patron
,
library
, and
publisher
. The other entities have generated Nested Objects.
The entities
section
and
chapter
are nested inside
book
.
address
is fully denormalized as nested objects inside
publisher
,
library
, and
book
.
checkout
is nested inside
book
, but retains references to the Collections
library
and
patron
.
Understanding why you didn't get what you wanted
Once you generate your physical models, you will see a structure of objects with Collections and Nested Objects based on the rules used by the wizard. If you don't get what you expect, you have the following options:
Modify the Containment properties in the logical model and use the Compare/Merge between the logical and physical to propagate the changes.
Modify the Physical model directly. Use the Switch Object Class tool on the Insert tab of the ribbon bar to convert a Collection to a Nested Object and vice versa. You can then propagate changes back to the logical model.
Using the Rolled-Up View
The object view is useful to understand the reuse of objects and to edit the cardinality to Nested Objects. You can also select a ""rolled up"" rendering of the model that makes it easier to visualize the hierarchical nature of the model.
To access this view
On the Diagram tab of the ribbon bar, select
Diagram/Display Options
.
On the Object tab, select
Roll Up Contained Objects
.
The MongoDB model we generated above now looks like this:
Notice that the Nested Objects are rolled up into the parents.
Rapidly creating a Hierarchical Physical Model
You may want to bypass the process of creating a logical model and jump straight to creating a physical model. You can use compare/merge functionality to later create your logical model.
To rapidly create a Hierarchical Physical Model
Create a new model, and then add an entity into the logical model.
Generate a Physical model for the MongoDB platform.
Insert objects onto the physical model directly using the Insert tab on the ribbon bar.
Insert fields directly into the objects just using the keyboard by pressing Shift while right-clicking inside of the object. This action opens a text box.
Type the name of the field, and then press the Enter key. A dialog appears allowing you to select the data type of the field.
Select string, and then press Enter to create the field. A new text box appears.
Type a name, and then press Enter.
In the datatype selection box, select
Object
and select the array checkbox.
Press Enter. A dialog appears allowing you to create a new reusable Nested Object.
Click
Yes
.
In the next new field, specify a name for the new field but before you press Enter, press the Tab key. This action indents the field, making a field of the object you just created. Now press Enter, and then specify the data type of the field.
As you build up your model you can move or copy fields across the model using the Move tool to move fields or with the Control key to copy fields.
See Also
Tutorial: Denormalizing the Physical Model
Developing the Physical Model
Transforming Model Objects from Logical to Physical
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Tutorials:_Working_with_Hierarchical_Models&oldid=7748
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Unbinding_an_Enterprise_Data_Dictionary_from_a_Diagram,Unbinding an Enterprise Data Dictionary from a Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
You can unbind an Enterprise Data Dictionary from a Diagram when you no longer need to use it. The Remove Enterprise Data Dictionary operation automatically updates the Repository server with the appropriate information. For example, a user has a Diagram that has an attribute bound to a domain in an Enterprise Data Dictionary called MyEnterpriseDD. When the user removes MyEnterpriseDD from the diagram, subsequent users who get the Diagram from the Repository will get a version of the Diagram that does not have MyEnterpriseDD in it; furthermore, the attribute is unbound from the domain.
Check out the diagram.
On the
Data Model Explorer
, select the
Data Dictionary
tab, and then select the Enterprise Data Dictionary you want to unbind.
Choose
Repository > Data Dictionary > Remove Enterprise Data Dictionary
.
Notes:
You do not need to check in the diagram to commit the change to the repository.
Any attributes that were bound to Data Dictionary items will be modified. If the attributes are not checked out from the repository before the data dictionary is removed, then ER/Studio Data Architect automatically performs a delayed Check Out.
See Also
Determining Where an Enterprise Data Dictionary is Used
Checking out the Data Dictionary
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Unbinding_an_Enterprise_Data_Dictionary_from_a_Diagram&oldid=5286
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Undoing_a_Data_Dictionary_Check_Out,Undoing a Data Dictionary Check Out,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Data Dictionaries in the Repository
The Undo Check Out operation transfers the latest version of the Diagram or Object from the Repository to your machine. You can view the Diagram, but is no longer able to modify it.
Choose
Repository > Data Dictionary > Undo Check Out Data Dictionary
.
Note:
When you undo the check out of a data dictionary, any changes made to the Diagram before doing the Undo Check Out operation are discarded.
See Also
Checking in the Data Dictionary
Redoing a Data Dictionary Redo Check Out
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Undoing_a_Data_Dictionary_Check_Out&oldid=5287
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Uninstalling,Uninstalling,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Administrator Guide
ER/Studio Data Architect
can be uninstalled using the Add/Remove Program functionality of the Windows Control Panel.
See Also
Installing ER/Studio Data Architect
Release Notes
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Uninstalling&oldid=5347
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Upgrading_Diagrams_with_Denormalization_Mappings,Upgrading Diagrams with Denormalization Mappings,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Developing the Physical Model
Instead of showing Denormalizations in the Data Model Tree, denormalizations such as Horizontal and Vertical Splits, and Rollups and Rolldowns, are maintained with the table data and appear on the Where Used tab of the Table Editor. From the Where Used tab you can see the denormalization history of the table.
Since the denormalization feature has changed in 9.0, any documents containing denormalization mappings will be upgraded to use the new features of ER/Studio Data Architect 9.0. For example, when you import a physical model from a file that uses the denormalization mappings from earlier versions of ER/Studio, you will receive the following warning message:
Denormalization mappings are now retained with the table data and can be viewed and edited on the Where Used tab of the Table Editor. Denormalization history, including Columns, Indexes, and Relationships of pre-map tables, is no longer retained, so the undo and make permanent functions specifically for denormalizations are no longer available. Denormalization mappings have been worked into the normal undo function of the product allowing them to be undone like other operations. However, the names of the pre-map tables are retained. Retaining only essential pre-map information means that the DM1 file with denormalizations is smaller and therefore opens faster.
For more information, see
Optimizing Query Performance on the Physical Model (Denormalizing the Physical Model)
.
When upgrading version 8.5 and earlier dm1 files to version 9.0 and higher, you will see the following message when you attempt to open a diagram that contains denormalization mappings.
A similar message displays when you run the Diagram Data Version Upgrade utility on the Repository.
Converting the file to 9.0 changes the denormalization information from something similar to the following in version 8.5.
to the following in 9.0 and higher.
See Also
Optimizing Query Performance on the Physical Model (Denormalizing the Physical Model)
Associate Similar Objects Using User-Defined Mappings
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Upgrading_Diagrams_with_Denormalization_Mappings&oldid=5289
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Upgrading_From_Previous_Versions,Upgrading From Previous Versions,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Page
Important:
The Repository installation is now part of Team Server and for the latest upgrade information, please see the
Team Server wiki
.
Contents
1
Upgrade Checklist
2
Preparing to Upgrade the Repository
3
Important Notes
4
See Also
Upgrade Checklist
Download the latest version of ER/Studio. To download the most current release, go to the
Registered Products Portal
.
Review the ER/Studio ReadMe. For the most current installation and usage information, see the
online version
.
In case you need to upgrade Team Server/Repository to match the features available in your version of ER/Studio Data Architect, see
Upgrading Team Server and Repository
.
Note:
Beginning with v18.5, ER/Studio Data Architect retains settings from previous versions.
WARNING:
If you plan to use the sample macros, first make a copy of the samples, and then store the copy in a folder separate from the ER/Studio installation folder to avoid overwriting your custom macros when upgrading to later versions of ER/Studio. Make sure that you make changes only to the copy of the sample macros.
Note:
This procedure is for ER/Studio Enterprise installations only, which include the Repository. When you upgrade ER/Studio Data Architect, you must also upgrade ER/Studio Repository to correspond with the same build date as ER/Studio Data Architect.
License Enforcement
. When working with the Repository, all users must use the same license type. ER/Studio now enforces this by marking the Repository as an Enterprise Team Edition Repository when a user with an Enterprise Team Edition license logs in. Subsequent log in attempts by users with a non-Team Edition license are denied.
Preparing to Upgrade the Repository
To prepare to upgrade the Repository:
Ensure you have backed up all your .dm1 files.
Check in all your diagrams and objects. If you try to check in a file from the previous version with the same name as a current file, the current file will become corrupted.
Rename all local copies of Repository diagrams in the active file directory as follows:
Choose
Repository > Options.
Make note of the Active File Directory.
Switch to the Windows Explorer and rename all the diagrams in the Active File Directory. Alternatively you can create a backup folder and move all dm1 files into the backup folder.
WARNING:
Do not delete the RepoMachineToken.ini file in your Active File Directory.
Important Notes
Always back up the Repository database before upgrading.
You can install both the current version and an earlier version of ER/Studio Data Architect on the same workstation.
See Also
Release Notes
Installing ER/Studio Data Architect
Licensing
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Upgrading_From_Previous_Versions&oldid=7489
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/User_Guide,User Guide,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Main Wiki
This volume of help describes how to use ER/Studio Data Architect as an authenticated user.
Topics
Overview
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Using ER/Studio Data Architect
Working with ERStudio Repository
Automating ER/Studio Data Architect
See Also
Overview
Administrator Guide
About this Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=User_Guide&oldid=5335
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Using_ER/Studio_Data_Architect,Using ER/Studio Data Architect,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
User Guide
This section includes the following topics:
Creating and Working With Data Models
Best Practices
Common Tasks
Developing the Logical Model
Developing the Physical Model
Connecting to Database Sources and Targets
Working with the Data Dictionary
Documenting Data Extraction, Transformation, and Load
Saving and Using Quick Launch Settings
Generating RTF and HTML Model Reports
Exporting the Data Model
Printing the Data Model
Exporting an Image of the Data Model
See Also
Administrator Guide
Working with ERStudio Repository
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Using_ER/Studio_Data_Architect&oldid=5292
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Using_Native_or_Direct_Database_Connections,Using Native or Direct Database Connections,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Connecting to Database Sources and Targets
Using a native or direct database connection you can reverse engineer all the database objects supported by a specific platform. To connect to these databases you must first install the corresponding DBMS client utility software available from your database vendor, in the cases it is needed.
The following table lists the databases platform you can connect to using native or direct connections and the RDMBS client utility, when required.
Note:
For SQL Server using TLS 1.2, the ER/Studio Data Architect client machine requires installation of the latest SQL Server native client driver.
Database Platform
Required RDBMS Client Utility Software
IBM DB2 for z/OS
IBM DB2 Connect
IBM DB2 for LUW
Corresponding version of IBM DB2 Client Utilities
IBM DB2 for AS/400 V4R5 and V5R2
Corresponding version of IBM DB2 Client Utilities
Microsoft SQL Server
Corresponding version of SQL Server Client Access
Oracle
Corresponding version of Oracle Client Utilities
Sybase ASE
Sybase Client Utilities 11.9 or later
Azure SQL DB
No client utility required
Hive (on IBM BigSQL, Hortonworks, Cloudera)
No client utility required
MongoDB
No client utility required
Provide to your ER/Studio Data Architect users the data source connection strings required for your databases so they can enter them in the Data Source fields of the Reverse Engineer, DDL Generation or Compare and Merge wizards.
Database
Required Data Source Connection String
IBM DB2 for z/OS
Use the server name / IP
IBM DB2 for LUW
Use the ODBC data source you have specified in the ODBC Data Source Administrator.
MS SQL Server
Use the server name / IP
Oracle
Use the SQL*Net connection string or an alias if you have defined one in:
Oracle SQL*Net Easy Config
Oracle Net8 Easy Config
Oracle Net8 Configuration Assistant
Sybase ASE
Use the server name / IP
Azure SQL DB
Use the server name / IP
Hive
Use the server name / IP
MongoDB
Use the server name / IP
See Also
Reverse Engineering an Existing Database
Generating a Script File or Database
Using the Compare and Merge Utility
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Using_Native_or_Direct_Database_Connections&oldid=5927
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Using_Toolbar_Tools,Using Toolbar Tools,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Common Tasks
For many procedures, instead of clicking a menu and selecting an option, you can click a tool on one of the toolbars to accomplish the same task.
For example, to insert an entity you can click the Entity tool on the Data Model Window. You can obtain the
Entity tool
using either of the following methods:
Choose
Insert > Entity
.
OR
Click the
Entity
tool
.
When you pause the cursor over any tool, the name of the tool displays as follows:
See Also
Overview
Creating a Data Model Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Using_Toolbar_Tools&oldid=5294
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Main_Page,Online Help for ER/Studio Data Architect 20.3.x,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Getting Started
★
What's New
★
Release Notes
Installation Notes
|
Installation Guide
Upgrading From Previous Versions
Quick Start Guide
Tutorials
Administrator Guide
Changing the Location of Shared Files
Uninstalling
Licensing
How to Specify Repository Ports
Best Practices
Reference
ER/Studio MetaWizard Import/Export Bridges
Troubleshooting
Glossary
Supported Database Platforms
Table Of Contents
User Guide
Overview
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Using ER/Studio Data Architect
Working with ERStudio Repository
Automating ER/Studio Data Architect
Team Server & Repository
Installation
Administration
ETL/Data Lineage
ETL Import
Related Files
ER/Studio Data Architect Read Me
ER/Studio Viewer Read Me
ER/Studio Data Architect Quick Start Guide
ER/Studio Team Server and Repository Installation and Upgrade Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Main_Page&oldid=7976
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Main_Page,Online Help for ER/Studio Data Architect 20.3.x,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Getting Started
★
What's New
★
Release Notes
Installation Notes
|
Installation Guide
Upgrading From Previous Versions
Quick Start Guide
Tutorials
Administrator Guide
Changing the Location of Shared Files
Uninstalling
Licensing
How to Specify Repository Ports
Best Practices
Reference
ER/Studio MetaWizard Import/Export Bridges
Troubleshooting
Glossary
Supported Database Platforms
Table Of Contents
User Guide
Overview
Application Interface
Configuring and Customizing
Data Modeling Fundamentals
Using ER/Studio Data Architect
Working with ERStudio Repository
Automating ER/Studio Data Architect
Team Server & Repository
Installation
Administration
ETL/Data Lineage
ETL Import
Related Files
ER/Studio Data Architect Read Me
ER/Studio Viewer Read Me
ER/Studio Data Architect Quick Start Guide
ER/Studio Team Server and Repository Installation and Upgrade Guide
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Main_Page&oldid=7976
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Special:Random,Discarding Changes Made to a Checked Out Diagram,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Go Up to
Working with Objects in the Repository
If you have checked out a diagram, made changes to it, and want to undo all the changes you made you can undo the check out.
Log in to the Repository and open the target diagram.
To discard the changes, without checking out the diagram again
, choose
Repository > Diagrams > Undo Diagram Check Out.
To discard the changes, and check out the diagram again
, choose
Repository > Diagrams > Redo Diagram Check Out.
This refreshes the local copy of the diagram with the latest version from the Repository.
See Also
Saving Changed Items to the Repository (Checking In)
Viewing the Checkin History of a Repository Object
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=Discarding_Changes_Made_to_a_Checked_Out_Diagram&oldid=5142
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Special:SpecialPages,Special pages,"Jump to:
navigation
,
search
Maintenance reports
Broken redirects
Dead-end pages
Double redirects
Long pages
Oldest pages
Orphaned pages
Pages with the fewest revisions
Pages without language links
Protected pages
Protected titles
Short pages
Uncategorized categories
Uncategorized files
Uncategorized pages
Uncategorized templates
Unused categories
Unused files
Unused templates
Wanted categories
Wanted files
Wanted pages
Wanted templates
Lists of pages
All pages
All pages with prefix
Categories
List of redirects
Pages with a page property
Search
Tracking categories
Login / create account
Log in
Users and rights
Active users list
Autoblocks
Blocked users
Bot passwords
Change credentials
Change or remove email address
Grants
Preferences
Remove credentials
Reset password
Reset tokens
User contributions
User group rights
User list
User rights
Recent changes and logs
Gallery of new files
Logs
New pages
Recent changes
Related changes
Valid change tags
Watchlist
Media reports and uploads
File list
List of files with duplicates
MIME search
Media statistics
Search for duplicate files
Data and tools
API sandbox
Book sources
Expand templates
Statistics
System messages
Version
Redirecting special pages
Differences
External links search
Permanent link
Random page
Random page in category
Random redirect
Random root page
Redirect by file, user, page, revision, or log ID
High use pages
Most linked-to categories
Most linked-to files
Most linked-to pages
Most transcluded pages
Pages with the most categories
Pages with the most interwikis
Pages with the most revisions
Page tools
Compare pages
Export pages
What links here
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/en/Special:SpecialPages
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/ER/Studio_Data_Architect:Privacy_policy,ER/Studio Data Architect:Privacy policy,"From ER/Studio Data Architect
Jump to:
navigation
,
search
Summary
If you only read the Documentation wiki, no more information is collected than is typically collected in server logs by web sites in general. The web site uses Google Analytics to gather anonymous usage statistics in order to allow us to track use of the site and continuously improve the browsing experience for your benefit. No personal data is gathered, beyond data voluntarily entered when filling out forms or ordering products.
If you contribute to the Documentation wiki, you are publishing every word you post publicly, and your words will be associated with your wiki user name. If you write something, assume that it will be retained forever.
Publishing on the Wiki and Public Data
Simply visiting the web site does not expose your identity publicly.
When you edit any page in the wiki, however, you are publishing a document. This is a public act, and you are identified publicly with that edit as its author.
Identification of an Author
To publish a page in the wiki, you need to be logged in and you will be identified by your username. For many customers, this username is your email address.
Private Logging
Every time you visit a web page, you send a lot of information to the web server. Most web servers routinely maintain access logs with a portion of this information, which can be used to get an overall picture of what pages are popular, what other sites link to this one, and what web browsers people are using. It is not the intention to use this information to keep track of legitimate users.
Sharing Information with Third Parties
All text added to this wiki is available for reuse subject to the
Submissions Policy
.
User Data
Data on users, such as the times at which they edited and the number of edits they have made are publicly available via ""user contributions"" lists, and in aggregated forms published by other users.
Removal of User Accounts
Once created, user accounts will not be removed. It may be possible for a username to be changed (depending on the number of edits you have).
Deletion of content
Removing text does not permanently delete it. In normal articles, anyone can look at a previous version and see what was there. If an article is ""deleted"", any Sysop can see what was deleted.
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=ER/Studio_Data_Architect:Privacy_policy&oldid=5314
""
Category
:
Help"
https://docwiki.embarcadero.com/ERStudioDA/203/en/ER/Studio_Data_Architect:About,ER/Studio Data Architect:About,"From ER/Studio Data Architect
Jump to:
navigation
,
search
For more information about ER/Studio, see:
ER/Studio Online Help website
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=ER/Studio_Data_Architect:About&oldid=4789
"""
https://docwiki.embarcadero.com/ERStudioDA/203/en/ER/Studio_Data_Architect:General_disclaimer,ER/Studio Data Architect:General disclaimer,"From ER/Studio Data Architect
Jump to:
navigation
,
search
TERMS OF USE
BY ACCESSING, BROWSING AND/OR USING THIS DOCUMENTATION WIKI, YOU ACKNOWLEDGE THAT YOU HAVE READ, UNDERSTOOD, AND AGREE TO BE BOUND BY THESE TERMS AND TO COMPLY WITH ALL APPLICABLE LAWS AND REGULATIONS. IF YOU DO NOT AGREE TO THESE TERMS, DO NOT USE THE EMBARCADERO TECHNOLOGIES DOCUMENTATION WIKI.
INFORMATION IN THE DOCUMENTATION WIKI IS PROVIDED ""AS-IS"". SUBJECT TO STATUTORY WARRANTIES, IF ANY, THAT CANNOT BE EXCLUDED. EMBARCADERO TECHNOLOGIES, ITS DEVELOPERS AND SUPPLIERS MAKE NO WARRANTIES, REPRESENTATIONS, GUARANTEES, OR CONDITIONS OF ANY KIND, EITHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT.
IN NO EVENT WILL EMBARCADERO TECHNOLOGIES BE LIABLE TO ANY PARTY FOR ANY DIRECT, INDIRECT, SPECIAL CONSEQUENTIAL, OR OTHER DAMAGES OF ANY KIND FOR ANY USE OF THE DOCUMENTATION WIKI, WEB SITE OR CONTENT, OR FOR ANY OTHER HYPER LINKED WEB SITE AND ITS CONTENT, INCLUDING, WITHOUT LIMITATION, ANY LOST PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS, OR OTHER DATA ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE, EVEN IF WE ARE EXPRESSLY ADVISED OF OR AWARE OF THE POSSIBILITY OF SUCH DAMAGES OR LOSSES. THIS EXCLUSION AND WAIVER OF LIABILITY APPLIES TO ALL CAUSES OF ACTION, WHETHER BASED ON CONTRACT, WARRANTY, TORT, OR ANY OTHER LEGAL THEORIES.
Embarcadero Technologies may at any time without notice revise these terms by updating this posting. By using this Documentation Wiki (
the wiki
), you agree to be bound by any such revisions and should therefore periodically visit this page to determine the current terms by which you are bound.
This wiki is an online open-content collaborative feedback portal made available by Embarcadero Technologies, that is designed to facilitate customer feedback in an effort to improve Embarcadero documentation. Please be advised that Embarcadero Technologies has not necessarily reviewed all the content found in the wiki and the content provided may not be complete, accurate, or reliable.
Embarcadero Technologies cannot guarantee the validity of the information found here at all times because:
The content of any given comment may recently have been changed or altered by someone without current knowledge in the relevant fields.
The content may contain technical inaccuracies or typographical errors and may be changed, improved, or updated without notice.
Use of the wiki  and its content is at the recipient's own risk.
Please be aware that Embarcadero Technologies does not grant any rights or licenses to any copyrights, patents, trademarks, or any other intellectual property rights, except as otherwise expressly stated for the content. All rights not explicitly granted under this agreement are reserved.
Embarcadero Technologies grants you non-exclusive, non-transferable, limited permission to access and display the pages within the wiki for your own personal use. If you use or reference content from the wiki, note that such content is not provided as ""public domain"" and is copyrighted Embarcadero Technologies, Inc. and its licensors. You may not mirror any of the content from this site on another Web site or in any other media. You may not copy or distribute in whole or in part the contents of this Wiki. Your failure to comply with the terms, conditions, and notices in the wiki will result in automatic termination of any rights granted to you, without prior notice.
Embarcadero Technologies provides no assurances that any reported problems may be resolved with the use of the wiki or any content.
Plans concerning content referenced in the wiki may change at any time at Embarcadero Technologies's sole discretion based on market opportunities or other factors, and are not intended to be a commitment to future content or availability in any way. All statements regarding Embarcadero Technologies's future directions or intents are subject to change or withdrawal without notice and represent goals and objectives only.
Conduct
You may not use the wiki to communicate in any manner any unlawful or inappropriate information or materials, including without limitation anything that is threatening, libelous, defamatory, obscene, inflammatory, pornographic, or profane. Embarcadero Technologies may investigate complaints or violations of these Terms of Use and, notwithstanding any other terms or policies, it may take any action it deems appropriate including, without limitation, disclosing any information to enforcement agencies or others. In addition, Embarcadero Technologies reserves the right to pursue all remedies available for such violations, and may revoke access to the wiki at any time.
Contributions
By contributing to the wiki any information or material, you grant Embarcadero Technologies an unrestricted, worldwide, non-exclusive, irrevocable, perpetual, royalty-free, fully paid-up, license to use, make, have made, reproduce, display, perform, publish, upload, post, modify, create derivative works from, transmit, distribute, sell, offer for sale, or otherwise transfer those materials or information or their modifications, and to authorize third parties to do any, some, or all of the foregoing indefinitely. You represent and warrant that to your knowledge, you have sufficient rights in those materials or information to grant these rights and licenses. You also agree that Embarcadero Technologies is free to use any ideas, concepts, know-how, or techniques that you send us for any purpose. For further information, see
submissions
.
Confidential Information
Embarcadero Technologies does not want to receive confidential or proprietary information or material from you through the wiki. Please note that any information or material sent to the wiki will be deemed not to be confidential.
General
All trademarks and logos presented in the Wiki are and remain the property of Embarcadero Technologies. No licenses or other rights in or to such trademarks or logos are granted. The wiki may contain other proprietary notices and copyright information, the terms of which must be observed and followed.
Laws in your country or jurisdiction may not protect or allow the same kinds of speech or distribution. The wiki does not encourage the violation of any laws; Embarcadero Technologies cannot be responsible for any violations of such laws, should you link to this domain or use, reproduce, or republish the information contained herein.
See Also
Copyrights
Privacy policy
Retrieved from ""
https://docwiki.embarcadero.com/ERStudioDA/203/e/index.php?title=ER/Studio_Data_Architect:General_disclaimer&oldid=5313
""
Category
:
Help"
